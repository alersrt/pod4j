/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.alersrt.pod4j.openapi.api;

import com.google.gson.reflect.TypeToken;
import io.github.alersrt.pod4j.openapi.ApiCallback;
import io.github.alersrt.pod4j.openapi.ApiClient;
import io.github.alersrt.pod4j.openapi.ApiException;
import io.github.alersrt.pod4j.openapi.ApiResponse;
import io.github.alersrt.pod4j.openapi.Configuration;
import io.github.alersrt.pod4j.openapi.Pair;
import io.github.alersrt.pod4j.openapi.model.IdResponse;
import io.github.alersrt.pod4j.openapi.model.LibpodImagesRemoveReport;
import io.github.alersrt.pod4j.openapi.model.ManifestAddOptions;
import io.github.alersrt.pod4j.openapi.model.ManifestModifyOptions;
import io.github.alersrt.pod4j.openapi.model.ManifestModifyReport;
import io.github.alersrt.pod4j.openapi.model.Schema2ListPublic;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManifestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManifestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManifestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for manifestAddLibpod
     *
     * @param name the name or ID of the manifest (required)
     * @param options options for creating a manifest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestAddLibpodCall(
            String name, ManifestAddOptions options, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = options;

        // create path and map variables
        String localVarPath =
                "/libpod/manifests/{name}/add"
                        .replace(
                                "{" + "name" + "}",
                                localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json", "application/x-tar"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestAddLibpodValidateBeforeCall(
            String name, ManifestAddOptions options, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException(
                    "Missing the required parameter 'name' when calling manifestAddLibpod(Async)");
        }

        return manifestAddLibpodCall(name, options, _callback);
    }

    /**
     * Add image Add an image to a manifest list Deprecated: As of 4.0.0 use ManifestModifyLibpod
     * instead
     *
     * @param name the name or ID of the manifest (required)
     * @param options options for creating a manifest (optional)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse manifestAddLibpod(String name, ManifestAddOptions options)
            throws ApiException {
        ApiResponse<IdResponse> localVarResp = manifestAddLibpodWithHttpInfo(name, options);
        return localVarResp.getData();
    }

    /**
     * Add image Add an image to a manifest list Deprecated: As of 4.0.0 use ManifestModifyLibpod
     * instead
     *
     * @param name the name or ID of the manifest (required)
     * @param options options for creating a manifest (optional)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> manifestAddLibpodWithHttpInfo(
            String name, ManifestAddOptions options) throws ApiException {
        okhttp3.Call localVarCall = manifestAddLibpodValidateBeforeCall(name, options, null);
        Type localVarReturnType = new TypeToken<IdResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add image (asynchronously) Add an image to a manifest list Deprecated: As of 4.0.0 use
     * ManifestModifyLibpod instead
     *
     * @param name the name or ID of the manifest (required)
     * @param options options for creating a manifest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestAddLibpodAsync(
            String name, ManifestAddOptions options, final ApiCallback<IdResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = manifestAddLibpodValidateBeforeCall(name, options, _callback);
        Type localVarReturnType = new TypeToken<IdResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for manifestCreateLibpod
     *
     * @param name manifest list or index name to create (required)
     * @param images One or more names of an image or a manifest list. Repeat parameter as needed.
     *     Support for multiple images, as of version 4.0.0 Alias of &#x60;image&#x60; is support
     *     for compatibility with &lt; 4.0.0 Response status code is 200 with &lt; 4.0.0 for
     *     compatibility (required)
     * @param all add all contents if given list (optional)
     * @param amend modify an existing list if one with the desired name already exists (optional)
     * @param options options for new manifest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such image </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestCreateLibpodCall(
            String name,
            String images,
            Boolean all,
            Boolean amend,
            ManifestModifyOptions options,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = options;

        // create path and map variables
        String localVarPath =
                "/libpod/manifests/{name}"
                        .replace(
                                "{" + "name" + "}",
                                localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (images != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("images", images));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (amend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amend", amend));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json", "application/x-tar"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestCreateLibpodValidateBeforeCall(
            String name,
            String images,
            Boolean all,
            Boolean amend,
            ManifestModifyOptions options,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException(
                    "Missing the required parameter 'name' when calling"
                            + " manifestCreateLibpod(Async)");
        }

        // verify the required parameter 'images' is set
        if (images == null) {
            throw new ApiException(
                    "Missing the required parameter 'images' when calling"
                            + " manifestCreateLibpod(Async)");
        }

        return manifestCreateLibpodCall(name, images, all, amend, options, _callback);
    }

    /**
     * Create Create a manifest list
     *
     * @param name manifest list or index name to create (required)
     * @param images One or more names of an image or a manifest list. Repeat parameter as needed.
     *     Support for multiple images, as of version 4.0.0 Alias of &#x60;image&#x60; is support
     *     for compatibility with &lt; 4.0.0 Response status code is 200 with &lt; 4.0.0 for
     *     compatibility (required)
     * @param all add all contents if given list (optional)
     * @param amend modify an existing list if one with the desired name already exists (optional)
     * @param options options for new manifest (optional)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such image </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse manifestCreateLibpod(
            String name, String images, Boolean all, Boolean amend, ManifestModifyOptions options)
            throws ApiException {
        ApiResponse<IdResponse> localVarResp =
                manifestCreateLibpodWithHttpInfo(name, images, all, amend, options);
        return localVarResp.getData();
    }

    /**
     * Create Create a manifest list
     *
     * @param name manifest list or index name to create (required)
     * @param images One or more names of an image or a manifest list. Repeat parameter as needed.
     *     Support for multiple images, as of version 4.0.0 Alias of &#x60;image&#x60; is support
     *     for compatibility with &lt; 4.0.0 Response status code is 200 with &lt; 4.0.0 for
     *     compatibility (required)
     * @param all add all contents if given list (optional)
     * @param amend modify an existing list if one with the desired name already exists (optional)
     * @param options options for new manifest (optional)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such image </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> manifestCreateLibpodWithHttpInfo(
            String name, String images, Boolean all, Boolean amend, ManifestModifyOptions options)
            throws ApiException {
        okhttp3.Call localVarCall =
                manifestCreateLibpodValidateBeforeCall(name, images, all, amend, options, null);
        Type localVarReturnType = new TypeToken<IdResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create (asynchronously) Create a manifest list
     *
     * @param name manifest list or index name to create (required)
     * @param images One or more names of an image or a manifest list. Repeat parameter as needed.
     *     Support for multiple images, as of version 4.0.0 Alias of &#x60;image&#x60; is support
     *     for compatibility with &lt; 4.0.0 Response status code is 200 with &lt; 4.0.0 for
     *     compatibility (required)
     * @param all add all contents if given list (optional)
     * @param amend modify an existing list if one with the desired name already exists (optional)
     * @param options options for new manifest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such image </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestCreateLibpodAsync(
            String name,
            String images,
            Boolean all,
            Boolean amend,
            ManifestModifyOptions options,
            final ApiCallback<IdResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                manifestCreateLibpodValidateBeforeCall(
                        name, images, all, amend, options, _callback);
        Type localVarReturnType = new TypeToken<IdResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for manifestDeleteLibpod
     *
     * @param name The name or ID of the list to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Image Remove </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestDeleteLibpodCall(String name, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/libpod/manifests/{name}"
                        .replace(
                                "{" + "name" + "}",
                                localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestDeleteLibpodValidateBeforeCall(
            String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException(
                    "Missing the required parameter 'name' when calling"
                            + " manifestDeleteLibpod(Async)");
        }

        return manifestDeleteLibpodCall(name, _callback);
    }

    /**
     * Delete manifest list Delete named manifest list As of v4.0.0
     *
     * @param name The name or ID of the list to be deleted (required)
     * @return LibpodImagesRemoveReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Image Remove </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public LibpodImagesRemoveReport manifestDeleteLibpod(String name) throws ApiException {
        ApiResponse<LibpodImagesRemoveReport> localVarResp = manifestDeleteLibpodWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Delete manifest list Delete named manifest list As of v4.0.0
     *
     * @param name The name or ID of the list to be deleted (required)
     * @return ApiResponse&lt;LibpodImagesRemoveReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Image Remove </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<LibpodImagesRemoveReport> manifestDeleteLibpodWithHttpInfo(String name)
            throws ApiException {
        okhttp3.Call localVarCall = manifestDeleteLibpodValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<LibpodImagesRemoveReport>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete manifest list (asynchronously) Delete named manifest list As of v4.0.0
     *
     * @param name The name or ID of the list to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Image Remove </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestDeleteLibpodAsync(
            String name, final ApiCallback<LibpodImagesRemoveReport> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = manifestDeleteLibpodValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<LibpodImagesRemoveReport>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for manifestExistsLibpod
     *
     * @param name the name or ID of the manifest list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> manifest list exists </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestExistsLibpodCall(String name, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/libpod/manifests/{name}/exists"
                        .replace(
                                "{" + "name" + "}",
                                localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestExistsLibpodValidateBeforeCall(
            String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException(
                    "Missing the required parameter 'name' when calling"
                            + " manifestExistsLibpod(Async)");
        }

        return manifestExistsLibpodCall(name, _callback);
    }

    /**
     * Exists Check if manifest list exists Note: There is no contract that the manifest list will
     * exist for a follow-on operation
     *
     * @param name the name or ID of the manifest list (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> manifest list exists </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public void manifestExistsLibpod(String name) throws ApiException {
        manifestExistsLibpodWithHttpInfo(name);
    }

    /**
     * Exists Check if manifest list exists Note: There is no contract that the manifest list will
     * exist for a follow-on operation
     *
     * @param name the name or ID of the manifest list (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> manifest list exists </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> manifestExistsLibpodWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = manifestExistsLibpodValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Exists (asynchronously) Check if manifest list exists Note: There is no contract that the
     * manifest list will exist for a follow-on operation
     *
     * @param name the name or ID of the manifest list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td> manifest list exists </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestExistsLibpodAsync(String name, final ApiCallback<Void> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = manifestExistsLibpodValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for manifestInspectLibpod
     *
     * @param name the name or ID of the manifest list (required)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Inspect Manifest </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestInspectLibpodCall(
            String name, Boolean tlsVerify, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/libpod/manifests/{name}/json"
                        .replace(
                                "{" + "name" + "}",
                                localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tlsVerify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tlsVerify", tlsVerify));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestInspectLibpodValidateBeforeCall(
            String name, Boolean tlsVerify, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException(
                    "Missing the required parameter 'name' when calling"
                            + " manifestInspectLibpod(Async)");
        }

        return manifestInspectLibpodCall(name, tlsVerify, _callback);
    }

    /**
     * Inspect Display attributes of given manifest list
     *
     * @param name the name or ID of the manifest list (required)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @return Schema2ListPublic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Inspect Manifest </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public Schema2ListPublic manifestInspectLibpod(String name, Boolean tlsVerify)
            throws ApiException {
        ApiResponse<Schema2ListPublic> localVarResp =
                manifestInspectLibpodWithHttpInfo(name, tlsVerify);
        return localVarResp.getData();
    }

    /**
     * Inspect Display attributes of given manifest list
     *
     * @param name the name or ID of the manifest list (required)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @return ApiResponse&lt;Schema2ListPublic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Inspect Manifest </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Schema2ListPublic> manifestInspectLibpodWithHttpInfo(
            String name, Boolean tlsVerify) throws ApiException {
        okhttp3.Call localVarCall = manifestInspectLibpodValidateBeforeCall(name, tlsVerify, null);
        Type localVarReturnType = new TypeToken<Schema2ListPublic>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inspect (asynchronously) Display attributes of given manifest list
     *
     * @param name the name or ID of the manifest list (required)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Inspect Manifest </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestInspectLibpodAsync(
            String name, Boolean tlsVerify, final ApiCallback<Schema2ListPublic> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                manifestInspectLibpodValidateBeforeCall(name, tlsVerify, _callback);
        Type localVarReturnType = new TypeToken<Schema2ListPublic>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for manifestModifyLibpod
     *
     * @param name the name or ID of the manifest (required)
     * @param options options for mutating a manifest (required)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Operation had partial success, both Images and Errors may have members </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestModifyLibpodCall(
            String name,
            ManifestModifyOptions options,
            Boolean tlsVerify,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = options;

        // create path and map variables
        String localVarPath =
                "/libpod/manifests/{name}"
                        .replace(
                                "{" + "name" + "}",
                                localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tlsVerify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tlsVerify", tlsVerify));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/json", "application/x-tar"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestModifyLibpodValidateBeforeCall(
            String name,
            ManifestModifyOptions options,
            Boolean tlsVerify,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException(
                    "Missing the required parameter 'name' when calling"
                            + " manifestModifyLibpod(Async)");
        }

        // verify the required parameter 'options' is set
        if (options == null) {
            throw new ApiException(
                    "Missing the required parameter 'options' when calling"
                            + " manifestModifyLibpod(Async)");
        }

        return manifestModifyLibpodCall(name, options, tlsVerify, _callback);
    }

    /**
     * Modify manifest list Add/Remove an image(s) to a manifest list Note: operations are not
     * atomic when multiple Images are provided. As of v4.0.0
     *
     * @param name the name or ID of the manifest (required)
     * @param options options for mutating a manifest (required)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @return ManifestModifyReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Operation had partial success, both Images and Errors may have members </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ManifestModifyReport manifestModifyLibpod(
            String name, ManifestModifyOptions options, Boolean tlsVerify) throws ApiException {
        ApiResponse<ManifestModifyReport> localVarResp =
                manifestModifyLibpodWithHttpInfo(name, options, tlsVerify);
        return localVarResp.getData();
    }

    /**
     * Modify manifest list Add/Remove an image(s) to a manifest list Note: operations are not
     * atomic when multiple Images are provided. As of v4.0.0
     *
     * @param name the name or ID of the manifest (required)
     * @param options options for mutating a manifest (required)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @return ApiResponse&lt;ManifestModifyReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Operation had partial success, both Images and Errors may have members </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ManifestModifyReport> manifestModifyLibpodWithHttpInfo(
            String name, ManifestModifyOptions options, Boolean tlsVerify) throws ApiException {
        okhttp3.Call localVarCall =
                manifestModifyLibpodValidateBeforeCall(name, options, tlsVerify, null);
        Type localVarReturnType = new TypeToken<ManifestModifyReport>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify manifest list (asynchronously) Add/Remove an image(s) to a manifest list Note:
     * operations are not atomic when multiple Images are provided. As of v4.0.0
     *
     * @param name the name or ID of the manifest (required)
     * @param options options for mutating a manifest (required)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 409 </td><td> Operation had partial success, both Images and Errors may have members </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestModifyLibpodAsync(
            String name,
            ManifestModifyOptions options,
            Boolean tlsVerify,
            final ApiCallback<ManifestModifyReport> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                manifestModifyLibpodValidateBeforeCall(name, options, tlsVerify, _callback);
        Type localVarReturnType = new TypeToken<ManifestModifyReport>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for manifestPushLibpod
     *
     * @param name the name or ID of the manifest list (required)
     * @param destination the registry for the manifest list (required)
     * @param addCompression add existing instances with requested compression algorithms to
     *     manifest list (optional)
     * @param forceCompressionFormat Enforce compressing the layers with the specified --compression
     *     and do not reuse differently compressed blobs on the registry. (optional, default to
     *     false)
     * @param all push all images (optional, default to true)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @param quiet silences extra stream data on push (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestPushLibpodCall(
            String name,
            String destination,
            List<String> addCompression,
            Boolean forceCompressionFormat,
            Boolean all,
            Boolean tlsVerify,
            Boolean quiet,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/libpod/manifests/{name}/registry/{destination}"
                        .replace(
                                "{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
                        .replace(
                                "{" + "destination" + "}",
                                localVarApiClient.escapeString(destination.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addCompression != null) {
            localVarCollectionQueryParams.addAll(
                    localVarApiClient.parameterToPairs("csv", "addCompression", addCompression));
        }

        if (forceCompressionFormat != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "forceCompressionFormat", forceCompressionFormat));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (tlsVerify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tlsVerify", tlsVerify));
        }

        if (quiet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quiet", quiet));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestPushLibpodValidateBeforeCall(
            String name,
            String destination,
            List<String> addCompression,
            Boolean forceCompressionFormat,
            Boolean all,
            Boolean tlsVerify,
            Boolean quiet,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException(
                    "Missing the required parameter 'name' when calling manifestPushLibpod(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException(
                    "Missing the required parameter 'destination' when calling"
                            + " manifestPushLibpod(Async)");
        }

        return manifestPushLibpodCall(
                name,
                destination,
                addCompression,
                forceCompressionFormat,
                all,
                tlsVerify,
                quiet,
                _callback);
    }

    /**
     * Push manifest list to registry Push a manifest list or image index to the named registry As
     * of v4.0.0
     *
     * @param name the name or ID of the manifest list (required)
     * @param destination the registry for the manifest list (required)
     * @param addCompression add existing instances with requested compression algorithms to
     *     manifest list (optional)
     * @param forceCompressionFormat Enforce compressing the layers with the specified --compression
     *     and do not reuse differently compressed blobs on the registry. (optional, default to
     *     false)
     * @param all push all images (optional, default to true)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @param quiet silences extra stream data on push (optional, default to true)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse manifestPushLibpod(
            String name,
            String destination,
            List<String> addCompression,
            Boolean forceCompressionFormat,
            Boolean all,
            Boolean tlsVerify,
            Boolean quiet)
            throws ApiException {
        ApiResponse<IdResponse> localVarResp =
                manifestPushLibpodWithHttpInfo(
                        name,
                        destination,
                        addCompression,
                        forceCompressionFormat,
                        all,
                        tlsVerify,
                        quiet);
        return localVarResp.getData();
    }

    /**
     * Push manifest list to registry Push a manifest list or image index to the named registry As
     * of v4.0.0
     *
     * @param name the name or ID of the manifest list (required)
     * @param destination the registry for the manifest list (required)
     * @param addCompression add existing instances with requested compression algorithms to
     *     manifest list (optional)
     * @param forceCompressionFormat Enforce compressing the layers with the specified --compression
     *     and do not reuse differently compressed blobs on the registry. (optional, default to
     *     false)
     * @param all push all images (optional, default to true)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @param quiet silences extra stream data on push (optional, default to true)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> manifestPushLibpodWithHttpInfo(
            String name,
            String destination,
            List<String> addCompression,
            Boolean forceCompressionFormat,
            Boolean all,
            Boolean tlsVerify,
            Boolean quiet)
            throws ApiException {
        okhttp3.Call localVarCall =
                manifestPushLibpodValidateBeforeCall(
                        name,
                        destination,
                        addCompression,
                        forceCompressionFormat,
                        all,
                        tlsVerify,
                        quiet,
                        null);
        Type localVarReturnType = new TypeToken<IdResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Push manifest list to registry (asynchronously) Push a manifest list or image index to the
     * named registry As of v4.0.0
     *
     * @param name the name or ID of the manifest list (required)
     * @param destination the registry for the manifest list (required)
     * @param addCompression add existing instances with requested compression algorithms to
     *     manifest list (optional)
     * @param forceCompressionFormat Enforce compressing the layers with the specified --compression
     *     and do not reuse differently compressed blobs on the registry. (optional, default to
     *     false)
     * @param all push all images (optional, default to true)
     * @param tlsVerify Require HTTPS and verify signatures when contacting registries. (optional,
     *     default to true)
     * @param quiet silences extra stream data on push (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestPushLibpodAsync(
            String name,
            String destination,
            List<String> addCompression,
            Boolean forceCompressionFormat,
            Boolean all,
            Boolean tlsVerify,
            Boolean quiet,
            final ApiCallback<IdResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                manifestPushLibpodValidateBeforeCall(
                        name,
                        destination,
                        addCompression,
                        forceCompressionFormat,
                        all,
                        tlsVerify,
                        quiet,
                        _callback);
        Type localVarReturnType = new TypeToken<IdResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for manifestPushV3Libpod
     *
     * @param name the name or ID of the manifest (required)
     * @param destination the destination for the manifest (required)
     * @param all push all images (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestPushV3LibpodCall(
            String name, String destination, Boolean all, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/libpod/manifests/{name}/push"
                        .replace(
                                "{" + "name" + "}",
                                localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (destination != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("destination", destination));
        }

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestPushV3LibpodValidateBeforeCall(
            String name, String destination, Boolean all, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException(
                    "Missing the required parameter 'name' when calling"
                            + " manifestPushV3Libpod(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException(
                    "Missing the required parameter 'destination' when calling"
                            + " manifestPushV3Libpod(Async)");
        }

        return manifestPushV3LibpodCall(name, destination, all, _callback);
    }

    /**
     * Push manifest to registry Push a manifest list or image index to a registry Deprecated: As of
     * 4.0.0 use ManifestPushLibpod instead
     *
     * @param name the name or ID of the manifest (required)
     * @param destination the destination for the manifest (required)
     * @param all push all images (optional)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public IdResponse manifestPushV3Libpod(String name, String destination, Boolean all)
            throws ApiException {
        ApiResponse<IdResponse> localVarResp =
                manifestPushV3LibpodWithHttpInfo(name, destination, all);
        return localVarResp.getData();
    }

    /**
     * Push manifest to registry Push a manifest list or image index to a registry Deprecated: As of
     * 4.0.0 use ManifestPushLibpod instead
     *
     * @param name the name or ID of the manifest (required)
     * @param destination the destination for the manifest (required)
     * @param all push all images (optional)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdResponse> manifestPushV3LibpodWithHttpInfo(
            String name, String destination, Boolean all) throws ApiException {
        okhttp3.Call localVarCall =
                manifestPushV3LibpodValidateBeforeCall(name, destination, all, null);
        Type localVarReturnType = new TypeToken<IdResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Push manifest to registry (asynchronously) Push a manifest list or image index to a registry
     * Deprecated: As of 4.0.0 use ManifestPushLibpod instead
     *
     * @param name the name or ID of the manifest (required)
     * @param destination the destination for the manifest (required)
     * @param all push all images (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * <tr><td> 400 </td><td> Bad parameter in request </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> No such manifest </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call manifestPushV3LibpodAsync(
            String name, String destination, Boolean all, final ApiCallback<IdResponse> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                manifestPushV3LibpodValidateBeforeCall(name, destination, all, _callback);
        Type localVarReturnType = new TypeToken<IdResponse>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
