/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * AuthConfig contains authorization information for connecting to a Registry
 */
@JsonPropertyOrder({
  AuthConfig.JSON_PROPERTY_AUTH,
  AuthConfig.JSON_PROPERTY_EMAIL,
  AuthConfig.JSON_PROPERTY_IDENTITYTOKEN,
  AuthConfig.JSON_PROPERTY_PASSWORD,
  AuthConfig.JSON_PROPERTY_REGISTRYTOKEN,
  AuthConfig.JSON_PROPERTY_SERVERADDRESS,
  AuthConfig.JSON_PROPERTY_USERNAME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class AuthConfig {
  public static final String JSON_PROPERTY_AUTH = "auth";
  private String auth;

  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_IDENTITYTOKEN = "identitytoken";
  private String identitytoken;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_REGISTRYTOKEN = "registrytoken";
  private String registrytoken;

  public static final String JSON_PROPERTY_SERVERADDRESS = "serveraddress";
  private String serveraddress;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public AuthConfig() { 
  }

  public AuthConfig auth(String auth) {
    this.auth = auth;
    return this;
  }

  /**
   * Get auth
   * @return auth
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAuth() {
    return auth;
  }


  @JsonProperty(JSON_PROPERTY_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuth(String auth) {
    this.auth = auth;
  }


  public AuthConfig email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email is an optional value associated with the username. This field is deprecated and will be removed in a later version of docker.
   * @return email
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmail(String email) {
    this.email = email;
  }


  public AuthConfig identitytoken(String identitytoken) {
    this.identitytoken = identitytoken;
    return this;
  }

  /**
   * IdentityToken is used to authenticate the user and get an access token for the registry.
   * @return identitytoken
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IDENTITYTOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getIdentitytoken() {
    return identitytoken;
  }


  @JsonProperty(JSON_PROPERTY_IDENTITYTOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdentitytoken(String identitytoken) {
    this.identitytoken = identitytoken;
  }


  public AuthConfig password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }


  public AuthConfig registrytoken(String registrytoken) {
    this.registrytoken = registrytoken;
    return this;
  }

  /**
   * RegistryToken is a bearer token to be sent to a registry
   * @return registrytoken
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_REGISTRYTOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRegistrytoken() {
    return registrytoken;
  }


  @JsonProperty(JSON_PROPERTY_REGISTRYTOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegistrytoken(String registrytoken) {
    this.registrytoken = registrytoken;
  }


  public AuthConfig serveraddress(String serveraddress) {
    this.serveraddress = serveraddress;
    return this;
  }

  /**
   * Get serveraddress
   * @return serveraddress
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SERVERADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getServeraddress() {
    return serveraddress;
  }


  @JsonProperty(JSON_PROPERTY_SERVERADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServeraddress(String serveraddress) {
    this.serveraddress = serveraddress;
  }


  public AuthConfig username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(String username) {
    this.username = username;
  }


  /**
   * Return true if this AuthConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthConfig authConfig = (AuthConfig) o;
    return Objects.equals(this.auth, authConfig.auth) &&
        Objects.equals(this.email, authConfig.email) &&
        Objects.equals(this.identitytoken, authConfig.identitytoken) &&
        Objects.equals(this.password, authConfig.password) &&
        Objects.equals(this.registrytoken, authConfig.registrytoken) &&
        Objects.equals(this.serveraddress, authConfig.serveraddress) &&
        Objects.equals(this.username, authConfig.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auth, email, identitytoken, password, registrytoken, serveraddress, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthConfig {\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    identitytoken: ").append(toIndentedString(identitytoken)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    registrytoken: ").append(toIndentedString(registrytoken)).append("\n");
    sb.append("    serveraddress: ").append(toIndentedString(serveraddress)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `auth` to the URL query string
    if (getAuth() != null) {
      joiner.add(String.format("%sauth%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAuth()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `email` to the URL query string
    if (getEmail() != null) {
      joiner.add(String.format("%semail%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEmail()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `identitytoken` to the URL query string
    if (getIdentitytoken() != null) {
      joiner.add(String.format("%sidentitytoken%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIdentitytoken()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `password` to the URL query string
    if (getPassword() != null) {
      joiner.add(String.format("%spassword%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPassword()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `registrytoken` to the URL query string
    if (getRegistrytoken() != null) {
      joiner.add(String.format("%sregistrytoken%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRegistrytoken()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `serveraddress` to the URL query string
    if (getServeraddress() != null) {
      joiner.add(String.format("%sserveraddress%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getServeraddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `username` to the URL query string
    if (getUsername() != null) {
      joiner.add(String.format("%susername%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUsername()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

