/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.alersrt.pod4j.openapi.ApiClient;
import jakarta.validation.Valid;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
/**
 * It should hold only portable information about the container. Here, \&quot;portable\&quot; means \&quot;independent from the host we are running on\&quot;. Non-portable information *should* appear in HostConfig. All fields added to this struct must be marked &#x60;omitempty&#x60; to keep getting predictable hashes from the old &#x60;v1Compatibility&#x60; configuration.
 */
@JsonPropertyOrder({
  Config.JSON_PROPERTY_ARGS_ESCAPED,
  Config.JSON_PROPERTY_ATTACH_STDERR,
  Config.JSON_PROPERTY_ATTACH_STDIN,
  Config.JSON_PROPERTY_ATTACH_STDOUT,
  Config.JSON_PROPERTY_CMD,
  Config.JSON_PROPERTY_DOMAINNAME,
  Config.JSON_PROPERTY_ENTRYPOINT,
  Config.JSON_PROPERTY_ENV,
  Config.JSON_PROPERTY_EXPOSED_PORTS,
  Config.JSON_PROPERTY_HEALTHCHECK,
  Config.JSON_PROPERTY_HOSTNAME,
  Config.JSON_PROPERTY_IMAGE,
  Config.JSON_PROPERTY_LABELS,
  Config.JSON_PROPERTY_MAC_ADDRESS,
  Config.JSON_PROPERTY_NETWORK_DISABLED,
  Config.JSON_PROPERTY_ON_BUILD,
  Config.JSON_PROPERTY_OPEN_STDIN,
  Config.JSON_PROPERTY_SHELL,
  Config.JSON_PROPERTY_STDIN_ONCE,
  Config.JSON_PROPERTY_STOP_SIGNAL,
  Config.JSON_PROPERTY_STOP_TIMEOUT,
  Config.JSON_PROPERTY_TTY,
  Config.JSON_PROPERTY_USER,
  Config.JSON_PROPERTY_VOLUMES,
  Config.JSON_PROPERTY_WORKING_DIR
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class Config {
  public static final String JSON_PROPERTY_ARGS_ESCAPED = "ArgsEscaped";
  private Boolean argsEscaped;

  public static final String JSON_PROPERTY_ATTACH_STDERR = "AttachStderr";
  private Boolean attachStderr;

  public static final String JSON_PROPERTY_ATTACH_STDIN = "AttachStdin";
  private Boolean attachStdin;

  public static final String JSON_PROPERTY_ATTACH_STDOUT = "AttachStdout";
  private Boolean attachStdout;

  public static final String JSON_PROPERTY_CMD = "Cmd";
  private List<String> cmd = new ArrayList<>();

  public static final String JSON_PROPERTY_DOMAINNAME = "Domainname";
  private String domainname;

  public static final String JSON_PROPERTY_ENTRYPOINT = "Entrypoint";
  private List<String> entrypoint = new ArrayList<>();

  public static final String JSON_PROPERTY_ENV = "Env";
  private List<String> env = new ArrayList<>();

  public static final String JSON_PROPERTY_EXPOSED_PORTS = "ExposedPorts";
  private Map<String, Object> exposedPorts = new HashMap<>();

  public static final String JSON_PROPERTY_HEALTHCHECK = "Healthcheck";
  private HealthcheckConfig healthcheck;

  public static final String JSON_PROPERTY_HOSTNAME = "Hostname";
  private String hostname;

  public static final String JSON_PROPERTY_IMAGE = "Image";
  private String image;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_MAC_ADDRESS = "MacAddress";
  private String macAddress;

  public static final String JSON_PROPERTY_NETWORK_DISABLED = "NetworkDisabled";
  private Boolean networkDisabled;

  public static final String JSON_PROPERTY_ON_BUILD = "OnBuild";
  private List<String> onBuild = new ArrayList<>();

  public static final String JSON_PROPERTY_OPEN_STDIN = "OpenStdin";
  private Boolean openStdin;

  public static final String JSON_PROPERTY_SHELL = "Shell";
  private List<String> shell = new ArrayList<>();

  public static final String JSON_PROPERTY_STDIN_ONCE = "StdinOnce";
  private Boolean stdinOnce;

  public static final String JSON_PROPERTY_STOP_SIGNAL = "StopSignal";
  private String stopSignal;

  public static final String JSON_PROPERTY_STOP_TIMEOUT = "StopTimeout";
  private Long stopTimeout;

  public static final String JSON_PROPERTY_TTY = "Tty";
  private Boolean tty;

  public static final String JSON_PROPERTY_USER = "User";
  private String user;

  public static final String JSON_PROPERTY_VOLUMES = "Volumes";
  private Map<String, Object> volumes = new HashMap<>();

  public static final String JSON_PROPERTY_WORKING_DIR = "WorkingDir";
  private String workingDir;

  public Config() { 
  }

  public Config argsEscaped(Boolean argsEscaped) {
    this.argsEscaped = argsEscaped;
    return this;
  }

  /**
   * Get argsEscaped
   * @return argsEscaped
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ARGS_ESCAPED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getArgsEscaped() {
    return argsEscaped;
  }


  @JsonProperty(JSON_PROPERTY_ARGS_ESCAPED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArgsEscaped(Boolean argsEscaped) {
    this.argsEscaped = argsEscaped;
  }


  public Config attachStderr(Boolean attachStderr) {
    this.attachStderr = attachStderr;
    return this;
  }

  /**
   * Get attachStderr
   * @return attachStderr
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACH_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachStderr() {
    return attachStderr;
  }


  @JsonProperty(JSON_PROPERTY_ATTACH_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachStderr(Boolean attachStderr) {
    this.attachStderr = attachStderr;
  }


  public Config attachStdin(Boolean attachStdin) {
    this.attachStdin = attachStdin;
    return this;
  }

  /**
   * Get attachStdin
   * @return attachStdin
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACH_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachStdin() {
    return attachStdin;
  }


  @JsonProperty(JSON_PROPERTY_ATTACH_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachStdin(Boolean attachStdin) {
    this.attachStdin = attachStdin;
  }


  public Config attachStdout(Boolean attachStdout) {
    this.attachStdout = attachStdout;
    return this;
  }

  /**
   * Get attachStdout
   * @return attachStdout
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACH_STDOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachStdout() {
    return attachStdout;
  }


  @JsonProperty(JSON_PROPERTY_ATTACH_STDOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachStdout(Boolean attachStdout) {
    this.attachStdout = attachStdout;
  }


  public Config cmd(List<String> cmd) {
    this.cmd = cmd;
    return this;
  }

  public Config addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

  /**
   * We need to override the json decoder to accept both options.
   * @return cmd
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCmd() {
    return cmd;
  }


  @JsonProperty(JSON_PROPERTY_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public Config domainname(String domainname) {
    this.domainname = domainname;
    return this;
  }

  /**
   * Get domainname
   * @return domainname
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DOMAINNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDomainname() {
    return domainname;
  }


  @JsonProperty(JSON_PROPERTY_DOMAINNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomainname(String domainname) {
    this.domainname = domainname;
  }


  public Config entrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
    return this;
  }

  public Config addEntrypointItem(String entrypointItem) {
    if (this.entrypoint == null) {
      this.entrypoint = new ArrayList<>();
    }
    this.entrypoint.add(entrypointItem);
    return this;
  }

  /**
   * We need to override the json decoder to accept both options.
   * @return entrypoint
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENTRYPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getEntrypoint() {
    return entrypoint;
  }


  @JsonProperty(JSON_PROPERTY_ENTRYPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
  }


  public Config env(List<String> env) {
    this.env = env;
    return this;
  }

  public Config addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * Get env
   * @return env
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getEnv() {
    return env;
  }


  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnv(List<String> env) {
    this.env = env;
  }


  public Config exposedPorts(Map<String, Object> exposedPorts) {
    this.exposedPorts = exposedPorts;
    return this;
  }

  public Config putExposedPortsItem(String key, Object exposedPortsItem) {
    if (this.exposedPorts == null) {
      this.exposedPorts = new HashMap<>();
    }
    this.exposedPorts.put(key, exposedPortsItem);
    return this;
  }

  /**
   * PortSet is a collection of structs indexed by Port
   * @return exposedPorts
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXPOSED_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, Object> getExposedPorts() {
    return exposedPorts;
  }


  @JsonProperty(JSON_PROPERTY_EXPOSED_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExposedPorts(Map<String, Object> exposedPorts) {
    this.exposedPorts = exposedPorts;
  }


  public Config healthcheck(HealthcheckConfig healthcheck) {
    this.healthcheck = healthcheck;
    return this;
  }

  /**
   * Get healthcheck
   * @return healthcheck
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_HEALTHCHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public HealthcheckConfig getHealthcheck() {
    return healthcheck;
  }


  @JsonProperty(JSON_PROPERTY_HEALTHCHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthcheck(HealthcheckConfig healthcheck) {
    this.healthcheck = healthcheck;
  }


  public Config hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHostname() {
    return hostname;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public Config image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public Config labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Config putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Config macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Mac Address of the container.  Deprecated: this field is deprecated since API v1.44. Use EndpointSettings.MacAddress instead.
   * @return macAddress
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MAC_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMacAddress() {
    return macAddress;
  }


  @JsonProperty(JSON_PROPERTY_MAC_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public Config networkDisabled(Boolean networkDisabled) {
    this.networkDisabled = networkDisabled;
    return this;
  }

  /**
   * Get networkDisabled
   * @return networkDisabled
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NETWORK_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getNetworkDisabled() {
    return networkDisabled;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_DISABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkDisabled(Boolean networkDisabled) {
    this.networkDisabled = networkDisabled;
  }


  public Config onBuild(List<String> onBuild) {
    this.onBuild = onBuild;
    return this;
  }

  public Config addOnBuildItem(String onBuildItem) {
    if (this.onBuild == null) {
      this.onBuild = new ArrayList<>();
    }
    this.onBuild.add(onBuildItem);
    return this;
  }

  /**
   * Get onBuild
   * @return onBuild
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ON_BUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getOnBuild() {
    return onBuild;
  }


  @JsonProperty(JSON_PROPERTY_ON_BUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnBuild(List<String> onBuild) {
    this.onBuild = onBuild;
  }


  public Config openStdin(Boolean openStdin) {
    this.openStdin = openStdin;
    return this;
  }

  /**
   * Get openStdin
   * @return openStdin
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OPEN_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getOpenStdin() {
    return openStdin;
  }


  @JsonProperty(JSON_PROPERTY_OPEN_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOpenStdin(Boolean openStdin) {
    this.openStdin = openStdin;
  }


  public Config shell(List<String> shell) {
    this.shell = shell;
    return this;
  }

  public Config addShellItem(String shellItem) {
    if (this.shell == null) {
      this.shell = new ArrayList<>();
    }
    this.shell.add(shellItem);
    return this;
  }

  /**
   * We need to override the json decoder to accept both options.
   * @return shell
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SHELL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getShell() {
    return shell;
  }


  @JsonProperty(JSON_PROPERTY_SHELL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShell(List<String> shell) {
    this.shell = shell;
  }


  public Config stdinOnce(Boolean stdinOnce) {
    this.stdinOnce = stdinOnce;
    return this;
  }

  /**
   * Get stdinOnce
   * @return stdinOnce
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STDIN_ONCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getStdinOnce() {
    return stdinOnce;
  }


  @JsonProperty(JSON_PROPERTY_STDIN_ONCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStdinOnce(Boolean stdinOnce) {
    this.stdinOnce = stdinOnce;
  }


  public Config stopSignal(String stopSignal) {
    this.stopSignal = stopSignal;
    return this;
  }

  /**
   * Get stopSignal
   * @return stopSignal
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STOP_SIGNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStopSignal() {
    return stopSignal;
  }


  @JsonProperty(JSON_PROPERTY_STOP_SIGNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStopSignal(String stopSignal) {
    this.stopSignal = stopSignal;
  }


  public Config stopTimeout(Long stopTimeout) {
    this.stopTimeout = stopTimeout;
    return this;
  }

  /**
   * Get stopTimeout
   * @return stopTimeout
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STOP_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getStopTimeout() {
    return stopTimeout;
  }


  @JsonProperty(JSON_PROPERTY_STOP_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStopTimeout(Long stopTimeout) {
    this.stopTimeout = stopTimeout;
  }


  public Config tty(Boolean tty) {
    this.tty = tty;
    return this;
  }

  /**
   * Get tty
   * @return tty
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTty() {
    return tty;
  }


  @JsonProperty(JSON_PROPERTY_TTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTty(Boolean tty) {
    this.tty = tty;
  }


  public Config user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public Config volumes(Map<String, Object> volumes) {
    this.volumes = volumes;
    return this;
  }

  public Config putVolumesItem(String key, Object volumesItem) {
    if (this.volumes == null) {
      this.volumes = new HashMap<>();
    }
    this.volumes.put(key, volumesItem);
    return this;
  }

  /**
   * Get volumes
   * @return volumes
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, Object> getVolumes() {
    return volumes;
  }


  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumes(Map<String, Object> volumes) {
    this.volumes = volumes;
  }


  public Config workingDir(String workingDir) {
    this.workingDir = workingDir;
    return this;
  }

  /**
   * Get workingDir
   * @return workingDir
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getWorkingDir() {
    return workingDir;
  }


  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkingDir(String workingDir) {
    this.workingDir = workingDir;
  }


  /**
   * Return true if this Config object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Config config = (Config) o;
    return Objects.equals(this.argsEscaped, config.argsEscaped) &&
        Objects.equals(this.attachStderr, config.attachStderr) &&
        Objects.equals(this.attachStdin, config.attachStdin) &&
        Objects.equals(this.attachStdout, config.attachStdout) &&
        Objects.equals(this.cmd, config.cmd) &&
        Objects.equals(this.domainname, config.domainname) &&
        Objects.equals(this.entrypoint, config.entrypoint) &&
        Objects.equals(this.env, config.env) &&
        Objects.equals(this.exposedPorts, config.exposedPorts) &&
        Objects.equals(this.healthcheck, config.healthcheck) &&
        Objects.equals(this.hostname, config.hostname) &&
        Objects.equals(this.image, config.image) &&
        Objects.equals(this.labels, config.labels) &&
        Objects.equals(this.macAddress, config.macAddress) &&
        Objects.equals(this.networkDisabled, config.networkDisabled) &&
        Objects.equals(this.onBuild, config.onBuild) &&
        Objects.equals(this.openStdin, config.openStdin) &&
        Objects.equals(this.shell, config.shell) &&
        Objects.equals(this.stdinOnce, config.stdinOnce) &&
        Objects.equals(this.stopSignal, config.stopSignal) &&
        Objects.equals(this.stopTimeout, config.stopTimeout) &&
        Objects.equals(this.tty, config.tty) &&
        Objects.equals(this.user, config.user) &&
        Objects.equals(this.volumes, config.volumes) &&
        Objects.equals(this.workingDir, config.workingDir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(argsEscaped, attachStderr, attachStdin, attachStdout, cmd, domainname, entrypoint, env, exposedPorts, healthcheck, hostname, image, labels, macAddress, networkDisabled, onBuild, openStdin, shell, stdinOnce, stopSignal, stopTimeout, tty, user, volumes, workingDir);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Config {\n");
    sb.append("    argsEscaped: ").append(toIndentedString(argsEscaped)).append("\n");
    sb.append("    attachStderr: ").append(toIndentedString(attachStderr)).append("\n");
    sb.append("    attachStdin: ").append(toIndentedString(attachStdin)).append("\n");
    sb.append("    attachStdout: ").append(toIndentedString(attachStdout)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    domainname: ").append(toIndentedString(domainname)).append("\n");
    sb.append("    entrypoint: ").append(toIndentedString(entrypoint)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    exposedPorts: ").append(toIndentedString(exposedPorts)).append("\n");
    sb.append("    healthcheck: ").append(toIndentedString(healthcheck)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    networkDisabled: ").append(toIndentedString(networkDisabled)).append("\n");
    sb.append("    onBuild: ").append(toIndentedString(onBuild)).append("\n");
    sb.append("    openStdin: ").append(toIndentedString(openStdin)).append("\n");
    sb.append("    shell: ").append(toIndentedString(shell)).append("\n");
    sb.append("    stdinOnce: ").append(toIndentedString(stdinOnce)).append("\n");
    sb.append("    stopSignal: ").append(toIndentedString(stopSignal)).append("\n");
    sb.append("    stopTimeout: ").append(toIndentedString(stopTimeout)).append("\n");
    sb.append("    tty: ").append(toIndentedString(tty)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    workingDir: ").append(toIndentedString(workingDir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ArgsEscaped` to the URL query string
    if (getArgsEscaped() != null) {
      joiner.add(String.format("%sArgsEscaped%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getArgsEscaped()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `AttachStderr` to the URL query string
    if (getAttachStderr() != null) {
      joiner.add(String.format("%sAttachStderr%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachStderr()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `AttachStdin` to the URL query string
    if (getAttachStdin() != null) {
      joiner.add(String.format("%sAttachStdin%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachStdin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `AttachStdout` to the URL query string
    if (getAttachStdout() != null) {
      joiner.add(String.format("%sAttachStdout%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachStdout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Cmd` to the URL query string
    if (getCmd() != null) {
      for (int i = 0; i < getCmd().size(); i++) {
        joiner.add(String.format("%sCmd%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCmd().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Domainname` to the URL query string
    if (getDomainname() != null) {
      joiner.add(String.format("%sDomainname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDomainname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Entrypoint` to the URL query string
    if (getEntrypoint() != null) {
      for (int i = 0; i < getEntrypoint().size(); i++) {
        joiner.add(String.format("%sEntrypoint%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getEntrypoint().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Env` to the URL query string
    if (getEnv() != null) {
      for (int i = 0; i < getEnv().size(); i++) {
        joiner.add(String.format("%sEnv%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getEnv().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `ExposedPorts` to the URL query string
    if (getExposedPorts() != null) {
      for (String _key : getExposedPorts().keySet()) {
        joiner.add(String.format("%sExposedPorts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getExposedPorts().get(_key), URLEncoder.encode(ApiClient.valueToString(getExposedPorts().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Healthcheck` to the URL query string
    if (getHealthcheck() != null) {
      joiner.add(getHealthcheck().toUrlQueryString(prefix + "Healthcheck" + suffix));
    }

    // add `Hostname` to the URL query string
    if (getHostname() != null) {
      joiner.add(String.format("%sHostname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHostname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Image` to the URL query string
    if (getImage() != null) {
      joiner.add(String.format("%sImage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `MacAddress` to the URL query string
    if (getMacAddress() != null) {
      joiner.add(String.format("%sMacAddress%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMacAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `NetworkDisabled` to the URL query string
    if (getNetworkDisabled() != null) {
      joiner.add(String.format("%sNetworkDisabled%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNetworkDisabled()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `OnBuild` to the URL query string
    if (getOnBuild() != null) {
      for (int i = 0; i < getOnBuild().size(); i++) {
        joiner.add(String.format("%sOnBuild%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getOnBuild().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `OpenStdin` to the URL query string
    if (getOpenStdin() != null) {
      joiner.add(String.format("%sOpenStdin%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOpenStdin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Shell` to the URL query string
    if (getShell() != null) {
      for (int i = 0; i < getShell().size(); i++) {
        joiner.add(String.format("%sShell%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getShell().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `StdinOnce` to the URL query string
    if (getStdinOnce() != null) {
      joiner.add(String.format("%sStdinOnce%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStdinOnce()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `StopSignal` to the URL query string
    if (getStopSignal() != null) {
      joiner.add(String.format("%sStopSignal%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStopSignal()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `StopTimeout` to the URL query string
    if (getStopTimeout() != null) {
      joiner.add(String.format("%sStopTimeout%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStopTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Tty` to the URL query string
    if (getTty() != null) {
      joiner.add(String.format("%sTty%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTty()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `User` to the URL query string
    if (getUser() != null) {
      joiner.add(String.format("%sUser%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Volumes` to the URL query string
    if (getVolumes() != null) {
      for (String _key : getVolumes().keySet()) {
        joiner.add(String.format("%sVolumes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getVolumes().get(_key), URLEncoder.encode(ApiClient.valueToString(getVolumes().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `WorkingDir` to the URL query string
    if (getWorkingDir() != null) {
      joiner.add(String.format("%sWorkingDir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWorkingDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

