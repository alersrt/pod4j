/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.alersrt.pod4j.openapi.ApiClient;
import jakarta.validation.Valid;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
/**
 * Container
 */
@JsonPropertyOrder({
  Container.JSON_PROPERTY_COMMAND,
  Container.JSON_PROPERTY_CONFIG,
  Container.JSON_PROPERTY_CREATED,
  Container.JSON_PROPERTY_DEFAULT_READ_ONLY_NON_RECURSIVE,
  Container.JSON_PROPERTY_HOST_CONFIG,
  Container.JSON_PROPERTY_ID,
  Container.JSON_PROPERTY_IMAGE,
  Container.JSON_PROPERTY_IMAGE_I_D,
  Container.JSON_PROPERTY_LABELS,
  Container.JSON_PROPERTY_MOUNTS,
  Container.JSON_PROPERTY_NAME,
  Container.JSON_PROPERTY_NAMES,
  Container.JSON_PROPERTY_NETWORK_SETTINGS,
  Container.JSON_PROPERTY_NETWORKING_CONFIG,
  Container.JSON_PROPERTY_PLATFORM,
  Container.JSON_PROPERTY_PORTS,
  Container.JSON_PROPERTY_SIZE_ROOT_FS,
  Container.JSON_PROPERTY_SIZE_RW,
  Container.JSON_PROPERTY_STATE,
  Container.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class Container {
  public static final String JSON_PROPERTY_COMMAND = "Command";
  private String command;

  public static final String JSON_PROPERTY_CONFIG = "Config";
  private Config config;

  public static final String JSON_PROPERTY_CREATED = "Created";
  private Long created;

  public static final String JSON_PROPERTY_DEFAULT_READ_ONLY_NON_RECURSIVE = "DefaultReadOnlyNonRecursive";
  private Boolean defaultReadOnlyNonRecursive;

  public static final String JSON_PROPERTY_HOST_CONFIG = "HostConfig";
  private HostConfig hostConfig;

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_IMAGE = "Image";
  private String image;

  public static final String JSON_PROPERTY_IMAGE_I_D = "ImageID";
  private String imageID;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_MOUNTS = "Mounts";
  private List<@Valid MountPoint> mounts = new ArrayList<>();

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_NAMES = "Names";
  private List<String> names = new ArrayList<>();

  public static final String JSON_PROPERTY_NETWORK_SETTINGS = "NetworkSettings";
  private SummaryNetworkSettings networkSettings;

  public static final String JSON_PROPERTY_NETWORKING_CONFIG = "NetworkingConfig";
  private NetworkingConfig networkingConfig;

  public static final String JSON_PROPERTY_PLATFORM = "Platform";
  private Platform platform;

  public static final String JSON_PROPERTY_PORTS = "Ports";
  private List<@Valid Port> ports = new ArrayList<>();

  public static final String JSON_PROPERTY_SIZE_ROOT_FS = "SizeRootFs";
  private Long sizeRootFs;

  public static final String JSON_PROPERTY_SIZE_RW = "SizeRw";
  private Long sizeRw;

  public static final String JSON_PROPERTY_STATE = "State";
  private String state;

  public static final String JSON_PROPERTY_STATUS = "Status";
  private String status;

  public Container() { 
  }

  public Container command(String command) {
    this.command = command;
    return this;
  }

  /**
   * Get command
   * @return command
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCommand() {
    return command;
  }


  @JsonProperty(JSON_PROPERTY_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommand(String command) {
    this.command = command;
  }


  public Container config(Config config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Config getConfig() {
    return config;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfig(Config config) {
    this.config = config;
  }


  public Container created(Long created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(Long created) {
    this.created = created;
  }


  public Container defaultReadOnlyNonRecursive(Boolean defaultReadOnlyNonRecursive) {
    this.defaultReadOnlyNonRecursive = defaultReadOnlyNonRecursive;
    return this;
  }

  /**
   * Get defaultReadOnlyNonRecursive
   * @return defaultReadOnlyNonRecursive
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DEFAULT_READ_ONLY_NON_RECURSIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDefaultReadOnlyNonRecursive() {
    return defaultReadOnlyNonRecursive;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_READ_ONLY_NON_RECURSIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultReadOnlyNonRecursive(Boolean defaultReadOnlyNonRecursive) {
    this.defaultReadOnlyNonRecursive = defaultReadOnlyNonRecursive;
  }


  public Container hostConfig(HostConfig hostConfig) {
    this.hostConfig = hostConfig;
    return this;
  }

  /**
   * Get hostConfig
   * @return hostConfig
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_HOST_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public HostConfig getHostConfig() {
    return hostConfig;
  }


  @JsonProperty(JSON_PROPERTY_HOST_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostConfig(HostConfig hostConfig) {
    this.hostConfig = hostConfig;
  }


  public Container id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public Container image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public Container imageID(String imageID) {
    this.imageID = imageID;
    return this;
  }

  /**
   * Get imageID
   * @return imageID
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageID() {
    return imageID;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageID(String imageID) {
    this.imageID = imageID;
  }


  public Container labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Container putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Container mounts(List<@Valid MountPoint> mounts) {
    this.mounts = mounts;
    return this;
  }

  public Container addMountsItem(MountPoint mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

  /**
   * Get mounts
   * @return mounts
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid MountPoint> getMounts() {
    return mounts;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMounts(List<@Valid MountPoint> mounts) {
    this.mounts = mounts;
  }


  public Container name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Container names(List<String> names) {
    this.names = names;
    return this;
  }

  public Container addNamesItem(String namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getNames() {
    return names;
  }


  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNames(List<String> names) {
    this.names = names;
  }


  public Container networkSettings(SummaryNetworkSettings networkSettings) {
    this.networkSettings = networkSettings;
    return this;
  }

  /**
   * Get networkSettings
   * @return networkSettings
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NETWORK_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SummaryNetworkSettings getNetworkSettings() {
    return networkSettings;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkSettings(SummaryNetworkSettings networkSettings) {
    this.networkSettings = networkSettings;
  }


  public Container networkingConfig(NetworkingConfig networkingConfig) {
    this.networkingConfig = networkingConfig;
    return this;
  }

  /**
   * Get networkingConfig
   * @return networkingConfig
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NETWORKING_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public NetworkingConfig getNetworkingConfig() {
    return networkingConfig;
  }


  @JsonProperty(JSON_PROPERTY_NETWORKING_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkingConfig(NetworkingConfig networkingConfig) {
    this.networkingConfig = networkingConfig;
  }


  public Container platform(Platform platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_PLATFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Platform getPlatform() {
    return platform;
  }


  @JsonProperty(JSON_PROPERTY_PLATFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlatform(Platform platform) {
    this.platform = platform;
  }


  public Container ports(List<@Valid Port> ports) {
    this.ports = ports;
    return this;
  }

  public Container addPortsItem(Port portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<>();
    }
    this.ports.add(portsItem);
    return this;
  }

  /**
   * Get ports
   * @return ports
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid Port> getPorts() {
    return ports;
  }


  @JsonProperty(JSON_PROPERTY_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPorts(List<@Valid Port> ports) {
    this.ports = ports;
  }


  public Container sizeRootFs(Long sizeRootFs) {
    this.sizeRootFs = sizeRootFs;
    return this;
  }

  /**
   * Get sizeRootFs
   * @return sizeRootFs
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SIZE_ROOT_FS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSizeRootFs() {
    return sizeRootFs;
  }


  @JsonProperty(JSON_PROPERTY_SIZE_ROOT_FS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSizeRootFs(Long sizeRootFs) {
    this.sizeRootFs = sizeRootFs;
  }


  public Container sizeRw(Long sizeRw) {
    this.sizeRw = sizeRw;
    return this;
  }

  /**
   * Get sizeRw
   * @return sizeRw
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SIZE_RW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSizeRw() {
    return sizeRw;
  }


  @JsonProperty(JSON_PROPERTY_SIZE_RW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSizeRw(Long sizeRw) {
    this.sizeRw = sizeRw;
  }


  public Container state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(String state) {
    this.state = state;
  }


  public Container status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }


  /**
   * Return true if this Container object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Container container = (Container) o;
    return Objects.equals(this.command, container.command) &&
        Objects.equals(this.config, container.config) &&
        Objects.equals(this.created, container.created) &&
        Objects.equals(this.defaultReadOnlyNonRecursive, container.defaultReadOnlyNonRecursive) &&
        Objects.equals(this.hostConfig, container.hostConfig) &&
        Objects.equals(this.id, container.id) &&
        Objects.equals(this.image, container.image) &&
        Objects.equals(this.imageID, container.imageID) &&
        Objects.equals(this.labels, container.labels) &&
        Objects.equals(this.mounts, container.mounts) &&
        Objects.equals(this.name, container.name) &&
        Objects.equals(this.names, container.names) &&
        Objects.equals(this.networkSettings, container.networkSettings) &&
        Objects.equals(this.networkingConfig, container.networkingConfig) &&
        Objects.equals(this.platform, container.platform) &&
        Objects.equals(this.ports, container.ports) &&
        Objects.equals(this.sizeRootFs, container.sizeRootFs) &&
        Objects.equals(this.sizeRw, container.sizeRw) &&
        Objects.equals(this.state, container.state) &&
        Objects.equals(this.status, container.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, config, created, defaultReadOnlyNonRecursive, hostConfig, id, image, imageID, labels, mounts, name, names, networkSettings, networkingConfig, platform, ports, sizeRootFs, sizeRw, state, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Container {\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    defaultReadOnlyNonRecursive: ").append(toIndentedString(defaultReadOnlyNonRecursive)).append("\n");
    sb.append("    hostConfig: ").append(toIndentedString(hostConfig)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageID: ").append(toIndentedString(imageID)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    networkSettings: ").append(toIndentedString(networkSettings)).append("\n");
    sb.append("    networkingConfig: ").append(toIndentedString(networkingConfig)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    sizeRootFs: ").append(toIndentedString(sizeRootFs)).append("\n");
    sb.append("    sizeRw: ").append(toIndentedString(sizeRw)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Command` to the URL query string
    if (getCommand() != null) {
      joiner.add(String.format("%sCommand%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCommand()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Config` to the URL query string
    if (getConfig() != null) {
      joiner.add(getConfig().toUrlQueryString(prefix + "Config" + suffix));
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `DefaultReadOnlyNonRecursive` to the URL query string
    if (getDefaultReadOnlyNonRecursive() != null) {
      joiner.add(String.format("%sDefaultReadOnlyNonRecursive%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDefaultReadOnlyNonRecursive()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `HostConfig` to the URL query string
    if (getHostConfig() != null) {
      joiner.add(getHostConfig().toUrlQueryString(prefix + "HostConfig" + suffix));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Image` to the URL query string
    if (getImage() != null) {
      joiner.add(String.format("%sImage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ImageID` to the URL query string
    if (getImageID() != null) {
      joiner.add(String.format("%sImageID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Mounts` to the URL query string
    if (getMounts() != null) {
      for (int i = 0; i < getMounts().size(); i++) {
        if (getMounts().get(i) != null) {
          joiner.add(getMounts().get(i).toUrlQueryString(String.format("%sMounts%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Names` to the URL query string
    if (getNames() != null) {
      for (int i = 0; i < getNames().size(); i++) {
        joiner.add(String.format("%sNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getNames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `NetworkSettings` to the URL query string
    if (getNetworkSettings() != null) {
      joiner.add(getNetworkSettings().toUrlQueryString(prefix + "NetworkSettings" + suffix));
    }

    // add `NetworkingConfig` to the URL query string
    if (getNetworkingConfig() != null) {
      joiner.add(getNetworkingConfig().toUrlQueryString(prefix + "NetworkingConfig" + suffix));
    }

    // add `Platform` to the URL query string
    if (getPlatform() != null) {
      joiner.add(getPlatform().toUrlQueryString(prefix + "Platform" + suffix));
    }

    // add `Ports` to the URL query string
    if (getPorts() != null) {
      for (int i = 0; i < getPorts().size(); i++) {
        if (getPorts().get(i) != null) {
          joiner.add(getPorts().get(i).toUrlQueryString(String.format("%sPorts%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `SizeRootFs` to the URL query string
    if (getSizeRootFs() != null) {
      joiner.add(String.format("%sSizeRootFs%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSizeRootFs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `SizeRw` to the URL query string
    if (getSizeRw() != null) {
      joiner.add(String.format("%sSizeRw%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSizeRw()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `State` to the URL query string
    if (getState() != null) {
      joiner.add(String.format("%sState%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getState()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sStatus%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

