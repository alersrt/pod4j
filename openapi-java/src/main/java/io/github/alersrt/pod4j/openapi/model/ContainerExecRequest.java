/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ContainerExecRequest
 */
@JsonPropertyOrder({
  ContainerExecRequest.JSON_PROPERTY_ATTACH_STDERR,
  ContainerExecRequest.JSON_PROPERTY_ATTACH_STDIN,
  ContainerExecRequest.JSON_PROPERTY_ATTACH_STDOUT,
  ContainerExecRequest.JSON_PROPERTY_CMD,
  ContainerExecRequest.JSON_PROPERTY_DETACH_KEYS,
  ContainerExecRequest.JSON_PROPERTY_ENV,
  ContainerExecRequest.JSON_PROPERTY_PRIVILEGED,
  ContainerExecRequest.JSON_PROPERTY_TTY,
  ContainerExecRequest.JSON_PROPERTY_USER,
  ContainerExecRequest.JSON_PROPERTY_WORKING_DIR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ContainerExecRequest {
  public static final String JSON_PROPERTY_ATTACH_STDERR = "AttachStderr";
  private Boolean attachStderr;

  public static final String JSON_PROPERTY_ATTACH_STDIN = "AttachStdin";
  private Boolean attachStdin;

  public static final String JSON_PROPERTY_ATTACH_STDOUT = "AttachStdout";
  private Boolean attachStdout;

  public static final String JSON_PROPERTY_CMD = "Cmd";
  private List<String> cmd = new ArrayList<>();

  public static final String JSON_PROPERTY_DETACH_KEYS = "DetachKeys";
  private String detachKeys;

  public static final String JSON_PROPERTY_ENV = "Env";
  private List<String> env = new ArrayList<>();

  public static final String JSON_PROPERTY_PRIVILEGED = "Privileged";
  private Boolean privileged = false;

  public static final String JSON_PROPERTY_TTY = "Tty";
  private Boolean tty;

  public static final String JSON_PROPERTY_USER = "User";
  private String user;

  public static final String JSON_PROPERTY_WORKING_DIR = "WorkingDir";
  private String workingDir;

  public ContainerExecRequest() { 
  }

  public ContainerExecRequest attachStderr(Boolean attachStderr) {
    this.attachStderr = attachStderr;
    return this;
  }

  /**
   * Attach to stderr of the exec command
   * @return attachStderr
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACH_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachStderr() {
    return attachStderr;
  }


  @JsonProperty(JSON_PROPERTY_ATTACH_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachStderr(Boolean attachStderr) {
    this.attachStderr = attachStderr;
  }


  public ContainerExecRequest attachStdin(Boolean attachStdin) {
    this.attachStdin = attachStdin;
    return this;
  }

  /**
   * Attach to stdin of the exec command
   * @return attachStdin
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACH_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachStdin() {
    return attachStdin;
  }


  @JsonProperty(JSON_PROPERTY_ATTACH_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachStdin(Boolean attachStdin) {
    this.attachStdin = attachStdin;
  }


  public ContainerExecRequest attachStdout(Boolean attachStdout) {
    this.attachStdout = attachStdout;
    return this;
  }

  /**
   * Attach to stdout of the exec command
   * @return attachStdout
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACH_STDOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachStdout() {
    return attachStdout;
  }


  @JsonProperty(JSON_PROPERTY_ATTACH_STDOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachStdout(Boolean attachStdout) {
    this.attachStdout = attachStdout;
  }


  public ContainerExecRequest cmd(List<String> cmd) {
    this.cmd = cmd;
    return this;
  }

  public ContainerExecRequest addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

  /**
   * Command to run, as a string or array of strings.
   * @return cmd
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCmd() {
    return cmd;
  }


  @JsonProperty(JSON_PROPERTY_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public ContainerExecRequest detachKeys(String detachKeys) {
    this.detachKeys = detachKeys;
    return this;
  }

  /**
   * \&quot;Override the key sequence for detaching a container. Format is a single character [a-Z] or ctrl-&lt;value&gt; where &lt;value&gt; is one of: a-z, @, ^, [, , or _.\&quot; 
   * @return detachKeys
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DETACH_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDetachKeys() {
    return detachKeys;
  }


  @JsonProperty(JSON_PROPERTY_DETACH_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDetachKeys(String detachKeys) {
    this.detachKeys = detachKeys;
  }


  public ContainerExecRequest env(List<String> env) {
    this.env = env;
    return this;
  }

  public ContainerExecRequest addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * A list of environment variables in the form [\&quot;VAR&#x3D;value\&quot;, ...]
   * @return env
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getEnv() {
    return env;
  }


  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnv(List<String> env) {
    this.env = env;
  }


  public ContainerExecRequest privileged(Boolean privileged) {
    this.privileged = privileged;
    return this;
  }

  /**
   * Runs the exec process with extended privileges
   * @return privileged
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PRIVILEGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getPrivileged() {
    return privileged;
  }


  @JsonProperty(JSON_PROPERTY_PRIVILEGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrivileged(Boolean privileged) {
    this.privileged = privileged;
  }


  public ContainerExecRequest tty(Boolean tty) {
    this.tty = tty;
    return this;
  }

  /**
   * Allocate a pseudo-TTY
   * @return tty
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTty() {
    return tty;
  }


  @JsonProperty(JSON_PROPERTY_TTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTty(Boolean tty) {
    this.tty = tty;
  }


  public ContainerExecRequest user(String user) {
    this.user = user;
    return this;
  }

  /**
   * \&quot;The user, and optionally, group to run the exec process inside the container. Format is one of: user, user:group, uid, or uid:gid.\&quot; 
   * @return user
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public ContainerExecRequest workingDir(String workingDir) {
    this.workingDir = workingDir;
    return this;
  }

  /**
   * The working directory for the exec process inside the container.
   * @return workingDir
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getWorkingDir() {
    return workingDir;
  }


  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkingDir(String workingDir) {
    this.workingDir = workingDir;
  }


  /**
   * Return true if this ContainerExec_request object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerExecRequest containerExecRequest = (ContainerExecRequest) o;
    return Objects.equals(this.attachStderr, containerExecRequest.attachStderr) &&
        Objects.equals(this.attachStdin, containerExecRequest.attachStdin) &&
        Objects.equals(this.attachStdout, containerExecRequest.attachStdout) &&
        Objects.equals(this.cmd, containerExecRequest.cmd) &&
        Objects.equals(this.detachKeys, containerExecRequest.detachKeys) &&
        Objects.equals(this.env, containerExecRequest.env) &&
        Objects.equals(this.privileged, containerExecRequest.privileged) &&
        Objects.equals(this.tty, containerExecRequest.tty) &&
        Objects.equals(this.user, containerExecRequest.user) &&
        Objects.equals(this.workingDir, containerExecRequest.workingDir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachStderr, attachStdin, attachStdout, cmd, detachKeys, env, privileged, tty, user, workingDir);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerExecRequest {\n");
    sb.append("    attachStderr: ").append(toIndentedString(attachStderr)).append("\n");
    sb.append("    attachStdin: ").append(toIndentedString(attachStdin)).append("\n");
    sb.append("    attachStdout: ").append(toIndentedString(attachStdout)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    detachKeys: ").append(toIndentedString(detachKeys)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    privileged: ").append(toIndentedString(privileged)).append("\n");
    sb.append("    tty: ").append(toIndentedString(tty)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workingDir: ").append(toIndentedString(workingDir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `AttachStderr` to the URL query string
    if (getAttachStderr() != null) {
      joiner.add(String.format("%sAttachStderr%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachStderr()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `AttachStdin` to the URL query string
    if (getAttachStdin() != null) {
      joiner.add(String.format("%sAttachStdin%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachStdin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `AttachStdout` to the URL query string
    if (getAttachStdout() != null) {
      joiner.add(String.format("%sAttachStdout%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachStdout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Cmd` to the URL query string
    if (getCmd() != null) {
      for (int i = 0; i < getCmd().size(); i++) {
        joiner.add(String.format("%sCmd%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCmd().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `DetachKeys` to the URL query string
    if (getDetachKeys() != null) {
      joiner.add(String.format("%sDetachKeys%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDetachKeys()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Env` to the URL query string
    if (getEnv() != null) {
      for (int i = 0; i < getEnv().size(); i++) {
        joiner.add(String.format("%sEnv%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getEnv().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Privileged` to the URL query string
    if (getPrivileged() != null) {
      joiner.add(String.format("%sPrivileged%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPrivileged()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Tty` to the URL query string
    if (getTty() != null) {
      joiner.add(String.format("%sTty%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTty()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `User` to the URL query string
    if (getUser() != null) {
      joiner.add(String.format("%sUser%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `WorkingDir` to the URL query string
    if (getWorkingDir() != null) {
      joiner.add(String.format("%sWorkingDir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWorkingDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

