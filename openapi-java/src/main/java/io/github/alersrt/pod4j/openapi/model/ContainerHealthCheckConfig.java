/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.Schema2HealthConfig;
import io.github.alersrt.pod4j.openapi.model.StartupHealthCheck;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ContainerHealthCheckConfig describes a container healthcheck with attributes like command, retries, interval, start period, and timeout.
 */
@JsonPropertyOrder({
  ContainerHealthCheckConfig.JSON_PROPERTY_HEALTH_CHECK_ON_FAILURE_ACTION,
  ContainerHealthCheckConfig.JSON_PROPERTY_HEALTH_LOG_DESTINATION,
  ContainerHealthCheckConfig.JSON_PROPERTY_HEALTH_MAX_LOG_COUNT,
  ContainerHealthCheckConfig.JSON_PROPERTY_HEALTH_MAX_LOG_SIZE,
  ContainerHealthCheckConfig.JSON_PROPERTY_HEALTHCONFIG,
  ContainerHealthCheckConfig.JSON_PROPERTY_STARTUP_HEALTH_CONFIG
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ContainerHealthCheckConfig {
  public static final String JSON_PROPERTY_HEALTH_CHECK_ON_FAILURE_ACTION = "health_check_on_failure_action";
  private Long healthCheckOnFailureAction;

  public static final String JSON_PROPERTY_HEALTH_LOG_DESTINATION = "healthLogDestination";
  private String healthLogDestination;

  public static final String JSON_PROPERTY_HEALTH_MAX_LOG_COUNT = "healthMaxLogCount";
  private Integer healthMaxLogCount;

  public static final String JSON_PROPERTY_HEALTH_MAX_LOG_SIZE = "healthMaxLogSize";
  private Integer healthMaxLogSize;

  public static final String JSON_PROPERTY_HEALTHCONFIG = "healthconfig";
  private Schema2HealthConfig healthconfig;

  public static final String JSON_PROPERTY_STARTUP_HEALTH_CONFIG = "startupHealthConfig";
  private StartupHealthCheck startupHealthConfig;

  public ContainerHealthCheckConfig() { 
  }

  public ContainerHealthCheckConfig healthCheckOnFailureAction(Long healthCheckOnFailureAction) {
    this.healthCheckOnFailureAction = healthCheckOnFailureAction;
    return this;
  }

  /**
   * HealthCheckOnFailureAction defines how Podman reacts when a container&#39;s health status turns unhealthy.
   * @return healthCheckOnFailureAction
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HEALTH_CHECK_ON_FAILURE_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getHealthCheckOnFailureAction() {
    return healthCheckOnFailureAction;
  }


  @JsonProperty(JSON_PROPERTY_HEALTH_CHECK_ON_FAILURE_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthCheckOnFailureAction(Long healthCheckOnFailureAction) {
    this.healthCheckOnFailureAction = healthCheckOnFailureAction;
  }


  public ContainerHealthCheckConfig healthLogDestination(String healthLogDestination) {
    this.healthLogDestination = healthLogDestination;
    return this;
  }

  /**
   * HealthLogDestination defines the destination where the log is stored
   * @return healthLogDestination
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HEALTH_LOG_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHealthLogDestination() {
    return healthLogDestination;
  }


  @JsonProperty(JSON_PROPERTY_HEALTH_LOG_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthLogDestination(String healthLogDestination) {
    this.healthLogDestination = healthLogDestination;
  }


  public ContainerHealthCheckConfig healthMaxLogCount(Integer healthMaxLogCount) {
    this.healthMaxLogCount = healthMaxLogCount;
    return this;
  }

  /**
   * HealthMaxLogCount is maximum number of attempts in the HealthCheck log file. (&#39;0&#39; value means an infinite number of attempts in the log file)
   * @return healthMaxLogCount
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HEALTH_MAX_LOG_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getHealthMaxLogCount() {
    return healthMaxLogCount;
  }


  @JsonProperty(JSON_PROPERTY_HEALTH_MAX_LOG_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthMaxLogCount(Integer healthMaxLogCount) {
    this.healthMaxLogCount = healthMaxLogCount;
  }


  public ContainerHealthCheckConfig healthMaxLogSize(Integer healthMaxLogSize) {
    this.healthMaxLogSize = healthMaxLogSize;
    return this;
  }

  /**
   * HealthMaxLogSize is the maximum length in characters of stored HealthCheck log (\&quot;0\&quot; value means an infinite log length)
   * @return healthMaxLogSize
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HEALTH_MAX_LOG_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getHealthMaxLogSize() {
    return healthMaxLogSize;
  }


  @JsonProperty(JSON_PROPERTY_HEALTH_MAX_LOG_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthMaxLogSize(Integer healthMaxLogSize) {
    this.healthMaxLogSize = healthMaxLogSize;
  }


  public ContainerHealthCheckConfig healthconfig(Schema2HealthConfig healthconfig) {
    this.healthconfig = healthconfig;
    return this;
  }

  /**
   * Get healthconfig
   * @return healthconfig
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_HEALTHCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Schema2HealthConfig getHealthconfig() {
    return healthconfig;
  }


  @JsonProperty(JSON_PROPERTY_HEALTHCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthconfig(Schema2HealthConfig healthconfig) {
    this.healthconfig = healthconfig;
  }


  public ContainerHealthCheckConfig startupHealthConfig(StartupHealthCheck startupHealthConfig) {
    this.startupHealthConfig = startupHealthConfig;
    return this;
  }

  /**
   * Get startupHealthConfig
   * @return startupHealthConfig
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_STARTUP_HEALTH_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public StartupHealthCheck getStartupHealthConfig() {
    return startupHealthConfig;
  }


  @JsonProperty(JSON_PROPERTY_STARTUP_HEALTH_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartupHealthConfig(StartupHealthCheck startupHealthConfig) {
    this.startupHealthConfig = startupHealthConfig;
  }


  /**
   * Return true if this ContainerHealthCheckConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerHealthCheckConfig containerHealthCheckConfig = (ContainerHealthCheckConfig) o;
    return Objects.equals(this.healthCheckOnFailureAction, containerHealthCheckConfig.healthCheckOnFailureAction) &&
        Objects.equals(this.healthLogDestination, containerHealthCheckConfig.healthLogDestination) &&
        Objects.equals(this.healthMaxLogCount, containerHealthCheckConfig.healthMaxLogCount) &&
        Objects.equals(this.healthMaxLogSize, containerHealthCheckConfig.healthMaxLogSize) &&
        Objects.equals(this.healthconfig, containerHealthCheckConfig.healthconfig) &&
        Objects.equals(this.startupHealthConfig, containerHealthCheckConfig.startupHealthConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthCheckOnFailureAction, healthLogDestination, healthMaxLogCount, healthMaxLogSize, healthconfig, startupHealthConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerHealthCheckConfig {\n");
    sb.append("    healthCheckOnFailureAction: ").append(toIndentedString(healthCheckOnFailureAction)).append("\n");
    sb.append("    healthLogDestination: ").append(toIndentedString(healthLogDestination)).append("\n");
    sb.append("    healthMaxLogCount: ").append(toIndentedString(healthMaxLogCount)).append("\n");
    sb.append("    healthMaxLogSize: ").append(toIndentedString(healthMaxLogSize)).append("\n");
    sb.append("    healthconfig: ").append(toIndentedString(healthconfig)).append("\n");
    sb.append("    startupHealthConfig: ").append(toIndentedString(startupHealthConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `health_check_on_failure_action` to the URL query string
    if (getHealthCheckOnFailureAction() != null) {
      joiner.add(String.format("%shealth_check_on_failure_action%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHealthCheckOnFailureAction()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `healthLogDestination` to the URL query string
    if (getHealthLogDestination() != null) {
      joiner.add(String.format("%shealthLogDestination%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHealthLogDestination()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `healthMaxLogCount` to the URL query string
    if (getHealthMaxLogCount() != null) {
      joiner.add(String.format("%shealthMaxLogCount%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHealthMaxLogCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `healthMaxLogSize` to the URL query string
    if (getHealthMaxLogSize() != null) {
      joiner.add(String.format("%shealthMaxLogSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHealthMaxLogSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `healthconfig` to the URL query string
    if (getHealthconfig() != null) {
      joiner.add(getHealthconfig().toUrlQueryString(prefix + "healthconfig" + suffix));
    }

    // add `startupHealthConfig` to the URL query string
    if (getStartupHealthConfig() != null) {
      joiner.add(getStartupHealthConfig().toUrlQueryString(prefix + "startupHealthConfig" + suffix));
    }

    return joiner.toString();
  }
}

