/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.alersrt.pod4j.openapi.ApiClient;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
/**
 * Deprecated: ContainerNode was used for the classic Docker Swarm standalone API. It will be removed in the next release.
 */
@JsonPropertyOrder({
  ContainerNode.JSON_PROPERTY_ADDR,
  ContainerNode.JSON_PROPERTY_CPUS,
  ContainerNode.JSON_PROPERTY_I_D,
  ContainerNode.JSON_PROPERTY_I_P,
  ContainerNode.JSON_PROPERTY_LABELS,
  ContainerNode.JSON_PROPERTY_MEMORY,
  ContainerNode.JSON_PROPERTY_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ContainerNode {
  public static final String JSON_PROPERTY_ADDR = "Addr";
  private String addr;

  public static final String JSON_PROPERTY_CPUS = "Cpus";
  private Long cpus;

  public static final String JSON_PROPERTY_I_D = "ID";
  private String ID;

  public static final String JSON_PROPERTY_I_P = "IP";
  private String IP;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_MEMORY = "Memory";
  private Long memory;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public ContainerNode() { 
  }

  public ContainerNode addr(String addr) {
    this.addr = addr;
    return this;
  }

  /**
   * Get addr
   * @return addr
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAddr() {
    return addr;
  }


  @JsonProperty(JSON_PROPERTY_ADDR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddr(String addr) {
    this.addr = addr;
  }


  public ContainerNode cpus(Long cpus) {
    this.cpus = cpus;
    return this;
  }

  /**
   * Get cpus
   * @return cpus
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CPUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getCpus() {
    return cpus;
  }


  @JsonProperty(JSON_PROPERTY_CPUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpus(Long cpus) {
    this.cpus = cpus;
  }


  public ContainerNode ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Get ID
   * @return ID
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getID() {
    return ID;
  }


  @JsonProperty(JSON_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setID(String ID) {
    this.ID = ID;
  }


  public ContainerNode IP(String IP) {
    this.IP = IP;
    return this;
  }

  /**
   * Get IP
   * @return IP
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_I_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getIP() {
    return IP;
  }


  @JsonProperty(JSON_PROPERTY_I_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIP(String IP) {
    this.IP = IP;
  }


  public ContainerNode labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ContainerNode putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ContainerNode memory(Long memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEMORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getMemory() {
    return memory;
  }


  @JsonProperty(JSON_PROPERTY_MEMORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemory(Long memory) {
    this.memory = memory;
  }


  public ContainerNode name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  /**
   * Return true if this ContainerNode object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerNode containerNode = (ContainerNode) o;
    return Objects.equals(this.addr, containerNode.addr) &&
        Objects.equals(this.cpus, containerNode.cpus) &&
        Objects.equals(this.ID, containerNode.ID) &&
        Objects.equals(this.IP, containerNode.IP) &&
        Objects.equals(this.labels, containerNode.labels) &&
        Objects.equals(this.memory, containerNode.memory) &&
        Objects.equals(this.name, containerNode.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addr, cpus, ID, IP, labels, memory, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerNode {\n");
    sb.append("    addr: ").append(toIndentedString(addr)).append("\n");
    sb.append("    cpus: ").append(toIndentedString(cpus)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    IP: ").append(toIndentedString(IP)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Addr` to the URL query string
    if (getAddr() != null) {
      joiner.add(String.format("%sAddr%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAddr()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Cpus` to the URL query string
    if (getCpus() != null) {
      joiner.add(String.format("%sCpus%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ID` to the URL query string
    if (getID() != null) {
      joiner.add(String.format("%sID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `IP` to the URL query string
    if (getIP() != null) {
      joiner.add(String.format("%sIP%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIP()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Memory` to the URL query string
    if (getMemory() != null) {
      joiner.add(String.format("%sMemory%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMemory()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

