/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ContainerNetworkStats;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ContainerStats contains the statistics information for a running container
 */
@JsonPropertyOrder({
  ContainerStats.JSON_PROPERTY_AVG_C_P_U,
  ContainerStats.JSON_PROPERTY_BLOCK_INPUT,
  ContainerStats.JSON_PROPERTY_BLOCK_OUTPUT,
  ContainerStats.JSON_PROPERTY_C_P_U,
  ContainerStats.JSON_PROPERTY_CP_U_NANO,
  ContainerStats.JSON_PROPERTY_CP_U_SYSTEM_NANO,
  ContainerStats.JSON_PROPERTY_CONTAINER_I_D,
  ContainerStats.JSON_PROPERTY_DURATION,
  ContainerStats.JSON_PROPERTY_MEM_LIMIT,
  ContainerStats.JSON_PROPERTY_MEM_PERC,
  ContainerStats.JSON_PROPERTY_MEM_USAGE,
  ContainerStats.JSON_PROPERTY_NAME,
  ContainerStats.JSON_PROPERTY_NETWORK,
  ContainerStats.JSON_PROPERTY_PI_DS,
  ContainerStats.JSON_PROPERTY_PER_C_P_U,
  ContainerStats.JSON_PROPERTY_SYSTEM_NANO,
  ContainerStats.JSON_PROPERTY_UP_TIME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ContainerStats {
  public static final String JSON_PROPERTY_AVG_C_P_U = "AvgCPU";
  private Double avgCPU;

  public static final String JSON_PROPERTY_BLOCK_INPUT = "BlockInput";
  private Integer blockInput;

  public static final String JSON_PROPERTY_BLOCK_OUTPUT = "BlockOutput";
  private Integer blockOutput;

  public static final String JSON_PROPERTY_C_P_U = "CPU";
  private Double CPU;

  public static final String JSON_PROPERTY_CP_U_NANO = "CPUNano";
  private Integer cpUNano;

  public static final String JSON_PROPERTY_CP_U_SYSTEM_NANO = "CPUSystemNano";
  private Integer cpUSystemNano;

  public static final String JSON_PROPERTY_CONTAINER_I_D = "ContainerID";
  private String containerID;

  public static final String JSON_PROPERTY_DURATION = "Duration";
  private Integer duration;

  public static final String JSON_PROPERTY_MEM_LIMIT = "MemLimit";
  private Integer memLimit;

  public static final String JSON_PROPERTY_MEM_PERC = "MemPerc";
  private Double memPerc;

  public static final String JSON_PROPERTY_MEM_USAGE = "MemUsage";
  private Integer memUsage;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_NETWORK = "Network";
  private Map<String, ContainerNetworkStats> network = new HashMap<>();

  public static final String JSON_PROPERTY_PI_DS = "PIDs";
  private Integer piDs;

  public static final String JSON_PROPERTY_PER_C_P_U = "PerCPU";
  private List<Integer> perCPU = new ArrayList<>();

  public static final String JSON_PROPERTY_SYSTEM_NANO = "SystemNano";
  private Integer systemNano;

  public static final String JSON_PROPERTY_UP_TIME = "UpTime";
  private Long upTime;

  public ContainerStats() { 
  }

  public ContainerStats avgCPU(Double avgCPU) {
    this.avgCPU = avgCPU;
    return this;
  }

  /**
   * Get avgCPU
   * @return avgCPU
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_AVG_C_P_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getAvgCPU() {
    return avgCPU;
  }


  @JsonProperty(JSON_PROPERTY_AVG_C_P_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvgCPU(Double avgCPU) {
    this.avgCPU = avgCPU;
  }


  public ContainerStats blockInput(Integer blockInput) {
    this.blockInput = blockInput;
    return this;
  }

  /**
   * Get blockInput
   * @return blockInput
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_BLOCK_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getBlockInput() {
    return blockInput;
  }


  @JsonProperty(JSON_PROPERTY_BLOCK_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlockInput(Integer blockInput) {
    this.blockInput = blockInput;
  }


  public ContainerStats blockOutput(Integer blockOutput) {
    this.blockOutput = blockOutput;
    return this;
  }

  /**
   * Get blockOutput
   * @return blockOutput
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_BLOCK_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getBlockOutput() {
    return blockOutput;
  }


  @JsonProperty(JSON_PROPERTY_BLOCK_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlockOutput(Integer blockOutput) {
    this.blockOutput = blockOutput;
  }


  public ContainerStats CPU(Double CPU) {
    this.CPU = CPU;
    return this;
  }

  /**
   * Get CPU
   * @return CPU
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_C_P_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getCPU() {
    return CPU;
  }


  @JsonProperty(JSON_PROPERTY_C_P_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCPU(Double CPU) {
    this.CPU = CPU;
  }


  public ContainerStats cpUNano(Integer cpUNano) {
    this.cpUNano = cpUNano;
    return this;
  }

  /**
   * Get cpUNano
   * @return cpUNano
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CP_U_NANO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCpUNano() {
    return cpUNano;
  }


  @JsonProperty(JSON_PROPERTY_CP_U_NANO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpUNano(Integer cpUNano) {
    this.cpUNano = cpUNano;
  }


  public ContainerStats cpUSystemNano(Integer cpUSystemNano) {
    this.cpUSystemNano = cpUSystemNano;
    return this;
  }

  /**
   * Get cpUSystemNano
   * @return cpUSystemNano
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CP_U_SYSTEM_NANO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCpUSystemNano() {
    return cpUSystemNano;
  }


  @JsonProperty(JSON_PROPERTY_CP_U_SYSTEM_NANO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpUSystemNano(Integer cpUSystemNano) {
    this.cpUSystemNano = cpUSystemNano;
  }


  public ContainerStats containerID(String containerID) {
    this.containerID = containerID;
    return this;
  }

  /**
   * Get containerID
   * @return containerID
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONTAINER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContainerID() {
    return containerID;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainerID(String containerID) {
    this.containerID = containerID;
  }


  public ContainerStats duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getDuration() {
    return duration;
  }


  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public ContainerStats memLimit(Integer memLimit) {
    this.memLimit = memLimit;
    return this;
  }

  /**
   * Get memLimit
   * @return memLimit
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEM_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMemLimit() {
    return memLimit;
  }


  @JsonProperty(JSON_PROPERTY_MEM_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemLimit(Integer memLimit) {
    this.memLimit = memLimit;
  }


  public ContainerStats memPerc(Double memPerc) {
    this.memPerc = memPerc;
    return this;
  }

  /**
   * Get memPerc
   * @return memPerc
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEM_PERC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getMemPerc() {
    return memPerc;
  }


  @JsonProperty(JSON_PROPERTY_MEM_PERC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemPerc(Double memPerc) {
    this.memPerc = memPerc;
  }


  public ContainerStats memUsage(Integer memUsage) {
    this.memUsage = memUsage;
    return this;
  }

  /**
   * Get memUsage
   * @return memUsage
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEM_USAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMemUsage() {
    return memUsage;
  }


  @JsonProperty(JSON_PROPERTY_MEM_USAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemUsage(Integer memUsage) {
    this.memUsage = memUsage;
  }


  public ContainerStats name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ContainerStats network(Map<String, ContainerNetworkStats> network) {
    this.network = network;
    return this;
  }

  public ContainerStats putNetworkItem(String key, ContainerNetworkStats networkItem) {
    if (this.network == null) {
      this.network = new HashMap<>();
    }
    this.network.put(key, networkItem);
    return this;
  }

  /**
   * Map of interface name to network statistics for that interface.
   * @return network
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, ContainerNetworkStats> getNetwork() {
    return network;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetwork(Map<String, ContainerNetworkStats> network) {
    this.network = network;
  }


  public ContainerStats piDs(Integer piDs) {
    this.piDs = piDs;
    return this;
  }

  /**
   * Get piDs
   * @return piDs
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PI_DS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getPiDs() {
    return piDs;
  }


  @JsonProperty(JSON_PROPERTY_PI_DS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPiDs(Integer piDs) {
    this.piDs = piDs;
  }


  public ContainerStats perCPU(List<Integer> perCPU) {
    this.perCPU = perCPU;
    return this;
  }

  public ContainerStats addPerCPUItem(Integer perCPUItem) {
    if (this.perCPU == null) {
      this.perCPU = new ArrayList<>();
    }
    this.perCPU.add(perCPUItem);
    return this;
  }

  /**
   * Get perCPU
   * @return perCPU
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PER_C_P_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Integer> getPerCPU() {
    return perCPU;
  }


  @JsonProperty(JSON_PROPERTY_PER_C_P_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPerCPU(List<Integer> perCPU) {
    this.perCPU = perCPU;
  }


  public ContainerStats systemNano(Integer systemNano) {
    this.systemNano = systemNano;
    return this;
  }

  /**
   * Get systemNano
   * @return systemNano
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SYSTEM_NANO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getSystemNano() {
    return systemNano;
  }


  @JsonProperty(JSON_PROPERTY_SYSTEM_NANO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystemNano(Integer systemNano) {
    this.systemNano = systemNano;
  }


  public ContainerStats upTime(Long upTime) {
    this.upTime = upTime;
    return this;
  }

  /**
   * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
   * @return upTime
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_UP_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getUpTime() {
    return upTime;
  }


  @JsonProperty(JSON_PROPERTY_UP_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpTime(Long upTime) {
    this.upTime = upTime;
  }


  /**
   * Return true if this ContainerStats object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerStats containerStats = (ContainerStats) o;
    return Objects.equals(this.avgCPU, containerStats.avgCPU) &&
        Objects.equals(this.blockInput, containerStats.blockInput) &&
        Objects.equals(this.blockOutput, containerStats.blockOutput) &&
        Objects.equals(this.CPU, containerStats.CPU) &&
        Objects.equals(this.cpUNano, containerStats.cpUNano) &&
        Objects.equals(this.cpUSystemNano, containerStats.cpUSystemNano) &&
        Objects.equals(this.containerID, containerStats.containerID) &&
        Objects.equals(this.duration, containerStats.duration) &&
        Objects.equals(this.memLimit, containerStats.memLimit) &&
        Objects.equals(this.memPerc, containerStats.memPerc) &&
        Objects.equals(this.memUsage, containerStats.memUsage) &&
        Objects.equals(this.name, containerStats.name) &&
        Objects.equals(this.network, containerStats.network) &&
        Objects.equals(this.piDs, containerStats.piDs) &&
        Objects.equals(this.perCPU, containerStats.perCPU) &&
        Objects.equals(this.systemNano, containerStats.systemNano) &&
        Objects.equals(this.upTime, containerStats.upTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgCPU, blockInput, blockOutput, CPU, cpUNano, cpUSystemNano, containerID, duration, memLimit, memPerc, memUsage, name, network, piDs, perCPU, systemNano, upTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerStats {\n");
    sb.append("    avgCPU: ").append(toIndentedString(avgCPU)).append("\n");
    sb.append("    blockInput: ").append(toIndentedString(blockInput)).append("\n");
    sb.append("    blockOutput: ").append(toIndentedString(blockOutput)).append("\n");
    sb.append("    CPU: ").append(toIndentedString(CPU)).append("\n");
    sb.append("    cpUNano: ").append(toIndentedString(cpUNano)).append("\n");
    sb.append("    cpUSystemNano: ").append(toIndentedString(cpUSystemNano)).append("\n");
    sb.append("    containerID: ").append(toIndentedString(containerID)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    memLimit: ").append(toIndentedString(memLimit)).append("\n");
    sb.append("    memPerc: ").append(toIndentedString(memPerc)).append("\n");
    sb.append("    memUsage: ").append(toIndentedString(memUsage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    piDs: ").append(toIndentedString(piDs)).append("\n");
    sb.append("    perCPU: ").append(toIndentedString(perCPU)).append("\n");
    sb.append("    systemNano: ").append(toIndentedString(systemNano)).append("\n");
    sb.append("    upTime: ").append(toIndentedString(upTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `AvgCPU` to the URL query string
    if (getAvgCPU() != null) {
      joiner.add(String.format("%sAvgCPU%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAvgCPU()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `BlockInput` to the URL query string
    if (getBlockInput() != null) {
      joiner.add(String.format("%sBlockInput%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBlockInput()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `BlockOutput` to the URL query string
    if (getBlockOutput() != null) {
      joiner.add(String.format("%sBlockOutput%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBlockOutput()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `CPU` to the URL query string
    if (getCPU() != null) {
      joiner.add(String.format("%sCPU%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCPU()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `CPUNano` to the URL query string
    if (getCpUNano() != null) {
      joiner.add(String.format("%sCPUNano%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpUNano()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `CPUSystemNano` to the URL query string
    if (getCpUSystemNano() != null) {
      joiner.add(String.format("%sCPUSystemNano%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpUSystemNano()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ContainerID` to the URL query string
    if (getContainerID() != null) {
      joiner.add(String.format("%sContainerID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getContainerID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Duration` to the URL query string
    if (getDuration() != null) {
      joiner.add(String.format("%sDuration%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDuration()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `MemLimit` to the URL query string
    if (getMemLimit() != null) {
      joiner.add(String.format("%sMemLimit%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMemLimit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `MemPerc` to the URL query string
    if (getMemPerc() != null) {
      joiner.add(String.format("%sMemPerc%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMemPerc()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `MemUsage` to the URL query string
    if (getMemUsage() != null) {
      joiner.add(String.format("%sMemUsage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMemUsage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Network` to the URL query string
    if (getNetwork() != null) {
      for (String _key : getNetwork().keySet()) {
        if (getNetwork().get(_key) != null) {
          joiner.add(getNetwork().get(_key).toUrlQueryString(String.format("%sNetwork%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `PIDs` to the URL query string
    if (getPiDs() != null) {
      joiner.add(String.format("%sPIDs%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPiDs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `PerCPU` to the URL query string
    if (getPerCPU() != null) {
      for (int i = 0; i < getPerCPU().size(); i++) {
        joiner.add(String.format("%sPerCPU%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getPerCPU().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `SystemNano` to the URL query string
    if (getSystemNano() != null) {
      joiner.add(String.format("%sSystemNano%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSystemNano()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `UpTime` to the URL query string
    if (getUpTime() != null) {
      joiner.add(String.format("%sUpTime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUpTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

