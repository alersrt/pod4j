/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ImageVolume;
import io.github.alersrt.pod4j.openapi.model.LinuxDevice;
import io.github.alersrt.pod4j.openapi.model.LinuxDeviceCgroup;
import io.github.alersrt.pod4j.openapi.model.Mount;
import io.github.alersrt.pod4j.openapi.model.NamedVolume;
import io.github.alersrt.pod4j.openapi.model.Namespace;
import io.github.alersrt.pod4j.openapi.model.OverlayVolume;
import io.github.alersrt.pod4j.openapi.model.Secret;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ContainerStorageConfig contains information on the storage configuration of a container.
 */
@JsonPropertyOrder({
  ContainerStorageConfig.JSON_PROPERTY_CHROOT_DIRECTORIES,
  ContainerStorageConfig.JSON_PROPERTY_CREATE_WORKING_DIR,
  ContainerStorageConfig.JSON_PROPERTY_DEVICE_CGROUP_RULE,
  ContainerStorageConfig.JSON_PROPERTY_DEVICES,
  ContainerStorageConfig.JSON_PROPERTY_DEVICES_FROM,
  ContainerStorageConfig.JSON_PROPERTY_HOST_DEVICE_LIST,
  ContainerStorageConfig.JSON_PROPERTY_IMAGE,
  ContainerStorageConfig.JSON_PROPERTY_IMAGE_ARCH,
  ContainerStorageConfig.JSON_PROPERTY_IMAGE_OS,
  ContainerStorageConfig.JSON_PROPERTY_IMAGE_VARIANT,
  ContainerStorageConfig.JSON_PROPERTY_IMAGE_VOLUME_MODE,
  ContainerStorageConfig.JSON_PROPERTY_IMAGE_VOLUMES,
  ContainerStorageConfig.JSON_PROPERTY_INIT,
  ContainerStorageConfig.JSON_PROPERTY_INIT_PATH,
  ContainerStorageConfig.JSON_PROPERTY_IPCNS,
  ContainerStorageConfig.JSON_PROPERTY_MOUNTS,
  ContainerStorageConfig.JSON_PROPERTY_OVERLAY_VOLUMES,
  ContainerStorageConfig.JSON_PROPERTY_RAW_IMAGE_NAME,
  ContainerStorageConfig.JSON_PROPERTY_ROOTFS,
  ContainerStorageConfig.JSON_PROPERTY_ROOTFS_MAPPING,
  ContainerStorageConfig.JSON_PROPERTY_ROOTFS_OVERLAY,
  ContainerStorageConfig.JSON_PROPERTY_ROOTFS_PROPAGATION,
  ContainerStorageConfig.JSON_PROPERTY_SECRETS,
  ContainerStorageConfig.JSON_PROPERTY_SHM_SIZE,
  ContainerStorageConfig.JSON_PROPERTY_SHM_SIZE_SYSTEMD,
  ContainerStorageConfig.JSON_PROPERTY_STORAGE_OPTS,
  ContainerStorageConfig.JSON_PROPERTY_VOLATILE,
  ContainerStorageConfig.JSON_PROPERTY_VOLUMES,
  ContainerStorageConfig.JSON_PROPERTY_VOLUMES_FROM,
  ContainerStorageConfig.JSON_PROPERTY_WORK_DIR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ContainerStorageConfig {
  public static final String JSON_PROPERTY_CHROOT_DIRECTORIES = "chroot_directories";
  private List<String> chrootDirectories = new ArrayList<>();

  public static final String JSON_PROPERTY_CREATE_WORKING_DIR = "create_working_dir";
  private Boolean createWorkingDir;

  public static final String JSON_PROPERTY_DEVICE_CGROUP_RULE = "device_cgroup_rule";
  private List<@Valid LinuxDeviceCgroup> deviceCgroupRule = new ArrayList<>();

  public static final String JSON_PROPERTY_DEVICES = "devices";
  private List<@Valid LinuxDevice> devices = new ArrayList<>();

  public static final String JSON_PROPERTY_DEVICES_FROM = "devices_from";
  private List<String> devicesFrom = new ArrayList<>();

  public static final String JSON_PROPERTY_HOST_DEVICE_LIST = "host_device_list";
  private List<@Valid LinuxDevice> hostDeviceList = new ArrayList<>();

  public static final String JSON_PROPERTY_IMAGE = "image";
  private String image;

  public static final String JSON_PROPERTY_IMAGE_ARCH = "image_arch";
  private String imageArch;

  public static final String JSON_PROPERTY_IMAGE_OS = "image_os";
  private String imageOs;

  public static final String JSON_PROPERTY_IMAGE_VARIANT = "image_variant";
  private String imageVariant;

  public static final String JSON_PROPERTY_IMAGE_VOLUME_MODE = "image_volume_mode";
  private String imageVolumeMode;

  public static final String JSON_PROPERTY_IMAGE_VOLUMES = "image_volumes";
  private List<@Valid ImageVolume> imageVolumes = new ArrayList<>();

  public static final String JSON_PROPERTY_INIT = "init";
  private Boolean init;

  public static final String JSON_PROPERTY_INIT_PATH = "init_path";
  private String initPath;

  public static final String JSON_PROPERTY_IPCNS = "ipcns";
  private Namespace ipcns;

  public static final String JSON_PROPERTY_MOUNTS = "mounts";
  private List<@Valid Mount> mounts = new ArrayList<>();

  public static final String JSON_PROPERTY_OVERLAY_VOLUMES = "overlay_volumes";
  private List<@Valid OverlayVolume> overlayVolumes = new ArrayList<>();

  public static final String JSON_PROPERTY_RAW_IMAGE_NAME = "raw_image_name";
  private String rawImageName;

  public static final String JSON_PROPERTY_ROOTFS = "rootfs";
  private String rootfs;

  public static final String JSON_PROPERTY_ROOTFS_MAPPING = "rootfs_mapping";
  private String rootfsMapping;

  public static final String JSON_PROPERTY_ROOTFS_OVERLAY = "rootfs_overlay";
  private Boolean rootfsOverlay;

  public static final String JSON_PROPERTY_ROOTFS_PROPAGATION = "rootfs_propagation";
  private String rootfsPropagation;

  public static final String JSON_PROPERTY_SECRETS = "secrets";
  private List<@Valid Secret> secrets = new ArrayList<>();

  public static final String JSON_PROPERTY_SHM_SIZE = "shm_size";
  private Long shmSize;

  public static final String JSON_PROPERTY_SHM_SIZE_SYSTEMD = "shm_size_systemd";
  private Long shmSizeSystemd;

  public static final String JSON_PROPERTY_STORAGE_OPTS = "storage_opts";
  private Map<String, String> storageOpts = new HashMap<>();

  public static final String JSON_PROPERTY_VOLATILE = "volatile";
  private Boolean _volatile;

  public static final String JSON_PROPERTY_VOLUMES = "volumes";
  private List<@Valid NamedVolume> volumes = new ArrayList<>();

  public static final String JSON_PROPERTY_VOLUMES_FROM = "volumes_from";
  private List<String> volumesFrom = new ArrayList<>();

  public static final String JSON_PROPERTY_WORK_DIR = "work_dir";
  private String workDir;

  public ContainerStorageConfig() { 
  }

  public ContainerStorageConfig chrootDirectories(List<String> chrootDirectories) {
    this.chrootDirectories = chrootDirectories;
    return this;
  }

  public ContainerStorageConfig addChrootDirectoriesItem(String chrootDirectoriesItem) {
    if (this.chrootDirectories == null) {
      this.chrootDirectories = new ArrayList<>();
    }
    this.chrootDirectories.add(chrootDirectoriesItem);
    return this;
  }

  /**
   * ChrootDirs is an additional set of directories that need to be treated as root directories. Standard bind mounts will be mounted into paths relative to these directories. Optional.
   * @return chrootDirectories
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CHROOT_DIRECTORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getChrootDirectories() {
    return chrootDirectories;
  }


  @JsonProperty(JSON_PROPERTY_CHROOT_DIRECTORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChrootDirectories(List<String> chrootDirectories) {
    this.chrootDirectories = chrootDirectories;
  }


  public ContainerStorageConfig createWorkingDir(Boolean createWorkingDir) {
    this.createWorkingDir = createWorkingDir;
    return this;
  }

  /**
   * Create the working directory if it doesn&#39;t exist. If unset, it doesn&#39;t create it. Optional.
   * @return createWorkingDir
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CREATE_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCreateWorkingDir() {
    return createWorkingDir;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateWorkingDir(Boolean createWorkingDir) {
    this.createWorkingDir = createWorkingDir;
  }


  public ContainerStorageConfig deviceCgroupRule(List<@Valid LinuxDeviceCgroup> deviceCgroupRule) {
    this.deviceCgroupRule = deviceCgroupRule;
    return this;
  }

  public ContainerStorageConfig addDeviceCgroupRuleItem(LinuxDeviceCgroup deviceCgroupRuleItem) {
    if (this.deviceCgroupRule == null) {
      this.deviceCgroupRule = new ArrayList<>();
    }
    this.deviceCgroupRule.add(deviceCgroupRuleItem);
    return this;
  }

  /**
   * DeviceCgroupRule are device cgroup rules that allow containers to use additional types of devices.
   * @return deviceCgroupRule
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_DEVICE_CGROUP_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxDeviceCgroup> getDeviceCgroupRule() {
    return deviceCgroupRule;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_CGROUP_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceCgroupRule(List<@Valid LinuxDeviceCgroup> deviceCgroupRule) {
    this.deviceCgroupRule = deviceCgroupRule;
  }


  public ContainerStorageConfig devices(List<@Valid LinuxDevice> devices) {
    this.devices = devices;
    return this;
  }

  public ContainerStorageConfig addDevicesItem(LinuxDevice devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

  /**
   * Devices are devices that will be added to the container. Optional.
   * @return devices
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxDevice> getDevices() {
    return devices;
  }


  @JsonProperty(JSON_PROPERTY_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevices(List<@Valid LinuxDevice> devices) {
    this.devices = devices;
  }


  public ContainerStorageConfig devicesFrom(List<String> devicesFrom) {
    this.devicesFrom = devicesFrom;
    return this;
  }

  public ContainerStorageConfig addDevicesFromItem(String devicesFromItem) {
    if (this.devicesFrom == null) {
      this.devicesFrom = new ArrayList<>();
    }
    this.devicesFrom.add(devicesFromItem);
    return this;
  }

  /**
   * DevicesFrom specifies that this container will mount the device(s) from other container(s). Optional.
   * @return devicesFrom
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DEVICES_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getDevicesFrom() {
    return devicesFrom;
  }


  @JsonProperty(JSON_PROPERTY_DEVICES_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevicesFrom(List<String> devicesFrom) {
    this.devicesFrom = devicesFrom;
  }


  public ContainerStorageConfig hostDeviceList(List<@Valid LinuxDevice> hostDeviceList) {
    this.hostDeviceList = hostDeviceList;
    return this;
  }

  public ContainerStorageConfig addHostDeviceListItem(LinuxDevice hostDeviceListItem) {
    if (this.hostDeviceList == null) {
      this.hostDeviceList = new ArrayList<>();
    }
    this.hostDeviceList.add(hostDeviceListItem);
    return this;
  }

  /**
   * HostDeviceList is used to recreate the mounted device on inherited containers
   * @return hostDeviceList
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_HOST_DEVICE_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxDevice> getHostDeviceList() {
    return hostDeviceList;
  }


  @JsonProperty(JSON_PROPERTY_HOST_DEVICE_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostDeviceList(List<@Valid LinuxDevice> hostDeviceList) {
    this.hostDeviceList = hostDeviceList;
  }


  public ContainerStorageConfig image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Image is the image the container will be based on. The image will be used as the container&#39;s root filesystem, and its environment vars, volumes, and other configuration will be applied to the container. Conflicts with Rootfs. At least one of Image or Rootfs must be specified.
   * @return image
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public ContainerStorageConfig imageArch(String imageArch) {
    this.imageArch = imageArch;
    return this;
  }

  /**
   * ImageArch is the user-specified image architecture. Used to select a different variant from a manifest list. Optional.
   * @return imageArch
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageArch() {
    return imageArch;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageArch(String imageArch) {
    this.imageArch = imageArch;
  }


  public ContainerStorageConfig imageOs(String imageOs) {
    this.imageOs = imageOs;
    return this;
  }

  /**
   * ImageOS is the user-specified OS of the image. Used to select a different variant from a manifest list. Optional.
   * @return imageOs
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageOs() {
    return imageOs;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageOs(String imageOs) {
    this.imageOs = imageOs;
  }


  public ContainerStorageConfig imageVariant(String imageVariant) {
    this.imageVariant = imageVariant;
    return this;
  }

  /**
   * ImageVariant is the user-specified image variant. Used to select a different variant from a manifest list. Optional.
   * @return imageVariant
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_VARIANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageVariant() {
    return imageVariant;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_VARIANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageVariant(String imageVariant) {
    this.imageVariant = imageVariant;
  }


  public ContainerStorageConfig imageVolumeMode(String imageVolumeMode) {
    this.imageVolumeMode = imageVolumeMode;
    return this;
  }

  /**
   * ImageVolumeMode indicates how image volumes will be created. Supported modes are \&quot;ignore\&quot; (do not create), \&quot;tmpfs\&quot; (create as tmpfs), and \&quot;anonymous\&quot; (create as anonymous volumes). The default if unset is anonymous. Optional.
   * @return imageVolumeMode
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_VOLUME_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageVolumeMode() {
    return imageVolumeMode;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_VOLUME_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageVolumeMode(String imageVolumeMode) {
    this.imageVolumeMode = imageVolumeMode;
  }


  public ContainerStorageConfig imageVolumes(List<@Valid ImageVolume> imageVolumes) {
    this.imageVolumes = imageVolumes;
    return this;
  }

  public ContainerStorageConfig addImageVolumesItem(ImageVolume imageVolumesItem) {
    if (this.imageVolumes == null) {
      this.imageVolumes = new ArrayList<>();
    }
    this.imageVolumes.add(imageVolumesItem);
    return this;
  }

  /**
   * Image volumes bind-mount a container-image mount into the container. Optional.
   * @return imageVolumes
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_IMAGE_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid ImageVolume> getImageVolumes() {
    return imageVolumes;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageVolumes(List<@Valid ImageVolume> imageVolumes) {
    this.imageVolumes = imageVolumes;
  }


  public ContainerStorageConfig init(Boolean init) {
    this.init = init;
    return this;
  }

  /**
   * Init specifies that an init binary will be mounted into the container, and will be used as PID1. Optional.
   * @return init
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getInit() {
    return init;
  }


  @JsonProperty(JSON_PROPERTY_INIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInit(Boolean init) {
    this.init = init;
  }


  public ContainerStorageConfig initPath(String initPath) {
    this.initPath = initPath;
    return this;
  }

  /**
   * InitPath specifies the path to the init binary that will be added if Init is specified above. If not specified, the default set in the Libpod config will be used. Ignored if Init above is not set. Optional.
   * @return initPath
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INIT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getInitPath() {
    return initPath;
  }


  @JsonProperty(JSON_PROPERTY_INIT_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitPath(String initPath) {
    this.initPath = initPath;
  }


  public ContainerStorageConfig ipcns(Namespace ipcns) {
    this.ipcns = ipcns;
    return this;
  }

  /**
   * Get ipcns
   * @return ipcns
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_IPCNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Namespace getIpcns() {
    return ipcns;
  }


  @JsonProperty(JSON_PROPERTY_IPCNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIpcns(Namespace ipcns) {
    this.ipcns = ipcns;
  }


  public ContainerStorageConfig mounts(List<@Valid Mount> mounts) {
    this.mounts = mounts;
    return this;
  }

  public ContainerStorageConfig addMountsItem(Mount mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

  /**
   * Mounts are mounts that will be added to the container. These will supersede Image Volumes and VolumesFrom volumes where there are conflicts. Optional.
   * @return mounts
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid Mount> getMounts() {
    return mounts;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMounts(List<@Valid Mount> mounts) {
    this.mounts = mounts;
  }


  public ContainerStorageConfig overlayVolumes(List<@Valid OverlayVolume> overlayVolumes) {
    this.overlayVolumes = overlayVolumes;
    return this;
  }

  public ContainerStorageConfig addOverlayVolumesItem(OverlayVolume overlayVolumesItem) {
    if (this.overlayVolumes == null) {
      this.overlayVolumes = new ArrayList<>();
    }
    this.overlayVolumes.add(overlayVolumesItem);
    return this;
  }

  /**
   * Overlay volumes are named volumes that will be added to the container. Optional.
   * @return overlayVolumes
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_OVERLAY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid OverlayVolume> getOverlayVolumes() {
    return overlayVolumes;
  }


  @JsonProperty(JSON_PROPERTY_OVERLAY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverlayVolumes(List<@Valid OverlayVolume> overlayVolumes) {
    this.overlayVolumes = overlayVolumes;
  }


  public ContainerStorageConfig rawImageName(String rawImageName) {
    this.rawImageName = rawImageName;
    return this;
  }

  /**
   * RawImageName is the user-specified and unprocessed input referring to a local or a remote image. Optional, but strongly encouraged to be set if Image is set.
   * @return rawImageName
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RAW_IMAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRawImageName() {
    return rawImageName;
  }


  @JsonProperty(JSON_PROPERTY_RAW_IMAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRawImageName(String rawImageName) {
    this.rawImageName = rawImageName;
  }


  public ContainerStorageConfig rootfs(String rootfs) {
    this.rootfs = rootfs;
    return this;
  }

  /**
   * Rootfs is the path to a directory that will be used as the container&#39;s root filesystem. No modification will be made to the directory, it will be directly mounted into the container as root. Conflicts with Image. At least one of Image or Rootfs must be specified.
   * @return rootfs
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ROOTFS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRootfs() {
    return rootfs;
  }


  @JsonProperty(JSON_PROPERTY_ROOTFS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootfs(String rootfs) {
    this.rootfs = rootfs;
  }


  public ContainerStorageConfig rootfsMapping(String rootfsMapping) {
    this.rootfsMapping = rootfsMapping;
    return this;
  }

  /**
   * RootfsMapping specifies if there are UID/GID mappings to apply to the rootfs. Optional.
   * @return rootfsMapping
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ROOTFS_MAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRootfsMapping() {
    return rootfsMapping;
  }


  @JsonProperty(JSON_PROPERTY_ROOTFS_MAPPING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootfsMapping(String rootfsMapping) {
    this.rootfsMapping = rootfsMapping;
  }


  public ContainerStorageConfig rootfsOverlay(Boolean rootfsOverlay) {
    this.rootfsOverlay = rootfsOverlay;
    return this;
  }

  /**
   * RootfsOverlay tells if rootfs is actually an overlay on top of base path. Optional.
   * @return rootfsOverlay
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ROOTFS_OVERLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRootfsOverlay() {
    return rootfsOverlay;
  }


  @JsonProperty(JSON_PROPERTY_ROOTFS_OVERLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootfsOverlay(Boolean rootfsOverlay) {
    this.rootfsOverlay = rootfsOverlay;
  }


  public ContainerStorageConfig rootfsPropagation(String rootfsPropagation) {
    this.rootfsPropagation = rootfsPropagation;
    return this;
  }

  /**
   * RootfsPropagation is the rootfs propagation mode for the container. If not set, the default of rslave will be used. Optional.
   * @return rootfsPropagation
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ROOTFS_PROPAGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRootfsPropagation() {
    return rootfsPropagation;
  }


  @JsonProperty(JSON_PROPERTY_ROOTFS_PROPAGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootfsPropagation(String rootfsPropagation) {
    this.rootfsPropagation = rootfsPropagation;
  }


  public ContainerStorageConfig secrets(List<@Valid Secret> secrets) {
    this.secrets = secrets;
    return this;
  }

  public ContainerStorageConfig addSecretsItem(Secret secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

  /**
   * Secrets are the secrets that will be added to the container Optional.
   * @return secrets
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid Secret> getSecrets() {
    return secrets;
  }


  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecrets(List<@Valid Secret> secrets) {
    this.secrets = secrets;
  }


  public ContainerStorageConfig shmSize(Long shmSize) {
    this.shmSize = shmSize;
    return this;
  }

  /**
   * ShmSize is the size of the tmpfs to mount in at /dev/shm, in bytes. Conflicts with ShmSize if IpcNS is not private. Optional.
   * @return shmSize
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SHM_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getShmSize() {
    return shmSize;
  }


  @JsonProperty(JSON_PROPERTY_SHM_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShmSize(Long shmSize) {
    this.shmSize = shmSize;
  }


  public ContainerStorageConfig shmSizeSystemd(Long shmSizeSystemd) {
    this.shmSizeSystemd = shmSizeSystemd;
    return this;
  }

  /**
   * ShmSizeSystemd is the size of systemd-specific tmpfs mounts specifically /run, /run/lock, /var/log/journal and /tmp. Optional
   * @return shmSizeSystemd
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SHM_SIZE_SYSTEMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getShmSizeSystemd() {
    return shmSizeSystemd;
  }


  @JsonProperty(JSON_PROPERTY_SHM_SIZE_SYSTEMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShmSizeSystemd(Long shmSizeSystemd) {
    this.shmSizeSystemd = shmSizeSystemd;
  }


  public ContainerStorageConfig storageOpts(Map<String, String> storageOpts) {
    this.storageOpts = storageOpts;
    return this;
  }

  public ContainerStorageConfig putStorageOptsItem(String key, String storageOptsItem) {
    if (this.storageOpts == null) {
      this.storageOpts = new HashMap<>();
    }
    this.storageOpts.put(key, storageOptsItem);
    return this;
  }

  /**
   * StorageOpts is the container&#39;s storage options Optional.
   * @return storageOpts
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STORAGE_OPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getStorageOpts() {
    return storageOpts;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_OPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorageOpts(Map<String, String> storageOpts) {
    this.storageOpts = storageOpts;
  }


  public ContainerStorageConfig _volatile(Boolean _volatile) {
    this._volatile = _volatile;
    return this;
  }

  /**
   * Volatile specifies whether the container storage can be optimized at the cost of not syncing all the dirty files in memory. Optional.
   * @return _volatile
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VOLATILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getVolatile() {
    return _volatile;
  }


  @JsonProperty(JSON_PROPERTY_VOLATILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolatile(Boolean _volatile) {
    this._volatile = _volatile;
  }


  public ContainerStorageConfig volumes(List<@Valid NamedVolume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public ContainerStorageConfig addVolumesItem(NamedVolume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * Volumes are named volumes that will be added to the container. These will supersede Image Volumes and VolumesFrom volumes where there are conflicts. Optional.
   * @return volumes
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid NamedVolume> getVolumes() {
    return volumes;
  }


  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumes(List<@Valid NamedVolume> volumes) {
    this.volumes = volumes;
  }


  public ContainerStorageConfig volumesFrom(List<String> volumesFrom) {
    this.volumesFrom = volumesFrom;
    return this;
  }

  public ContainerStorageConfig addVolumesFromItem(String volumesFromItem) {
    if (this.volumesFrom == null) {
      this.volumesFrom = new ArrayList<>();
    }
    this.volumesFrom.add(volumesFromItem);
    return this;
  }

  /**
   * VolumesFrom is a set of containers whose volumes will be added to this container. The name or ID of the container must be provided, and may optionally be followed by a : and then one or more comma-separated options. Valid options are &#39;ro&#39;, &#39;rw&#39;, and &#39;z&#39;. Options will be used for all volumes sourced from the container. Optional.
   * @return volumesFrom
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VOLUMES_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getVolumesFrom() {
    return volumesFrom;
  }


  @JsonProperty(JSON_PROPERTY_VOLUMES_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumesFrom(List<String> volumesFrom) {
    this.volumesFrom = volumesFrom;
  }


  public ContainerStorageConfig workDir(String workDir) {
    this.workDir = workDir;
    return this;
  }

  /**
   * WorkDir is the container&#39;s working directory. If unset, the default, /, will be used. Optional.
   * @return workDir
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_WORK_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getWorkDir() {
    return workDir;
  }


  @JsonProperty(JSON_PROPERTY_WORK_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkDir(String workDir) {
    this.workDir = workDir;
  }


  /**
   * Return true if this ContainerStorageConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerStorageConfig containerStorageConfig = (ContainerStorageConfig) o;
    return Objects.equals(this.chrootDirectories, containerStorageConfig.chrootDirectories) &&
        Objects.equals(this.createWorkingDir, containerStorageConfig.createWorkingDir) &&
        Objects.equals(this.deviceCgroupRule, containerStorageConfig.deviceCgroupRule) &&
        Objects.equals(this.devices, containerStorageConfig.devices) &&
        Objects.equals(this.devicesFrom, containerStorageConfig.devicesFrom) &&
        Objects.equals(this.hostDeviceList, containerStorageConfig.hostDeviceList) &&
        Objects.equals(this.image, containerStorageConfig.image) &&
        Objects.equals(this.imageArch, containerStorageConfig.imageArch) &&
        Objects.equals(this.imageOs, containerStorageConfig.imageOs) &&
        Objects.equals(this.imageVariant, containerStorageConfig.imageVariant) &&
        Objects.equals(this.imageVolumeMode, containerStorageConfig.imageVolumeMode) &&
        Objects.equals(this.imageVolumes, containerStorageConfig.imageVolumes) &&
        Objects.equals(this.init, containerStorageConfig.init) &&
        Objects.equals(this.initPath, containerStorageConfig.initPath) &&
        Objects.equals(this.ipcns, containerStorageConfig.ipcns) &&
        Objects.equals(this.mounts, containerStorageConfig.mounts) &&
        Objects.equals(this.overlayVolumes, containerStorageConfig.overlayVolumes) &&
        Objects.equals(this.rawImageName, containerStorageConfig.rawImageName) &&
        Objects.equals(this.rootfs, containerStorageConfig.rootfs) &&
        Objects.equals(this.rootfsMapping, containerStorageConfig.rootfsMapping) &&
        Objects.equals(this.rootfsOverlay, containerStorageConfig.rootfsOverlay) &&
        Objects.equals(this.rootfsPropagation, containerStorageConfig.rootfsPropagation) &&
        Objects.equals(this.secrets, containerStorageConfig.secrets) &&
        Objects.equals(this.shmSize, containerStorageConfig.shmSize) &&
        Objects.equals(this.shmSizeSystemd, containerStorageConfig.shmSizeSystemd) &&
        Objects.equals(this.storageOpts, containerStorageConfig.storageOpts) &&
        Objects.equals(this._volatile, containerStorageConfig._volatile) &&
        Objects.equals(this.volumes, containerStorageConfig.volumes) &&
        Objects.equals(this.volumesFrom, containerStorageConfig.volumesFrom) &&
        Objects.equals(this.workDir, containerStorageConfig.workDir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chrootDirectories, createWorkingDir, deviceCgroupRule, devices, devicesFrom, hostDeviceList, image, imageArch, imageOs, imageVariant, imageVolumeMode, imageVolumes, init, initPath, ipcns, mounts, overlayVolumes, rawImageName, rootfs, rootfsMapping, rootfsOverlay, rootfsPropagation, secrets, shmSize, shmSizeSystemd, storageOpts, _volatile, volumes, volumesFrom, workDir);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerStorageConfig {\n");
    sb.append("    chrootDirectories: ").append(toIndentedString(chrootDirectories)).append("\n");
    sb.append("    createWorkingDir: ").append(toIndentedString(createWorkingDir)).append("\n");
    sb.append("    deviceCgroupRule: ").append(toIndentedString(deviceCgroupRule)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    devicesFrom: ").append(toIndentedString(devicesFrom)).append("\n");
    sb.append("    hostDeviceList: ").append(toIndentedString(hostDeviceList)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageArch: ").append(toIndentedString(imageArch)).append("\n");
    sb.append("    imageOs: ").append(toIndentedString(imageOs)).append("\n");
    sb.append("    imageVariant: ").append(toIndentedString(imageVariant)).append("\n");
    sb.append("    imageVolumeMode: ").append(toIndentedString(imageVolumeMode)).append("\n");
    sb.append("    imageVolumes: ").append(toIndentedString(imageVolumes)).append("\n");
    sb.append("    init: ").append(toIndentedString(init)).append("\n");
    sb.append("    initPath: ").append(toIndentedString(initPath)).append("\n");
    sb.append("    ipcns: ").append(toIndentedString(ipcns)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    overlayVolumes: ").append(toIndentedString(overlayVolumes)).append("\n");
    sb.append("    rawImageName: ").append(toIndentedString(rawImageName)).append("\n");
    sb.append("    rootfs: ").append(toIndentedString(rootfs)).append("\n");
    sb.append("    rootfsMapping: ").append(toIndentedString(rootfsMapping)).append("\n");
    sb.append("    rootfsOverlay: ").append(toIndentedString(rootfsOverlay)).append("\n");
    sb.append("    rootfsPropagation: ").append(toIndentedString(rootfsPropagation)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    shmSize: ").append(toIndentedString(shmSize)).append("\n");
    sb.append("    shmSizeSystemd: ").append(toIndentedString(shmSizeSystemd)).append("\n");
    sb.append("    storageOpts: ").append(toIndentedString(storageOpts)).append("\n");
    sb.append("    _volatile: ").append(toIndentedString(_volatile)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    volumesFrom: ").append(toIndentedString(volumesFrom)).append("\n");
    sb.append("    workDir: ").append(toIndentedString(workDir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `chroot_directories` to the URL query string
    if (getChrootDirectories() != null) {
      for (int i = 0; i < getChrootDirectories().size(); i++) {
        joiner.add(String.format("%schroot_directories%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getChrootDirectories().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `create_working_dir` to the URL query string
    if (getCreateWorkingDir() != null) {
      joiner.add(String.format("%screate_working_dir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreateWorkingDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `device_cgroup_rule` to the URL query string
    if (getDeviceCgroupRule() != null) {
      for (int i = 0; i < getDeviceCgroupRule().size(); i++) {
        if (getDeviceCgroupRule().get(i) != null) {
          joiner.add(getDeviceCgroupRule().get(i).toUrlQueryString(String.format("%sdevice_cgroup_rule%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `devices` to the URL query string
    if (getDevices() != null) {
      for (int i = 0; i < getDevices().size(); i++) {
        if (getDevices().get(i) != null) {
          joiner.add(getDevices().get(i).toUrlQueryString(String.format("%sdevices%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `devices_from` to the URL query string
    if (getDevicesFrom() != null) {
      for (int i = 0; i < getDevicesFrom().size(); i++) {
        joiner.add(String.format("%sdevices_from%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getDevicesFrom().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `host_device_list` to the URL query string
    if (getHostDeviceList() != null) {
      for (int i = 0; i < getHostDeviceList().size(); i++) {
        if (getHostDeviceList().get(i) != null) {
          joiner.add(getHostDeviceList().get(i).toUrlQueryString(String.format("%shost_device_list%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `image` to the URL query string
    if (getImage() != null) {
      joiner.add(String.format("%simage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `image_arch` to the URL query string
    if (getImageArch() != null) {
      joiner.add(String.format("%simage_arch%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageArch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `image_os` to the URL query string
    if (getImageOs() != null) {
      joiner.add(String.format("%simage_os%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageOs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `image_variant` to the URL query string
    if (getImageVariant() != null) {
      joiner.add(String.format("%simage_variant%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageVariant()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `image_volume_mode` to the URL query string
    if (getImageVolumeMode() != null) {
      joiner.add(String.format("%simage_volume_mode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageVolumeMode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `image_volumes` to the URL query string
    if (getImageVolumes() != null) {
      for (int i = 0; i < getImageVolumes().size(); i++) {
        if (getImageVolumes().get(i) != null) {
          joiner.add(getImageVolumes().get(i).toUrlQueryString(String.format("%simage_volumes%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `init` to the URL query string
    if (getInit() != null) {
      joiner.add(String.format("%sinit%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getInit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `init_path` to the URL query string
    if (getInitPath() != null) {
      joiner.add(String.format("%sinit_path%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getInitPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ipcns` to the URL query string
    if (getIpcns() != null) {
      joiner.add(getIpcns().toUrlQueryString(prefix + "ipcns" + suffix));
    }

    // add `mounts` to the URL query string
    if (getMounts() != null) {
      for (int i = 0; i < getMounts().size(); i++) {
        if (getMounts().get(i) != null) {
          joiner.add(getMounts().get(i).toUrlQueryString(String.format("%smounts%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `overlay_volumes` to the URL query string
    if (getOverlayVolumes() != null) {
      for (int i = 0; i < getOverlayVolumes().size(); i++) {
        if (getOverlayVolumes().get(i) != null) {
          joiner.add(getOverlayVolumes().get(i).toUrlQueryString(String.format("%soverlay_volumes%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `raw_image_name` to the URL query string
    if (getRawImageName() != null) {
      joiner.add(String.format("%sraw_image_name%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRawImageName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `rootfs` to the URL query string
    if (getRootfs() != null) {
      joiner.add(String.format("%srootfs%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRootfs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `rootfs_mapping` to the URL query string
    if (getRootfsMapping() != null) {
      joiner.add(String.format("%srootfs_mapping%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRootfsMapping()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `rootfs_overlay` to the URL query string
    if (getRootfsOverlay() != null) {
      joiner.add(String.format("%srootfs_overlay%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRootfsOverlay()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `rootfs_propagation` to the URL query string
    if (getRootfsPropagation() != null) {
      joiner.add(String.format("%srootfs_propagation%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRootfsPropagation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `secrets` to the URL query string
    if (getSecrets() != null) {
      for (int i = 0; i < getSecrets().size(); i++) {
        if (getSecrets().get(i) != null) {
          joiner.add(getSecrets().get(i).toUrlQueryString(String.format("%ssecrets%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `shm_size` to the URL query string
    if (getShmSize() != null) {
      joiner.add(String.format("%sshm_size%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getShmSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `shm_size_systemd` to the URL query string
    if (getShmSizeSystemd() != null) {
      joiner.add(String.format("%sshm_size_systemd%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getShmSizeSystemd()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `storage_opts` to the URL query string
    if (getStorageOpts() != null) {
      for (String _key : getStorageOpts().keySet()) {
        joiner.add(String.format("%sstorage_opts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getStorageOpts().get(_key), URLEncoder.encode(ApiClient.valueToString(getStorageOpts().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `volatile` to the URL query string
    if (getVolatile() != null) {
      joiner.add(String.format("%svolatile%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getVolatile()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `volumes` to the URL query string
    if (getVolumes() != null) {
      for (int i = 0; i < getVolumes().size(); i++) {
        if (getVolumes().get(i) != null) {
          joiner.add(getVolumes().get(i).toUrlQueryString(String.format("%svolumes%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `volumes_from` to the URL query string
    if (getVolumesFrom() != null) {
      for (int i = 0; i < getVolumesFrom().size(); i++) {
        joiner.add(String.format("%svolumes_from%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getVolumesFrom().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `work_dir` to the URL query string
    if (getWorkDir() != null) {
      joiner.add(String.format("%swork_dir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWorkDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

