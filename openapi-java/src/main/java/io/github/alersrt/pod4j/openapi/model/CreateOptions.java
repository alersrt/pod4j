/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.alersrt.pod4j.openapi.JSON;
import jakarta.validation.Valid;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CreateOptions
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-29T01:29:49.168634544+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class CreateOptions {
    public static final String SERIALIZED_NAME_ATTACHABLE = "Attachable";
    public static final String SERIALIZED_NAME_CONFIG_FROM = "ConfigFrom";
    public static final String SERIALIZED_NAME_CONFIG_ONLY = "ConfigOnly";
    public static final String SERIALIZED_NAME_DRIVER = "Driver";
    public static final String SERIALIZED_NAME_ENABLE_I_PV6 = "EnableIPv6";
    public static final String SERIALIZED_NAME_I_P_A_M = "IPAM";
    public static final String SERIALIZED_NAME_INGRESS = "Ingress";
    public static final String SERIALIZED_NAME_INTERNAL = "Internal";
    public static final String SERIALIZED_NAME_LABELS = "Labels";
    public static final String SERIALIZED_NAME_OPTIONS = "Options";
    public static final String SERIALIZED_NAME_SCOPE = "Scope";
    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Attachable");
        openapiFields.add("ConfigFrom");
        openapiFields.add("ConfigOnly");
        openapiFields.add("Driver");
        openapiFields.add("EnableIPv6");
        openapiFields.add("IPAM");
        openapiFields.add("Ingress");
        openapiFields.add("Internal");
        openapiFields.add("Labels");
        openapiFields.add("Options");
        openapiFields.add("Scope");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    @SerializedName(SERIALIZED_NAME_ATTACHABLE)
    private Boolean attachable;
    @SerializedName(SERIALIZED_NAME_CONFIG_FROM)
    private ConfigReference configFrom;
    @SerializedName(SERIALIZED_NAME_CONFIG_ONLY)
    private Boolean configOnly;
    @SerializedName(SERIALIZED_NAME_DRIVER)
    private String driver;
    @SerializedName(SERIALIZED_NAME_ENABLE_I_PV6)
    private Boolean enableIPv6;
    @SerializedName(SERIALIZED_NAME_I_P_A_M)
    private IPAM ipam;
    @SerializedName(SERIALIZED_NAME_INGRESS)
    private Boolean ingress;
    @SerializedName(SERIALIZED_NAME_INTERNAL)
    private Boolean internal;
    @SerializedName(SERIALIZED_NAME_LABELS)
    private Map<String, String> labels = new HashMap<>();
    @SerializedName(SERIALIZED_NAME_OPTIONS)
    private Map<String, String> options = new HashMap<>();
    @SerializedName(SERIALIZED_NAME_SCOPE)
    private String scope;

    public CreateOptions() {
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateOptions
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CreateOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CreateOptions is not found in the empty JSON string", CreateOptions.openapiRequiredFields));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CreateOptions.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateOptions` properties. JSON: %s", entry.getKey(), jsonElement));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `ConfigFrom`
        if (jsonObj.get("ConfigFrom") != null && !jsonObj.get("ConfigFrom").isJsonNull()) {
            ConfigReference.validateJsonElement(jsonObj.get("ConfigFrom"));
        }
        if ((jsonObj.get("Driver") != null && !jsonObj.get("Driver").isJsonNull()) && !jsonObj.get("Driver").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Driver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Driver").toString()));
        }
        // validate the optional field `IPAM`
        if (jsonObj.get("IPAM") != null && !jsonObj.get("IPAM").isJsonNull()) {
            IPAM.validateJsonElement(jsonObj.get("IPAM"));
        }
        if ((jsonObj.get("Scope") != null && !jsonObj.get("Scope").isJsonNull()) && !jsonObj.get("Scope").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Scope").toString()));
        }
    }

    /**
     * Create an instance of CreateOptions given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateOptions
     * @throws IOException if the JSON string is invalid with respect to CreateOptions
     */
    public static CreateOptions fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateOptions.class);
    }

    public CreateOptions attachable(Boolean attachable) {
        this.attachable = attachable;
        return this;
    }

    /**
     * Get attachable
     *
     * @return attachable
     */
    @jakarta.annotation.Nullable

    public Boolean getAttachable() {
        return attachable;
    }

    public void setAttachable(Boolean attachable) {
        this.attachable = attachable;
    }

    public CreateOptions configFrom(ConfigReference configFrom) {
        this.configFrom = configFrom;
        return this;
    }

    /**
     * Get configFrom
     *
     * @return configFrom
     */
    @jakarta.annotation.Nullable
    @Valid

    public ConfigReference getConfigFrom() {
        return configFrom;
    }

    public void setConfigFrom(ConfigReference configFrom) {
        this.configFrom = configFrom;
    }

    public CreateOptions configOnly(Boolean configOnly) {
        this.configOnly = configOnly;
        return this;
    }

    /**
     * Get configOnly
     *
     * @return configOnly
     */
    @jakarta.annotation.Nullable

    public Boolean getConfigOnly() {
        return configOnly;
    }

    public void setConfigOnly(Boolean configOnly) {
        this.configOnly = configOnly;
    }

    public CreateOptions driver(String driver) {
        this.driver = driver;
        return this;
    }

    /**
     * Name of the volume driver to use.
     *
     * @return driver
     */
    @jakarta.annotation.Nullable

    public String getDriver() {
        return driver;
    }

    public void setDriver(String driver) {
        this.driver = driver;
    }

    public CreateOptions enableIPv6(Boolean enableIPv6) {
        this.enableIPv6 = enableIPv6;
        return this;
    }

    /**
     * Get enableIPv6
     *
     * @return enableIPv6
     */
    @jakarta.annotation.Nullable

    public Boolean getEnableIPv6() {
        return enableIPv6;
    }

    public void setEnableIPv6(Boolean enableIPv6) {
        this.enableIPv6 = enableIPv6;
    }

    public CreateOptions ipam(IPAM ipam) {
        this.ipam = ipam;
        return this;
    }

    /**
     * Get ipam
     *
     * @return ipam
     */
    @jakarta.annotation.Nullable
    @Valid

    public IPAM getIPAM() {
        return ipam;
    }

    public void setIPAM(IPAM ipam) {
        this.ipam = ipam;
    }

    public CreateOptions ingress(Boolean ingress) {
        this.ingress = ingress;
        return this;
    }

    /**
     * Get ingress
     *
     * @return ingress
     */
    @jakarta.annotation.Nullable

    public Boolean getIngress() {
        return ingress;
    }

    public void setIngress(Boolean ingress) {
        this.ingress = ingress;
    }

    public CreateOptions internal(Boolean internal) {
        this.internal = internal;
        return this;
    }

    /**
     * Get internal
     *
     * @return internal
     */
    @jakarta.annotation.Nullable

    public Boolean getInternal() {
        return internal;
    }

    public void setInternal(Boolean internal) {
        this.internal = internal;
    }

    public CreateOptions labels(Map<String, String> labels) {
        this.labels = labels;
        return this;
    }

    public CreateOptions putLabelsItem(String key, String labelsItem) {
        if (this.labels == null) {
            this.labels = new HashMap<>();
        }
        this.labels.put(key, labelsItem);
        return this;
    }

    /**
     * User-defined key/value metadata.
     *
     * @return labels
     */
    @jakarta.annotation.Nullable

    public Map<String, String> getLabels() {
        return labels;
    }

    public void setLabels(Map<String, String> labels) {
        this.labels = labels;
    }

    public CreateOptions options(Map<String, String> options) {
        this.options = options;
        return this;
    }

    public CreateOptions putOptionsItem(String key, String optionsItem) {
        if (this.options == null) {
            this.options = new HashMap<>();
        }
        this.options.put(key, optionsItem);
        return this;
    }

    /**
     * Get options
     *
     * @return options
     */
    @jakarta.annotation.Nullable

    public Map<String, String> getOptions() {
        return options;
    }

    public void setOptions(Map<String, String> options) {
        this.options = options;
    }

    public CreateOptions scope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get scope
     *
     * @return scope
     */
    @jakarta.annotation.Nullable

    public String getScope() {
        return scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOptions createOptions = (CreateOptions) o;
        return Objects.equals(this.attachable, createOptions.attachable) &&
                Objects.equals(this.configFrom, createOptions.configFrom) &&
                Objects.equals(this.configOnly, createOptions.configOnly) &&
                Objects.equals(this.driver, createOptions.driver) &&
                Objects.equals(this.enableIPv6, createOptions.enableIPv6) &&
                Objects.equals(this.ipam, createOptions.ipam) &&
                Objects.equals(this.ingress, createOptions.ingress) &&
                Objects.equals(this.internal, createOptions.internal) &&
                Objects.equals(this.labels, createOptions.labels) &&
                Objects.equals(this.options, createOptions.options) &&
                Objects.equals(this.scope, createOptions.scope);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attachable, configFrom, configOnly, driver, enableIPv6, ipam, ingress, internal, labels, options, scope);
    }

    @Override
    public String toString() {
        String sb = "class CreateOptions {\n" +
                "    attachable: " + toIndentedString(attachable) + "\n" +
                "    configFrom: " + toIndentedString(configFrom) + "\n" +
                "    configOnly: " + toIndentedString(configOnly) + "\n" +
                "    driver: " + toIndentedString(driver) + "\n" +
                "    enableIPv6: " + toIndentedString(enableIPv6) + "\n" +
                "    ipam: " + toIndentedString(ipam) + "\n" +
                "    ingress: " + toIndentedString(ingress) + "\n" +
                "    internal: " + toIndentedString(internal) + "\n" +
                "    labels: " + toIndentedString(labels) + "\n" +
                "    options: " + toIndentedString(options) + "\n" +
                "    scope: " + toIndentedString(scope) + "\n" +
                "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert an instance of CreateOptions to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateOptions.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateOptions' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateOptions> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(CreateOptions.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateOptions>() {
                @Override
                public void write(JsonWriter out, CreateOptions value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CreateOptions read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }
}

