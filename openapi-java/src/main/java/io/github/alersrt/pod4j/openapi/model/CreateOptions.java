/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ConfigReference;
import io.github.alersrt.pod4j.openapi.model.IPAM;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * CreateOptions
 */
@JsonPropertyOrder({
  CreateOptions.JSON_PROPERTY_ATTACHABLE,
  CreateOptions.JSON_PROPERTY_CONFIG_FROM,
  CreateOptions.JSON_PROPERTY_CONFIG_ONLY,
  CreateOptions.JSON_PROPERTY_DRIVER,
  CreateOptions.JSON_PROPERTY_ENABLE_I_PV6,
  CreateOptions.JSON_PROPERTY_I_P_A_M,
  CreateOptions.JSON_PROPERTY_INGRESS,
  CreateOptions.JSON_PROPERTY_INTERNAL,
  CreateOptions.JSON_PROPERTY_LABELS,
  CreateOptions.JSON_PROPERTY_OPTIONS,
  CreateOptions.JSON_PROPERTY_SCOPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class CreateOptions {
  public static final String JSON_PROPERTY_ATTACHABLE = "Attachable";
  private Boolean attachable;

  public static final String JSON_PROPERTY_CONFIG_FROM = "ConfigFrom";
  private ConfigReference configFrom;

  public static final String JSON_PROPERTY_CONFIG_ONLY = "ConfigOnly";
  private Boolean configOnly;

  public static final String JSON_PROPERTY_DRIVER = "Driver";
  private String driver;

  public static final String JSON_PROPERTY_ENABLE_I_PV6 = "EnableIPv6";
  private Boolean enableIPv6;

  public static final String JSON_PROPERTY_I_P_A_M = "IPAM";
  private IPAM ipam;

  public static final String JSON_PROPERTY_INGRESS = "Ingress";
  private Boolean ingress;

  public static final String JSON_PROPERTY_INTERNAL = "Internal";
  private Boolean internal;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_OPTIONS = "Options";
  private Map<String, String> options = new HashMap<>();

  public static final String JSON_PROPERTY_SCOPE = "Scope";
  private String scope;

  public CreateOptions() { 
  }

  public CreateOptions attachable(Boolean attachable) {
    this.attachable = attachable;
    return this;
  }

  /**
   * Get attachable
   * @return attachable
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachable() {
    return attachable;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachable(Boolean attachable) {
    this.attachable = attachable;
  }


  public CreateOptions configFrom(ConfigReference configFrom) {
    this.configFrom = configFrom;
    return this;
  }

  /**
   * Get configFrom
   * @return configFrom
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONFIG_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ConfigReference getConfigFrom() {
    return configFrom;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigFrom(ConfigReference configFrom) {
    this.configFrom = configFrom;
  }


  public CreateOptions configOnly(Boolean configOnly) {
    this.configOnly = configOnly;
    return this;
  }

  /**
   * Get configOnly
   * @return configOnly
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONFIG_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getConfigOnly() {
    return configOnly;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigOnly(Boolean configOnly) {
    this.configOnly = configOnly;
  }


  public CreateOptions driver(String driver) {
    this.driver = driver;
    return this;
  }

  /**
   * Name of the volume driver to use.
   * @return driver
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDriver() {
    return driver;
  }


  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDriver(String driver) {
    this.driver = driver;
  }


  public CreateOptions enableIPv6(Boolean enableIPv6) {
    this.enableIPv6 = enableIPv6;
    return this;
  }

  /**
   * Get enableIPv6
   * @return enableIPv6
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENABLE_I_PV6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIPv6() {
    return enableIPv6;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_I_PV6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIPv6(Boolean enableIPv6) {
    this.enableIPv6 = enableIPv6;
  }


  public CreateOptions ipam(IPAM ipam) {
    this.ipam = ipam;
    return this;
  }

  /**
   * Get ipam
   * @return ipam
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_I_P_A_M)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public IPAM getIPAM() {
    return ipam;
  }


  @JsonProperty(JSON_PROPERTY_I_P_A_M)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIPAM(IPAM ipam) {
    this.ipam = ipam;
  }


  public CreateOptions ingress(Boolean ingress) {
    this.ingress = ingress;
    return this;
  }

  /**
   * Get ingress
   * @return ingress
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIngress() {
    return ingress;
  }


  @JsonProperty(JSON_PROPERTY_INGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIngress(Boolean ingress) {
    this.ingress = ingress;
  }


  public CreateOptions internal(Boolean internal) {
    this.internal = internal;
    return this;
  }

  /**
   * Get internal
   * @return internal
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INTERNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getInternal() {
    return internal;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternal(Boolean internal) {
    this.internal = internal;
  }


  public CreateOptions labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public CreateOptions putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User-defined key/value metadata.
   * @return labels
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public CreateOptions options(Map<String, String> options) {
    this.options = options;
    return this;
  }

  public CreateOptions putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(Map<String, String> options) {
    this.options = options;
  }


  public CreateOptions scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScope(String scope) {
    this.scope = scope;
  }


  /**
   * Return true if this CreateOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOptions createOptions = (CreateOptions) o;
    return Objects.equals(this.attachable, createOptions.attachable) &&
        Objects.equals(this.configFrom, createOptions.configFrom) &&
        Objects.equals(this.configOnly, createOptions.configOnly) &&
        Objects.equals(this.driver, createOptions.driver) &&
        Objects.equals(this.enableIPv6, createOptions.enableIPv6) &&
        Objects.equals(this.ipam, createOptions.ipam) &&
        Objects.equals(this.ingress, createOptions.ingress) &&
        Objects.equals(this.internal, createOptions.internal) &&
        Objects.equals(this.labels, createOptions.labels) &&
        Objects.equals(this.options, createOptions.options) &&
        Objects.equals(this.scope, createOptions.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachable, configFrom, configOnly, driver, enableIPv6, ipam, ingress, internal, labels, options, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOptions {\n");
    sb.append("    attachable: ").append(toIndentedString(attachable)).append("\n");
    sb.append("    configFrom: ").append(toIndentedString(configFrom)).append("\n");
    sb.append("    configOnly: ").append(toIndentedString(configOnly)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    enableIPv6: ").append(toIndentedString(enableIPv6)).append("\n");
    sb.append("    ipam: ").append(toIndentedString(ipam)).append("\n");
    sb.append("    ingress: ").append(toIndentedString(ingress)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Attachable` to the URL query string
    if (getAttachable() != null) {
      joiner.add(String.format("%sAttachable%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ConfigFrom` to the URL query string
    if (getConfigFrom() != null) {
      joiner.add(getConfigFrom().toUrlQueryString(prefix + "ConfigFrom" + suffix));
    }

    // add `ConfigOnly` to the URL query string
    if (getConfigOnly() != null) {
      joiner.add(String.format("%sConfigOnly%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConfigOnly()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Driver` to the URL query string
    if (getDriver() != null) {
      joiner.add(String.format("%sDriver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDriver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `EnableIPv6` to the URL query string
    if (getEnableIPv6() != null) {
      joiner.add(String.format("%sEnableIPv6%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEnableIPv6()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `IPAM` to the URL query string
    if (getIPAM() != null) {
      joiner.add(getIPAM().toUrlQueryString(prefix + "IPAM" + suffix));
    }

    // add `Ingress` to the URL query string
    if (getIngress() != null) {
      joiner.add(String.format("%sIngress%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIngress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Internal` to the URL query string
    if (getInternal() != null) {
      joiner.add(String.format("%sInternal%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getInternal()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Options` to the URL query string
    if (getOptions() != null) {
      for (String _key : getOptions().keySet()) {
        joiner.add(String.format("%sOptions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getOptions().get(_key), URLEncoder.encode(ApiClient.valueToString(getOptions().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Scope` to the URL query string
    if (getScope() != null) {
      joiner.add(String.format("%sScope%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getScope()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

