/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.CPUUsage;
import io.github.alersrt.pod4j.openapi.model.ConmonInfo;
import io.github.alersrt.pod4j.openapi.model.DistributionInfo;
import io.github.alersrt.pod4j.openapi.model.IDMappings;
import io.github.alersrt.pod4j.openapi.model.NetworkInfo;
import io.github.alersrt.pod4j.openapi.model.OCIRuntimeInfo;
import io.github.alersrt.pod4j.openapi.model.PastaInfo;
import io.github.alersrt.pod4j.openapi.model.RemoteSocket;
import io.github.alersrt.pod4j.openapi.model.SecurityInfo;
import io.github.alersrt.pod4j.openapi.model.SlirpInfo;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * HostInfo describes the libpod host
 */
@JsonPropertyOrder({
  HostInfo.JSON_PROPERTY_ARCH,
  HostInfo.JSON_PROPERTY_BUILDAH_VERSION,
  HostInfo.JSON_PROPERTY_CGROUP_CONTROLLERS,
  HostInfo.JSON_PROPERTY_CGROUP_MANAGER,
  HostInfo.JSON_PROPERTY_CGROUP_VERSION,
  HostInfo.JSON_PROPERTY_CONMON,
  HostInfo.JSON_PROPERTY_CPU_UTILIZATION,
  HostInfo.JSON_PROPERTY_CPUS,
  HostInfo.JSON_PROPERTY_DATABASE_BACKEND,
  HostInfo.JSON_PROPERTY_DISTRIBUTION,
  HostInfo.JSON_PROPERTY_EVENT_LOGGER,
  HostInfo.JSON_PROPERTY_FREE_LOCKS,
  HostInfo.JSON_PROPERTY_HOSTNAME,
  HostInfo.JSON_PROPERTY_ID_MAPPINGS,
  HostInfo.JSON_PROPERTY_KERNEL,
  HostInfo.JSON_PROPERTY_LINKMODE,
  HostInfo.JSON_PROPERTY_LOG_DRIVER,
  HostInfo.JSON_PROPERTY_MEM_FREE,
  HostInfo.JSON_PROPERTY_MEM_TOTAL,
  HostInfo.JSON_PROPERTY_NETWORK_BACKEND,
  HostInfo.JSON_PROPERTY_NETWORK_BACKEND_INFO,
  HostInfo.JSON_PROPERTY_OCI_RUNTIME,
  HostInfo.JSON_PROPERTY_OS,
  HostInfo.JSON_PROPERTY_PASTA,
  HostInfo.JSON_PROPERTY_REMOTE_SOCKET,
  HostInfo.JSON_PROPERTY_ROOTLESS_NETWORK_CMD,
  HostInfo.JSON_PROPERTY_RUNTIME_INFO,
  HostInfo.JSON_PROPERTY_SECURITY,
  HostInfo.JSON_PROPERTY_SERVICE_IS_REMOTE,
  HostInfo.JSON_PROPERTY_SLIRP4NETNS,
  HostInfo.JSON_PROPERTY_SWAP_FREE,
  HostInfo.JSON_PROPERTY_SWAP_TOTAL,
  HostInfo.JSON_PROPERTY_UPTIME,
  HostInfo.JSON_PROPERTY_VARIANT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class HostInfo {
  public static final String JSON_PROPERTY_ARCH = "arch";
  private String arch;

  public static final String JSON_PROPERTY_BUILDAH_VERSION = "buildahVersion";
  private String buildahVersion;

  public static final String JSON_PROPERTY_CGROUP_CONTROLLERS = "cgroupControllers";
  private List<String> cgroupControllers = new ArrayList<>();

  public static final String JSON_PROPERTY_CGROUP_MANAGER = "cgroupManager";
  private String cgroupManager;

  public static final String JSON_PROPERTY_CGROUP_VERSION = "cgroupVersion";
  private String cgroupVersion;

  public static final String JSON_PROPERTY_CONMON = "conmon";
  private ConmonInfo conmon;

  public static final String JSON_PROPERTY_CPU_UTILIZATION = "cpuUtilization";
  private CPUUsage cpuUtilization;

  public static final String JSON_PROPERTY_CPUS = "cpus";
  private Long cpus;

  public static final String JSON_PROPERTY_DATABASE_BACKEND = "databaseBackend";
  private String databaseBackend;

  public static final String JSON_PROPERTY_DISTRIBUTION = "distribution";
  private DistributionInfo distribution;

  public static final String JSON_PROPERTY_EVENT_LOGGER = "eventLogger";
  private String eventLogger;

  public static final String JSON_PROPERTY_FREE_LOCKS = "freeLocks";
  private Integer freeLocks;

  public static final String JSON_PROPERTY_HOSTNAME = "hostname";
  private String hostname;

  public static final String JSON_PROPERTY_ID_MAPPINGS = "idMappings";
  private IDMappings idMappings;

  public static final String JSON_PROPERTY_KERNEL = "kernel";
  private String kernel;

  public static final String JSON_PROPERTY_LINKMODE = "linkmode";
  private String linkmode;

  public static final String JSON_PROPERTY_LOG_DRIVER = "logDriver";
  private String logDriver;

  public static final String JSON_PROPERTY_MEM_FREE = "memFree";
  private Long memFree;

  public static final String JSON_PROPERTY_MEM_TOTAL = "memTotal";
  private Long memTotal;

  public static final String JSON_PROPERTY_NETWORK_BACKEND = "networkBackend";
  private String networkBackend;

  public static final String JSON_PROPERTY_NETWORK_BACKEND_INFO = "networkBackendInfo";
  private NetworkInfo networkBackendInfo;

  public static final String JSON_PROPERTY_OCI_RUNTIME = "ociRuntime";
  private OCIRuntimeInfo ociRuntime;

  public static final String JSON_PROPERTY_OS = "os";
  private String os;

  public static final String JSON_PROPERTY_PASTA = "pasta";
  private PastaInfo pasta;

  public static final String JSON_PROPERTY_REMOTE_SOCKET = "remoteSocket";
  private RemoteSocket remoteSocket;

  public static final String JSON_PROPERTY_ROOTLESS_NETWORK_CMD = "rootlessNetworkCmd";
  private String rootlessNetworkCmd;

  public static final String JSON_PROPERTY_RUNTIME_INFO = "runtimeInfo";
  private Map<String, Object> runtimeInfo = new HashMap<>();

  public static final String JSON_PROPERTY_SECURITY = "security";
  private SecurityInfo security;

  public static final String JSON_PROPERTY_SERVICE_IS_REMOTE = "serviceIsRemote";
  private Boolean serviceIsRemote;

  public static final String JSON_PROPERTY_SLIRP4NETNS = "slirp4netns";
  private SlirpInfo slirp4netns;

  public static final String JSON_PROPERTY_SWAP_FREE = "swapFree";
  private Long swapFree;

  public static final String JSON_PROPERTY_SWAP_TOTAL = "swapTotal";
  private Long swapTotal;

  public static final String JSON_PROPERTY_UPTIME = "uptime";
  private String uptime;

  public static final String JSON_PROPERTY_VARIANT = "variant";
  private String variant;

  public HostInfo() { 
  }

  public HostInfo arch(String arch) {
    this.arch = arch;
    return this;
  }

  /**
   * Get arch
   * @return arch
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getArch() {
    return arch;
  }


  @JsonProperty(JSON_PROPERTY_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArch(String arch) {
    this.arch = arch;
  }


  public HostInfo buildahVersion(String buildahVersion) {
    this.buildahVersion = buildahVersion;
    return this;
  }

  /**
   * Get buildahVersion
   * @return buildahVersion
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_BUILDAH_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getBuildahVersion() {
    return buildahVersion;
  }


  @JsonProperty(JSON_PROPERTY_BUILDAH_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildahVersion(String buildahVersion) {
    this.buildahVersion = buildahVersion;
  }


  public HostInfo cgroupControllers(List<String> cgroupControllers) {
    this.cgroupControllers = cgroupControllers;
    return this;
  }

  public HostInfo addCgroupControllersItem(String cgroupControllersItem) {
    if (this.cgroupControllers == null) {
      this.cgroupControllers = new ArrayList<>();
    }
    this.cgroupControllers.add(cgroupControllersItem);
    return this;
  }

  /**
   * Get cgroupControllers
   * @return cgroupControllers
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CGROUP_CONTROLLERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCgroupControllers() {
    return cgroupControllers;
  }


  @JsonProperty(JSON_PROPERTY_CGROUP_CONTROLLERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCgroupControllers(List<String> cgroupControllers) {
    this.cgroupControllers = cgroupControllers;
  }


  public HostInfo cgroupManager(String cgroupManager) {
    this.cgroupManager = cgroupManager;
    return this;
  }

  /**
   * Get cgroupManager
   * @return cgroupManager
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CGROUP_MANAGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCgroupManager() {
    return cgroupManager;
  }


  @JsonProperty(JSON_PROPERTY_CGROUP_MANAGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCgroupManager(String cgroupManager) {
    this.cgroupManager = cgroupManager;
  }


  public HostInfo cgroupVersion(String cgroupVersion) {
    this.cgroupVersion = cgroupVersion;
    return this;
  }

  /**
   * Get cgroupVersion
   * @return cgroupVersion
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CGROUP_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCgroupVersion() {
    return cgroupVersion;
  }


  @JsonProperty(JSON_PROPERTY_CGROUP_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCgroupVersion(String cgroupVersion) {
    this.cgroupVersion = cgroupVersion;
  }


  public HostInfo conmon(ConmonInfo conmon) {
    this.conmon = conmon;
    return this;
  }

  /**
   * Get conmon
   * @return conmon
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONMON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ConmonInfo getConmon() {
    return conmon;
  }


  @JsonProperty(JSON_PROPERTY_CONMON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConmon(ConmonInfo conmon) {
    this.conmon = conmon;
  }


  public HostInfo cpuUtilization(CPUUsage cpuUtilization) {
    this.cpuUtilization = cpuUtilization;
    return this;
  }

  /**
   * Get cpuUtilization
   * @return cpuUtilization
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CPU_UTILIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public CPUUsage getCpuUtilization() {
    return cpuUtilization;
  }


  @JsonProperty(JSON_PROPERTY_CPU_UTILIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpuUtilization(CPUUsage cpuUtilization) {
    this.cpuUtilization = cpuUtilization;
  }


  public HostInfo cpus(Long cpus) {
    this.cpus = cpus;
    return this;
  }

  /**
   * Get cpus
   * @return cpus
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CPUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getCpus() {
    return cpus;
  }


  @JsonProperty(JSON_PROPERTY_CPUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpus(Long cpus) {
    this.cpus = cpus;
  }


  public HostInfo databaseBackend(String databaseBackend) {
    this.databaseBackend = databaseBackend;
    return this;
  }

  /**
   * Get databaseBackend
   * @return databaseBackend
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DATABASE_BACKEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDatabaseBackend() {
    return databaseBackend;
  }


  @JsonProperty(JSON_PROPERTY_DATABASE_BACKEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatabaseBackend(String databaseBackend) {
    this.databaseBackend = databaseBackend;
  }


  public HostInfo distribution(DistributionInfo distribution) {
    this.distribution = distribution;
    return this;
  }

  /**
   * Get distribution
   * @return distribution
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_DISTRIBUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DistributionInfo getDistribution() {
    return distribution;
  }


  @JsonProperty(JSON_PROPERTY_DISTRIBUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistribution(DistributionInfo distribution) {
    this.distribution = distribution;
  }


  public HostInfo eventLogger(String eventLogger) {
    this.eventLogger = eventLogger;
    return this;
  }

  /**
   * Get eventLogger
   * @return eventLogger
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EVENT_LOGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEventLogger() {
    return eventLogger;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_LOGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventLogger(String eventLogger) {
    this.eventLogger = eventLogger;
  }


  public HostInfo freeLocks(Integer freeLocks) {
    this.freeLocks = freeLocks;
    return this;
  }

  /**
   * Get freeLocks
   * @return freeLocks
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_FREE_LOCKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getFreeLocks() {
    return freeLocks;
  }


  @JsonProperty(JSON_PROPERTY_FREE_LOCKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreeLocks(Integer freeLocks) {
    this.freeLocks = freeLocks;
  }


  public HostInfo hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHostname() {
    return hostname;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public HostInfo idMappings(IDMappings idMappings) {
    this.idMappings = idMappings;
    return this;
  }

  /**
   * Get idMappings
   * @return idMappings
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_ID_MAPPINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public IDMappings getIdMappings() {
    return idMappings;
  }


  @JsonProperty(JSON_PROPERTY_ID_MAPPINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdMappings(IDMappings idMappings) {
    this.idMappings = idMappings;
  }


  public HostInfo kernel(String kernel) {
    this.kernel = kernel;
    return this;
  }

  /**
   * Get kernel
   * @return kernel
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_KERNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getKernel() {
    return kernel;
  }


  @JsonProperty(JSON_PROPERTY_KERNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKernel(String kernel) {
    this.kernel = kernel;
  }


  public HostInfo linkmode(String linkmode) {
    this.linkmode = linkmode;
    return this;
  }

  /**
   * Get linkmode
   * @return linkmode
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LINKMODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLinkmode() {
    return linkmode;
  }


  @JsonProperty(JSON_PROPERTY_LINKMODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkmode(String linkmode) {
    this.linkmode = linkmode;
  }


  public HostInfo logDriver(String logDriver) {
    this.logDriver = logDriver;
    return this;
  }

  /**
   * Get logDriver
   * @return logDriver
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LOG_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLogDriver() {
    return logDriver;
  }


  @JsonProperty(JSON_PROPERTY_LOG_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogDriver(String logDriver) {
    this.logDriver = logDriver;
  }


  public HostInfo memFree(Long memFree) {
    this.memFree = memFree;
    return this;
  }

  /**
   * Get memFree
   * @return memFree
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEM_FREE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getMemFree() {
    return memFree;
  }


  @JsonProperty(JSON_PROPERTY_MEM_FREE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemFree(Long memFree) {
    this.memFree = memFree;
  }


  public HostInfo memTotal(Long memTotal) {
    this.memTotal = memTotal;
    return this;
  }

  /**
   * Get memTotal
   * @return memTotal
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEM_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getMemTotal() {
    return memTotal;
  }


  @JsonProperty(JSON_PROPERTY_MEM_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemTotal(Long memTotal) {
    this.memTotal = memTotal;
  }


  public HostInfo networkBackend(String networkBackend) {
    this.networkBackend = networkBackend;
    return this;
  }

  /**
   * Get networkBackend
   * @return networkBackend
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NETWORK_BACKEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNetworkBackend() {
    return networkBackend;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_BACKEND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkBackend(String networkBackend) {
    this.networkBackend = networkBackend;
  }


  public HostInfo networkBackendInfo(NetworkInfo networkBackendInfo) {
    this.networkBackendInfo = networkBackendInfo;
    return this;
  }

  /**
   * Get networkBackendInfo
   * @return networkBackendInfo
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NETWORK_BACKEND_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public NetworkInfo getNetworkBackendInfo() {
    return networkBackendInfo;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_BACKEND_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkBackendInfo(NetworkInfo networkBackendInfo) {
    this.networkBackendInfo = networkBackendInfo;
  }


  public HostInfo ociRuntime(OCIRuntimeInfo ociRuntime) {
    this.ociRuntime = ociRuntime;
    return this;
  }

  /**
   * Get ociRuntime
   * @return ociRuntime
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_OCI_RUNTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OCIRuntimeInfo getOciRuntime() {
    return ociRuntime;
  }


  @JsonProperty(JSON_PROPERTY_OCI_RUNTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOciRuntime(OCIRuntimeInfo ociRuntime) {
    this.ociRuntime = ociRuntime;
  }


  public HostInfo os(String os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOs() {
    return os;
  }


  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOs(String os) {
    this.os = os;
  }


  public HostInfo pasta(PastaInfo pasta) {
    this.pasta = pasta;
    return this;
  }

  /**
   * Get pasta
   * @return pasta
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_PASTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PastaInfo getPasta() {
    return pasta;
  }


  @JsonProperty(JSON_PROPERTY_PASTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasta(PastaInfo pasta) {
    this.pasta = pasta;
  }


  public HostInfo remoteSocket(RemoteSocket remoteSocket) {
    this.remoteSocket = remoteSocket;
    return this;
  }

  /**
   * Get remoteSocket
   * @return remoteSocket
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_REMOTE_SOCKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public RemoteSocket getRemoteSocket() {
    return remoteSocket;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_SOCKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteSocket(RemoteSocket remoteSocket) {
    this.remoteSocket = remoteSocket;
  }


  public HostInfo rootlessNetworkCmd(String rootlessNetworkCmd) {
    this.rootlessNetworkCmd = rootlessNetworkCmd;
    return this;
  }

  /**
   * RootlessNetworkCmd returns the default rootless network command (slirp4netns or pasta)
   * @return rootlessNetworkCmd
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ROOTLESS_NETWORK_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRootlessNetworkCmd() {
    return rootlessNetworkCmd;
  }


  @JsonProperty(JSON_PROPERTY_ROOTLESS_NETWORK_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootlessNetworkCmd(String rootlessNetworkCmd) {
    this.rootlessNetworkCmd = rootlessNetworkCmd;
  }


  public HostInfo runtimeInfo(Map<String, Object> runtimeInfo) {
    this.runtimeInfo = runtimeInfo;
    return this;
  }

  public HostInfo putRuntimeInfoItem(String key, Object runtimeInfoItem) {
    if (this.runtimeInfo == null) {
      this.runtimeInfo = new HashMap<>();
    }
    this.runtimeInfo.put(key, runtimeInfoItem);
    return this;
  }

  /**
   * Get runtimeInfo
   * @return runtimeInfo
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RUNTIME_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, Object> getRuntimeInfo() {
    return runtimeInfo;
  }


  @JsonProperty(JSON_PROPERTY_RUNTIME_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRuntimeInfo(Map<String, Object> runtimeInfo) {
    this.runtimeInfo = runtimeInfo;
  }


  public HostInfo security(SecurityInfo security) {
    this.security = security;
    return this;
  }

  /**
   * Get security
   * @return security
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SecurityInfo getSecurity() {
    return security;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurity(SecurityInfo security) {
    this.security = security;
  }


  public HostInfo serviceIsRemote(Boolean serviceIsRemote) {
    this.serviceIsRemote = serviceIsRemote;
    return this;
  }

  /**
   * ServiceIsRemote is true when the podman/libpod service is remote to the client
   * @return serviceIsRemote
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SERVICE_IS_REMOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getServiceIsRemote() {
    return serviceIsRemote;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_IS_REMOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceIsRemote(Boolean serviceIsRemote) {
    this.serviceIsRemote = serviceIsRemote;
  }


  public HostInfo slirp4netns(SlirpInfo slirp4netns) {
    this.slirp4netns = slirp4netns;
    return this;
  }

  /**
   * Get slirp4netns
   * @return slirp4netns
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_SLIRP4NETNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SlirpInfo getSlirp4netns() {
    return slirp4netns;
  }


  @JsonProperty(JSON_PROPERTY_SLIRP4NETNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlirp4netns(SlirpInfo slirp4netns) {
    this.slirp4netns = slirp4netns;
  }


  public HostInfo swapFree(Long swapFree) {
    this.swapFree = swapFree;
    return this;
  }

  /**
   * Get swapFree
   * @return swapFree
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SWAP_FREE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSwapFree() {
    return swapFree;
  }


  @JsonProperty(JSON_PROPERTY_SWAP_FREE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSwapFree(Long swapFree) {
    this.swapFree = swapFree;
  }


  public HostInfo swapTotal(Long swapTotal) {
    this.swapTotal = swapTotal;
    return this;
  }

  /**
   * Get swapTotal
   * @return swapTotal
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SWAP_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSwapTotal() {
    return swapTotal;
  }


  @JsonProperty(JSON_PROPERTY_SWAP_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSwapTotal(Long swapTotal) {
    this.swapTotal = swapTotal;
  }


  public HostInfo uptime(String uptime) {
    this.uptime = uptime;
    return this;
  }

  /**
   * Get uptime
   * @return uptime
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_UPTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUptime() {
    return uptime;
  }


  @JsonProperty(JSON_PROPERTY_UPTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUptime(String uptime) {
    this.uptime = uptime;
  }


  public HostInfo variant(String variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Get variant
   * @return variant
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VARIANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVariant() {
    return variant;
  }


  @JsonProperty(JSON_PROPERTY_VARIANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariant(String variant) {
    this.variant = variant;
  }


  /**
   * Return true if this HostInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostInfo hostInfo = (HostInfo) o;
    return Objects.equals(this.arch, hostInfo.arch) &&
        Objects.equals(this.buildahVersion, hostInfo.buildahVersion) &&
        Objects.equals(this.cgroupControllers, hostInfo.cgroupControllers) &&
        Objects.equals(this.cgroupManager, hostInfo.cgroupManager) &&
        Objects.equals(this.cgroupVersion, hostInfo.cgroupVersion) &&
        Objects.equals(this.conmon, hostInfo.conmon) &&
        Objects.equals(this.cpuUtilization, hostInfo.cpuUtilization) &&
        Objects.equals(this.cpus, hostInfo.cpus) &&
        Objects.equals(this.databaseBackend, hostInfo.databaseBackend) &&
        Objects.equals(this.distribution, hostInfo.distribution) &&
        Objects.equals(this.eventLogger, hostInfo.eventLogger) &&
        Objects.equals(this.freeLocks, hostInfo.freeLocks) &&
        Objects.equals(this.hostname, hostInfo.hostname) &&
        Objects.equals(this.idMappings, hostInfo.idMappings) &&
        Objects.equals(this.kernel, hostInfo.kernel) &&
        Objects.equals(this.linkmode, hostInfo.linkmode) &&
        Objects.equals(this.logDriver, hostInfo.logDriver) &&
        Objects.equals(this.memFree, hostInfo.memFree) &&
        Objects.equals(this.memTotal, hostInfo.memTotal) &&
        Objects.equals(this.networkBackend, hostInfo.networkBackend) &&
        Objects.equals(this.networkBackendInfo, hostInfo.networkBackendInfo) &&
        Objects.equals(this.ociRuntime, hostInfo.ociRuntime) &&
        Objects.equals(this.os, hostInfo.os) &&
        Objects.equals(this.pasta, hostInfo.pasta) &&
        Objects.equals(this.remoteSocket, hostInfo.remoteSocket) &&
        Objects.equals(this.rootlessNetworkCmd, hostInfo.rootlessNetworkCmd) &&
        Objects.equals(this.runtimeInfo, hostInfo.runtimeInfo) &&
        Objects.equals(this.security, hostInfo.security) &&
        Objects.equals(this.serviceIsRemote, hostInfo.serviceIsRemote) &&
        Objects.equals(this.slirp4netns, hostInfo.slirp4netns) &&
        Objects.equals(this.swapFree, hostInfo.swapFree) &&
        Objects.equals(this.swapTotal, hostInfo.swapTotal) &&
        Objects.equals(this.uptime, hostInfo.uptime) &&
        Objects.equals(this.variant, hostInfo.variant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arch, buildahVersion, cgroupControllers, cgroupManager, cgroupVersion, conmon, cpuUtilization, cpus, databaseBackend, distribution, eventLogger, freeLocks, hostname, idMappings, kernel, linkmode, logDriver, memFree, memTotal, networkBackend, networkBackendInfo, ociRuntime, os, pasta, remoteSocket, rootlessNetworkCmd, runtimeInfo, security, serviceIsRemote, slirp4netns, swapFree, swapTotal, uptime, variant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostInfo {\n");
    sb.append("    arch: ").append(toIndentedString(arch)).append("\n");
    sb.append("    buildahVersion: ").append(toIndentedString(buildahVersion)).append("\n");
    sb.append("    cgroupControllers: ").append(toIndentedString(cgroupControllers)).append("\n");
    sb.append("    cgroupManager: ").append(toIndentedString(cgroupManager)).append("\n");
    sb.append("    cgroupVersion: ").append(toIndentedString(cgroupVersion)).append("\n");
    sb.append("    conmon: ").append(toIndentedString(conmon)).append("\n");
    sb.append("    cpuUtilization: ").append(toIndentedString(cpuUtilization)).append("\n");
    sb.append("    cpus: ").append(toIndentedString(cpus)).append("\n");
    sb.append("    databaseBackend: ").append(toIndentedString(databaseBackend)).append("\n");
    sb.append("    distribution: ").append(toIndentedString(distribution)).append("\n");
    sb.append("    eventLogger: ").append(toIndentedString(eventLogger)).append("\n");
    sb.append("    freeLocks: ").append(toIndentedString(freeLocks)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    idMappings: ").append(toIndentedString(idMappings)).append("\n");
    sb.append("    kernel: ").append(toIndentedString(kernel)).append("\n");
    sb.append("    linkmode: ").append(toIndentedString(linkmode)).append("\n");
    sb.append("    logDriver: ").append(toIndentedString(logDriver)).append("\n");
    sb.append("    memFree: ").append(toIndentedString(memFree)).append("\n");
    sb.append("    memTotal: ").append(toIndentedString(memTotal)).append("\n");
    sb.append("    networkBackend: ").append(toIndentedString(networkBackend)).append("\n");
    sb.append("    networkBackendInfo: ").append(toIndentedString(networkBackendInfo)).append("\n");
    sb.append("    ociRuntime: ").append(toIndentedString(ociRuntime)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    pasta: ").append(toIndentedString(pasta)).append("\n");
    sb.append("    remoteSocket: ").append(toIndentedString(remoteSocket)).append("\n");
    sb.append("    rootlessNetworkCmd: ").append(toIndentedString(rootlessNetworkCmd)).append("\n");
    sb.append("    runtimeInfo: ").append(toIndentedString(runtimeInfo)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    serviceIsRemote: ").append(toIndentedString(serviceIsRemote)).append("\n");
    sb.append("    slirp4netns: ").append(toIndentedString(slirp4netns)).append("\n");
    sb.append("    swapFree: ").append(toIndentedString(swapFree)).append("\n");
    sb.append("    swapTotal: ").append(toIndentedString(swapTotal)).append("\n");
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `arch` to the URL query string
    if (getArch() != null) {
      joiner.add(String.format("%sarch%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getArch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `buildahVersion` to the URL query string
    if (getBuildahVersion() != null) {
      joiner.add(String.format("%sbuildahVersion%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBuildahVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cgroupControllers` to the URL query string
    if (getCgroupControllers() != null) {
      for (int i = 0; i < getCgroupControllers().size(); i++) {
        joiner.add(String.format("%scgroupControllers%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCgroupControllers().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `cgroupManager` to the URL query string
    if (getCgroupManager() != null) {
      joiner.add(String.format("%scgroupManager%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCgroupManager()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cgroupVersion` to the URL query string
    if (getCgroupVersion() != null) {
      joiner.add(String.format("%scgroupVersion%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCgroupVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `conmon` to the URL query string
    if (getConmon() != null) {
      joiner.add(getConmon().toUrlQueryString(prefix + "conmon" + suffix));
    }

    // add `cpuUtilization` to the URL query string
    if (getCpuUtilization() != null) {
      joiner.add(getCpuUtilization().toUrlQueryString(prefix + "cpuUtilization" + suffix));
    }

    // add `cpus` to the URL query string
    if (getCpus() != null) {
      joiner.add(String.format("%scpus%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `databaseBackend` to the URL query string
    if (getDatabaseBackend() != null) {
      joiner.add(String.format("%sdatabaseBackend%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDatabaseBackend()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `distribution` to the URL query string
    if (getDistribution() != null) {
      joiner.add(getDistribution().toUrlQueryString(prefix + "distribution" + suffix));
    }

    // add `eventLogger` to the URL query string
    if (getEventLogger() != null) {
      joiner.add(String.format("%seventLogger%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEventLogger()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `freeLocks` to the URL query string
    if (getFreeLocks() != null) {
      joiner.add(String.format("%sfreeLocks%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getFreeLocks()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hostname` to the URL query string
    if (getHostname() != null) {
      joiner.add(String.format("%shostname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHostname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `idMappings` to the URL query string
    if (getIdMappings() != null) {
      joiner.add(getIdMappings().toUrlQueryString(prefix + "idMappings" + suffix));
    }

    // add `kernel` to the URL query string
    if (getKernel() != null) {
      joiner.add(String.format("%skernel%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getKernel()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `linkmode` to the URL query string
    if (getLinkmode() != null) {
      joiner.add(String.format("%slinkmode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLinkmode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `logDriver` to the URL query string
    if (getLogDriver() != null) {
      joiner.add(String.format("%slogDriver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLogDriver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `memFree` to the URL query string
    if (getMemFree() != null) {
      joiner.add(String.format("%smemFree%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMemFree()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `memTotal` to the URL query string
    if (getMemTotal() != null) {
      joiner.add(String.format("%smemTotal%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMemTotal()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `networkBackend` to the URL query string
    if (getNetworkBackend() != null) {
      joiner.add(String.format("%snetworkBackend%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNetworkBackend()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `networkBackendInfo` to the URL query string
    if (getNetworkBackendInfo() != null) {
      joiner.add(getNetworkBackendInfo().toUrlQueryString(prefix + "networkBackendInfo" + suffix));
    }

    // add `ociRuntime` to the URL query string
    if (getOciRuntime() != null) {
      joiner.add(getOciRuntime().toUrlQueryString(prefix + "ociRuntime" + suffix));
    }

    // add `os` to the URL query string
    if (getOs() != null) {
      joiner.add(String.format("%sos%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `pasta` to the URL query string
    if (getPasta() != null) {
      joiner.add(getPasta().toUrlQueryString(prefix + "pasta" + suffix));
    }

    // add `remoteSocket` to the URL query string
    if (getRemoteSocket() != null) {
      joiner.add(getRemoteSocket().toUrlQueryString(prefix + "remoteSocket" + suffix));
    }

    // add `rootlessNetworkCmd` to the URL query string
    if (getRootlessNetworkCmd() != null) {
      joiner.add(String.format("%srootlessNetworkCmd%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRootlessNetworkCmd()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `runtimeInfo` to the URL query string
    if (getRuntimeInfo() != null) {
      for (String _key : getRuntimeInfo().keySet()) {
        joiner.add(String.format("%sruntimeInfo%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getRuntimeInfo().get(_key), URLEncoder.encode(ApiClient.valueToString(getRuntimeInfo().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `security` to the URL query string
    if (getSecurity() != null) {
      joiner.add(getSecurity().toUrlQueryString(prefix + "security" + suffix));
    }

    // add `serviceIsRemote` to the URL query string
    if (getServiceIsRemote() != null) {
      joiner.add(String.format("%sserviceIsRemote%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getServiceIsRemote()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `slirp4netns` to the URL query string
    if (getSlirp4netns() != null) {
      joiner.add(getSlirp4netns().toUrlQueryString(prefix + "slirp4netns" + suffix));
    }

    // add `swapFree` to the URL query string
    if (getSwapFree() != null) {
      joiner.add(String.format("%sswapFree%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSwapFree()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `swapTotal` to the URL query string
    if (getSwapTotal() != null) {
      joiner.add(String.format("%sswapTotal%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSwapTotal()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `uptime` to the URL query string
    if (getUptime() != null) {
      joiner.add(String.format("%suptime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUptime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `variant` to the URL query string
    if (getVariant() != null) {
      joiner.add(String.format("%svariant%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getVariant()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

