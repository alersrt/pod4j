/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.alersrt.pod4j.openapi.ApiClient;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;
/**
 * ImageConfig
 */
@JsonPropertyOrder({
  ImageConfig.JSON_PROPERTY_ARGS_ESCAPED,
  ImageConfig.JSON_PROPERTY_CMD,
  ImageConfig.JSON_PROPERTY_ENTRYPOINT,
  ImageConfig.JSON_PROPERTY_ENV,
  ImageConfig.JSON_PROPERTY_EXPOSED_PORTS,
  ImageConfig.JSON_PROPERTY_LABELS,
  ImageConfig.JSON_PROPERTY_STOP_SIGNAL,
  ImageConfig.JSON_PROPERTY_USER,
  ImageConfig.JSON_PROPERTY_VOLUMES,
  ImageConfig.JSON_PROPERTY_WORKING_DIR
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ImageConfig {
  public static final String JSON_PROPERTY_ARGS_ESCAPED = "ArgsEscaped";
  private Boolean argsEscaped;

  public static final String JSON_PROPERTY_CMD = "Cmd";
  private List<String> cmd = new ArrayList<>();

  public static final String JSON_PROPERTY_ENTRYPOINT = "Entrypoint";
  private List<String> entrypoint = new ArrayList<>();

  public static final String JSON_PROPERTY_ENV = "Env";
  private List<String> env = new ArrayList<>();

  public static final String JSON_PROPERTY_EXPOSED_PORTS = "ExposedPorts";
  private Map<String, Object> exposedPorts = new HashMap<>();

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_STOP_SIGNAL = "StopSignal";
  private String stopSignal;

  public static final String JSON_PROPERTY_USER = "User";
  private String user;

  public static final String JSON_PROPERTY_VOLUMES = "Volumes";
  private Map<String, Object> volumes = new HashMap<>();

  public static final String JSON_PROPERTY_WORKING_DIR = "WorkingDir";
  private String workingDir;

  public ImageConfig() { 
  }

  public ImageConfig argsEscaped(Boolean argsEscaped) {
    this.argsEscaped = argsEscaped;
    return this;
  }

  /**
   * ArgsEscaped  Deprecated: This field is present only for legacy compatibility with Docker and should not be used by new image builders.  It is used by Docker for Windows images to indicate that the &#x60;Entrypoint&#x60; or &#x60;Cmd&#x60; or both, contains only a single element array, that is a pre-escaped, and combined into a single string &#x60;CommandLine&#x60;. If &#x60;true&#x60; the value in &#x60;Entrypoint&#x60; or &#x60;Cmd&#x60; should be used as-is to avoid double escaping. https://github.com/opencontainers/image-spec/pull/892
   * @return argsEscaped
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ARGS_ESCAPED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getArgsEscaped() {
    return argsEscaped;
  }


  @JsonProperty(JSON_PROPERTY_ARGS_ESCAPED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArgsEscaped(Boolean argsEscaped) {
    this.argsEscaped = argsEscaped;
  }


  public ImageConfig cmd(List<String> cmd) {
    this.cmd = cmd;
    return this;
  }

  public ImageConfig addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

  /**
   * Cmd defines the default arguments to the entrypoint of the container.
   * @return cmd
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCmd() {
    return cmd;
  }


  @JsonProperty(JSON_PROPERTY_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public ImageConfig entrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
    return this;
  }

  public ImageConfig addEntrypointItem(String entrypointItem) {
    if (this.entrypoint == null) {
      this.entrypoint = new ArrayList<>();
    }
    this.entrypoint.add(entrypointItem);
    return this;
  }

  /**
   * Entrypoint defines a list of arguments to use as the command to execute when the container starts.
   * @return entrypoint
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENTRYPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getEntrypoint() {
    return entrypoint;
  }


  @JsonProperty(JSON_PROPERTY_ENTRYPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
  }


  public ImageConfig env(List<String> env) {
    this.env = env;
    return this;
  }

  public ImageConfig addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * Env is a list of environment variables to be used in a container.
   * @return env
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getEnv() {
    return env;
  }


  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnv(List<String> env) {
    this.env = env;
  }


  public ImageConfig exposedPorts(Map<String, Object> exposedPorts) {
    this.exposedPorts = exposedPorts;
    return this;
  }

  public ImageConfig putExposedPortsItem(String key, Object exposedPortsItem) {
    if (this.exposedPorts == null) {
      this.exposedPorts = new HashMap<>();
    }
    this.exposedPorts.put(key, exposedPortsItem);
    return this;
  }

  /**
   * ExposedPorts a set of ports to expose from a container running this image.
   * @return exposedPorts
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXPOSED_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, Object> getExposedPorts() {
    return exposedPorts;
  }


  @JsonProperty(JSON_PROPERTY_EXPOSED_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExposedPorts(Map<String, Object> exposedPorts) {
    this.exposedPorts = exposedPorts;
  }


  public ImageConfig labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ImageConfig putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels contains arbitrary metadata for the container.
   * @return labels
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ImageConfig stopSignal(String stopSignal) {
    this.stopSignal = stopSignal;
    return this;
  }

  /**
   * StopSignal contains the system call signal that will be sent to the container to exit.
   * @return stopSignal
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STOP_SIGNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStopSignal() {
    return stopSignal;
  }


  @JsonProperty(JSON_PROPERTY_STOP_SIGNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStopSignal(String stopSignal) {
    this.stopSignal = stopSignal;
  }


  public ImageConfig user(String user) {
    this.user = user;
    return this;
  }

  /**
   * User defines the username or UID which the process in the container should run as.
   * @return user
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public ImageConfig volumes(Map<String, Object> volumes) {
    this.volumes = volumes;
    return this;
  }

  public ImageConfig putVolumesItem(String key, Object volumesItem) {
    if (this.volumes == null) {
      this.volumes = new HashMap<>();
    }
    this.volumes.put(key, volumesItem);
    return this;
  }

  /**
   * Volumes is a set of directories describing where the process is likely write data specific to a container instance.
   * @return volumes
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, Object> getVolumes() {
    return volumes;
  }


  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumes(Map<String, Object> volumes) {
    this.volumes = volumes;
  }


  public ImageConfig workingDir(String workingDir) {
    this.workingDir = workingDir;
    return this;
  }

  /**
   * WorkingDir sets the current working directory of the entrypoint process in the container.
   * @return workingDir
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getWorkingDir() {
    return workingDir;
  }


  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkingDir(String workingDir) {
    this.workingDir = workingDir;
  }


  /**
   * Return true if this ImageConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageConfig imageConfig = (ImageConfig) o;
    return Objects.equals(this.argsEscaped, imageConfig.argsEscaped) &&
        Objects.equals(this.cmd, imageConfig.cmd) &&
        Objects.equals(this.entrypoint, imageConfig.entrypoint) &&
        Objects.equals(this.env, imageConfig.env) &&
        Objects.equals(this.exposedPorts, imageConfig.exposedPorts) &&
        Objects.equals(this.labels, imageConfig.labels) &&
        Objects.equals(this.stopSignal, imageConfig.stopSignal) &&
        Objects.equals(this.user, imageConfig.user) &&
        Objects.equals(this.volumes, imageConfig.volumes) &&
        Objects.equals(this.workingDir, imageConfig.workingDir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(argsEscaped, cmd, entrypoint, env, exposedPorts, labels, stopSignal, user, volumes, workingDir);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageConfig {\n");
    sb.append("    argsEscaped: ").append(toIndentedString(argsEscaped)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    entrypoint: ").append(toIndentedString(entrypoint)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    exposedPorts: ").append(toIndentedString(exposedPorts)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    stopSignal: ").append(toIndentedString(stopSignal)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    workingDir: ").append(toIndentedString(workingDir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ArgsEscaped` to the URL query string
    if (getArgsEscaped() != null) {
      joiner.add(String.format("%sArgsEscaped%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getArgsEscaped()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Cmd` to the URL query string
    if (getCmd() != null) {
      for (int i = 0; i < getCmd().size(); i++) {
        joiner.add(String.format("%sCmd%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCmd().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Entrypoint` to the URL query string
    if (getEntrypoint() != null) {
      for (int i = 0; i < getEntrypoint().size(); i++) {
        joiner.add(String.format("%sEntrypoint%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getEntrypoint().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Env` to the URL query string
    if (getEnv() != null) {
      for (int i = 0; i < getEnv().size(); i++) {
        joiner.add(String.format("%sEnv%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getEnv().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `ExposedPorts` to the URL query string
    if (getExposedPorts() != null) {
      for (String _key : getExposedPorts().keySet()) {
        joiner.add(String.format("%sExposedPorts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getExposedPorts().get(_key), URLEncoder.encode(ApiClient.valueToString(getExposedPorts().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `StopSignal` to the URL query string
    if (getStopSignal() != null) {
      joiner.add(String.format("%sStopSignal%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStopSignal()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `User` to the URL query string
    if (getUser() != null) {
      joiner.add(String.format("%sUser%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Volumes` to the URL query string
    if (getVolumes() != null) {
      for (String _key : getVolumes().keySet()) {
        joiner.add(String.format("%sVolumes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getVolumes().get(_key), URLEncoder.encode(ApiClient.valueToString(getVolumes().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `WorkingDir` to the URL query string
    if (getWorkingDir() != null) {
      joiner.add(String.format("%sWorkingDir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWorkingDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

