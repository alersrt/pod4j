/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.DriverData;
import io.github.alersrt.pod4j.openapi.model.History;
import io.github.alersrt.pod4j.openapi.model.ImageConfig;
import io.github.alersrt.pod4j.openapi.model.RootFS;
import io.github.alersrt.pod4j.openapi.model.Schema2HealthConfig;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ImageData
 */
@JsonPropertyOrder({
  ImageData.JSON_PROPERTY_ANNOTATIONS,
  ImageData.JSON_PROPERTY_ARCHITECTURE,
  ImageData.JSON_PROPERTY_AUTHOR,
  ImageData.JSON_PROPERTY_COMMENT,
  ImageData.JSON_PROPERTY_CONFIG,
  ImageData.JSON_PROPERTY_CREATED,
  ImageData.JSON_PROPERTY_DIGEST,
  ImageData.JSON_PROPERTY_GRAPH_DRIVER,
  ImageData.JSON_PROPERTY_HEALTHCHECK,
  ImageData.JSON_PROPERTY_HISTORY,
  ImageData.JSON_PROPERTY_ID,
  ImageData.JSON_PROPERTY_LABELS,
  ImageData.JSON_PROPERTY_MANIFEST_TYPE,
  ImageData.JSON_PROPERTY_NAMES_HISTORY,
  ImageData.JSON_PROPERTY_OS,
  ImageData.JSON_PROPERTY_PARENT,
  ImageData.JSON_PROPERTY_REPO_DIGESTS,
  ImageData.JSON_PROPERTY_REPO_TAGS,
  ImageData.JSON_PROPERTY_ROOT_F_S,
  ImageData.JSON_PROPERTY_SIZE,
  ImageData.JSON_PROPERTY_USER,
  ImageData.JSON_PROPERTY_VERSION,
  ImageData.JSON_PROPERTY_VIRTUAL_SIZE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ImageData {
  public static final String JSON_PROPERTY_ANNOTATIONS = "Annotations";
  private Map<String, String> annotations = new HashMap<>();

  public static final String JSON_PROPERTY_ARCHITECTURE = "Architecture";
  private String architecture;

  public static final String JSON_PROPERTY_AUTHOR = "Author";
  private String author;

  public static final String JSON_PROPERTY_COMMENT = "Comment";
  private String comment;

  public static final String JSON_PROPERTY_CONFIG = "Config";
  private ImageConfig config;

  public static final String JSON_PROPERTY_CREATED = "Created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_DIGEST = "Digest";
  private String digest;

  public static final String JSON_PROPERTY_GRAPH_DRIVER = "GraphDriver";
  private DriverData graphDriver;

  public static final String JSON_PROPERTY_HEALTHCHECK = "Healthcheck";
  private Schema2HealthConfig healthcheck;

  public static final String JSON_PROPERTY_HISTORY = "History";
  private List<@Valid History> history = new ArrayList<>();

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_MANIFEST_TYPE = "ManifestType";
  private String manifestType;

  public static final String JSON_PROPERTY_NAMES_HISTORY = "NamesHistory";
  private List<String> namesHistory = new ArrayList<>();

  public static final String JSON_PROPERTY_OS = "Os";
  private String os;

  public static final String JSON_PROPERTY_PARENT = "Parent";
  private String parent;

  public static final String JSON_PROPERTY_REPO_DIGESTS = "RepoDigests";
  private List<String> repoDigests = new ArrayList<>();

  public static final String JSON_PROPERTY_REPO_TAGS = "RepoTags";
  private List<String> repoTags = new ArrayList<>();

  public static final String JSON_PROPERTY_ROOT_F_S = "RootFS";
  private RootFS rootFS;

  public static final String JSON_PROPERTY_SIZE = "Size";
  private Long size;

  public static final String JSON_PROPERTY_USER = "User";
  private String user;

  public static final String JSON_PROPERTY_VERSION = "Version";
  private String version;

  public static final String JSON_PROPERTY_VIRTUAL_SIZE = "VirtualSize";
  private Long virtualSize;

  public ImageData() { 
  }

  public ImageData annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public ImageData putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getAnnotations() {
    return annotations;
  }


  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public ImageData architecture(String architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Get architecture
   * @return architecture
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ARCHITECTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getArchitecture() {
    return architecture;
  }


  @JsonProperty(JSON_PROPERTY_ARCHITECTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArchitecture(String architecture) {
    this.architecture = architecture;
  }


  public ImageData author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAuthor() {
    return author;
  }


  @JsonProperty(JSON_PROPERTY_AUTHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthor(String author) {
    this.author = author;
  }


  public ImageData comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }


  public ImageData config(ImageConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ImageConfig getConfig() {
    return config;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfig(ImageConfig config) {
    this.config = config;
  }


  public ImageData created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ImageData digest(String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * The following is an example of the contents of Digest types:  sha256:7173b809ca12ec5dee4506cd86be934c4596dd234ee82c0662eac04a8c2c71dc  This allows to abstract the digest behind this type and work only in those terms.
   * @return digest
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DIGEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDigest() {
    return digest;
  }


  @JsonProperty(JSON_PROPERTY_DIGEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDigest(String digest) {
    this.digest = digest;
  }


  public ImageData graphDriver(DriverData graphDriver) {
    this.graphDriver = graphDriver;
    return this;
  }

  /**
   * Get graphDriver
   * @return graphDriver
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_GRAPH_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DriverData getGraphDriver() {
    return graphDriver;
  }


  @JsonProperty(JSON_PROPERTY_GRAPH_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphDriver(DriverData graphDriver) {
    this.graphDriver = graphDriver;
  }


  public ImageData healthcheck(Schema2HealthConfig healthcheck) {
    this.healthcheck = healthcheck;
    return this;
  }

  /**
   * Get healthcheck
   * @return healthcheck
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_HEALTHCHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Schema2HealthConfig getHealthcheck() {
    return healthcheck;
  }


  @JsonProperty(JSON_PROPERTY_HEALTHCHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthcheck(Schema2HealthConfig healthcheck) {
    this.healthcheck = healthcheck;
  }


  public ImageData history(List<@Valid History> history) {
    this.history = history;
    return this;
  }

  public ImageData addHistoryItem(History historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

  /**
   * Get history
   * @return history
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid History> getHistory() {
    return history;
  }


  @JsonProperty(JSON_PROPERTY_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHistory(List<@Valid History> history) {
    this.history = history;
  }


  public ImageData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public ImageData labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ImageData putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ImageData manifestType(String manifestType) {
    this.manifestType = manifestType;
    return this;
  }

  /**
   * Get manifestType
   * @return manifestType
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MANIFEST_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getManifestType() {
    return manifestType;
  }


  @JsonProperty(JSON_PROPERTY_MANIFEST_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManifestType(String manifestType) {
    this.manifestType = manifestType;
  }


  public ImageData namesHistory(List<String> namesHistory) {
    this.namesHistory = namesHistory;
    return this;
  }

  public ImageData addNamesHistoryItem(String namesHistoryItem) {
    if (this.namesHistory == null) {
      this.namesHistory = new ArrayList<>();
    }
    this.namesHistory.add(namesHistoryItem);
    return this;
  }

  /**
   * Get namesHistory
   * @return namesHistory
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAMES_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getNamesHistory() {
    return namesHistory;
  }


  @JsonProperty(JSON_PROPERTY_NAMES_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamesHistory(List<String> namesHistory) {
    this.namesHistory = namesHistory;
  }


  public ImageData os(String os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOs() {
    return os;
  }


  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOs(String os) {
    this.os = os;
  }


  public ImageData parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getParent() {
    return parent;
  }


  @JsonProperty(JSON_PROPERTY_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParent(String parent) {
    this.parent = parent;
  }


  public ImageData repoDigests(List<String> repoDigests) {
    this.repoDigests = repoDigests;
    return this;
  }

  public ImageData addRepoDigestsItem(String repoDigestsItem) {
    if (this.repoDigests == null) {
      this.repoDigests = new ArrayList<>();
    }
    this.repoDigests.add(repoDigestsItem);
    return this;
  }

  /**
   * Get repoDigests
   * @return repoDigests
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_REPO_DIGESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getRepoDigests() {
    return repoDigests;
  }


  @JsonProperty(JSON_PROPERTY_REPO_DIGESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepoDigests(List<String> repoDigests) {
    this.repoDigests = repoDigests;
  }


  public ImageData repoTags(List<String> repoTags) {
    this.repoTags = repoTags;
    return this;
  }

  public ImageData addRepoTagsItem(String repoTagsItem) {
    if (this.repoTags == null) {
      this.repoTags = new ArrayList<>();
    }
    this.repoTags.add(repoTagsItem);
    return this;
  }

  /**
   * Get repoTags
   * @return repoTags
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_REPO_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getRepoTags() {
    return repoTags;
  }


  @JsonProperty(JSON_PROPERTY_REPO_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepoTags(List<String> repoTags) {
    this.repoTags = repoTags;
  }


  public ImageData rootFS(RootFS rootFS) {
    this.rootFS = rootFS;
    return this;
  }

  /**
   * Get rootFS
   * @return rootFS
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_ROOT_F_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public RootFS getRootFS() {
    return rootFS;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_F_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootFS(RootFS rootFS) {
    this.rootFS = rootFS;
  }


  public ImageData size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public ImageData user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public ImageData version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  public ImageData virtualSize(Long virtualSize) {
    this.virtualSize = virtualSize;
    return this;
  }

  /**
   * Get virtualSize
   * @return virtualSize
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VIRTUAL_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getVirtualSize() {
    return virtualSize;
  }


  @JsonProperty(JSON_PROPERTY_VIRTUAL_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVirtualSize(Long virtualSize) {
    this.virtualSize = virtualSize;
  }


  /**
   * Return true if this ImageData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageData imageData = (ImageData) o;
    return Objects.equals(this.annotations, imageData.annotations) &&
        Objects.equals(this.architecture, imageData.architecture) &&
        Objects.equals(this.author, imageData.author) &&
        Objects.equals(this.comment, imageData.comment) &&
        Objects.equals(this.config, imageData.config) &&
        Objects.equals(this.created, imageData.created) &&
        Objects.equals(this.digest, imageData.digest) &&
        Objects.equals(this.graphDriver, imageData.graphDriver) &&
        Objects.equals(this.healthcheck, imageData.healthcheck) &&
        Objects.equals(this.history, imageData.history) &&
        Objects.equals(this.id, imageData.id) &&
        Objects.equals(this.labels, imageData.labels) &&
        Objects.equals(this.manifestType, imageData.manifestType) &&
        Objects.equals(this.namesHistory, imageData.namesHistory) &&
        Objects.equals(this.os, imageData.os) &&
        Objects.equals(this.parent, imageData.parent) &&
        Objects.equals(this.repoDigests, imageData.repoDigests) &&
        Objects.equals(this.repoTags, imageData.repoTags) &&
        Objects.equals(this.rootFS, imageData.rootFS) &&
        Objects.equals(this.size, imageData.size) &&
        Objects.equals(this.user, imageData.user) &&
        Objects.equals(this.version, imageData.version) &&
        Objects.equals(this.virtualSize, imageData.virtualSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, architecture, author, comment, config, created, digest, graphDriver, healthcheck, history, id, labels, manifestType, namesHistory, os, parent, repoDigests, repoTags, rootFS, size, user, version, virtualSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageData {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    graphDriver: ").append(toIndentedString(graphDriver)).append("\n");
    sb.append("    healthcheck: ").append(toIndentedString(healthcheck)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    manifestType: ").append(toIndentedString(manifestType)).append("\n");
    sb.append("    namesHistory: ").append(toIndentedString(namesHistory)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    repoDigests: ").append(toIndentedString(repoDigests)).append("\n");
    sb.append("    repoTags: ").append(toIndentedString(repoTags)).append("\n");
    sb.append("    rootFS: ").append(toIndentedString(rootFS)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    virtualSize: ").append(toIndentedString(virtualSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Annotations` to the URL query string
    if (getAnnotations() != null) {
      for (String _key : getAnnotations().keySet()) {
        joiner.add(String.format("%sAnnotations%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getAnnotations().get(_key), URLEncoder.encode(ApiClient.valueToString(getAnnotations().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Architecture` to the URL query string
    if (getArchitecture() != null) {
      joiner.add(String.format("%sArchitecture%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getArchitecture()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Author` to the URL query string
    if (getAuthor() != null) {
      joiner.add(String.format("%sAuthor%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAuthor()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Comment` to the URL query string
    if (getComment() != null) {
      joiner.add(String.format("%sComment%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getComment()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Config` to the URL query string
    if (getConfig() != null) {
      joiner.add(getConfig().toUrlQueryString(prefix + "Config" + suffix));
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Digest` to the URL query string
    if (getDigest() != null) {
      joiner.add(String.format("%sDigest%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDigest()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `GraphDriver` to the URL query string
    if (getGraphDriver() != null) {
      joiner.add(getGraphDriver().toUrlQueryString(prefix + "GraphDriver" + suffix));
    }

    // add `Healthcheck` to the URL query string
    if (getHealthcheck() != null) {
      joiner.add(getHealthcheck().toUrlQueryString(prefix + "Healthcheck" + suffix));
    }

    // add `History` to the URL query string
    if (getHistory() != null) {
      for (int i = 0; i < getHistory().size(); i++) {
        if (getHistory().get(i) != null) {
          joiner.add(getHistory().get(i).toUrlQueryString(String.format("%sHistory%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `ManifestType` to the URL query string
    if (getManifestType() != null) {
      joiner.add(String.format("%sManifestType%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getManifestType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `NamesHistory` to the URL query string
    if (getNamesHistory() != null) {
      for (int i = 0; i < getNamesHistory().size(); i++) {
        joiner.add(String.format("%sNamesHistory%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getNamesHistory().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Os` to the URL query string
    if (getOs() != null) {
      joiner.add(String.format("%sOs%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Parent` to the URL query string
    if (getParent() != null) {
      joiner.add(String.format("%sParent%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getParent()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `RepoDigests` to the URL query string
    if (getRepoDigests() != null) {
      for (int i = 0; i < getRepoDigests().size(); i++) {
        joiner.add(String.format("%sRepoDigests%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getRepoDigests().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `RepoTags` to the URL query string
    if (getRepoTags() != null) {
      for (int i = 0; i < getRepoTags().size(); i++) {
        joiner.add(String.format("%sRepoTags%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getRepoTags().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `RootFS` to the URL query string
    if (getRootFS() != null) {
      joiner.add(getRootFS().toUrlQueryString(prefix + "RootFS" + suffix));
    }

    // add `Size` to the URL query string
    if (getSize() != null) {
      joiner.add(String.format("%sSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `User` to the URL query string
    if (getUser() != null) {
      joiner.add(String.format("%sUser%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sVersion%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `VirtualSize` to the URL query string
    if (getVirtualSize() != null) {
      joiner.add(String.format("%sVirtualSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getVirtualSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

