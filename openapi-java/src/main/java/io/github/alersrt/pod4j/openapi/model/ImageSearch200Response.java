/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ImageSearch200Response
 */
@JsonPropertyOrder({
  ImageSearch200Response.JSON_PROPERTY_AUTOMATED,
  ImageSearch200Response.JSON_PROPERTY_DESCRIPTION,
  ImageSearch200Response.JSON_PROPERTY_INDEX,
  ImageSearch200Response.JSON_PROPERTY_NAME,
  ImageSearch200Response.JSON_PROPERTY_OFFICIAL,
  ImageSearch200Response.JSON_PROPERTY_STARS,
  ImageSearch200Response.JSON_PROPERTY_TAG
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ImageSearch200Response {
  public static final String JSON_PROPERTY_AUTOMATED = "Automated";
  private String automated;

  public static final String JSON_PROPERTY_DESCRIPTION = "Description";
  private String description;

  public static final String JSON_PROPERTY_INDEX = "Index";
  private String index;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_OFFICIAL = "Official";
  private String official;

  public static final String JSON_PROPERTY_STARS = "Stars";
  private Long stars;

  public static final String JSON_PROPERTY_TAG = "Tag";
  private String tag;

  public ImageSearch200Response() { 
  }

  public ImageSearch200Response automated(String automated) {
    this.automated = automated;
    return this;
  }

  /**
   * Automated indicates if the image was created by an automated build.
   * @return automated
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_AUTOMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAutomated() {
    return automated;
  }


  @JsonProperty(JSON_PROPERTY_AUTOMATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutomated(String automated) {
    this.automated = automated;
  }


  public ImageSearch200Response description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the image.
   * @return description
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ImageSearch200Response index(String index) {
    this.index = index;
    return this;
  }

  /**
   * Index is the image index
   * @return index
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndex(String index) {
    this.index = index;
  }


  public ImageSearch200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name is the canonical name of the image
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ImageSearch200Response official(String official) {
    this.official = official;
    return this;
  }

  /**
   * Official indicates if it&#39;s an official image.
   * @return official
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OFFICIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOfficial() {
    return official;
  }


  @JsonProperty(JSON_PROPERTY_OFFICIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOfficial(String official) {
    this.official = official;
  }


  public ImageSearch200Response stars(Long stars) {
    this.stars = stars;
    return this;
  }

  /**
   * Stars is the number of stars of the image.
   * @return stars
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STARS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getStars() {
    return stars;
  }


  @JsonProperty(JSON_PROPERTY_STARS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStars(Long stars) {
    this.stars = stars;
  }


  public ImageSearch200Response tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Tag is the image tag
   * @return tag
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTag() {
    return tag;
  }


  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTag(String tag) {
    this.tag = tag;
  }


  /**
   * Return true if this ImageSearch_200_response object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageSearch200Response imageSearch200Response = (ImageSearch200Response) o;
    return Objects.equals(this.automated, imageSearch200Response.automated) &&
        Objects.equals(this.description, imageSearch200Response.description) &&
        Objects.equals(this.index, imageSearch200Response.index) &&
        Objects.equals(this.name, imageSearch200Response.name) &&
        Objects.equals(this.official, imageSearch200Response.official) &&
        Objects.equals(this.stars, imageSearch200Response.stars) &&
        Objects.equals(this.tag, imageSearch200Response.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automated, description, index, name, official, stars, tag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageSearch200Response {\n");
    sb.append("    automated: ").append(toIndentedString(automated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    official: ").append(toIndentedString(official)).append("\n");
    sb.append("    stars: ").append(toIndentedString(stars)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Automated` to the URL query string
    if (getAutomated() != null) {
      joiner.add(String.format("%sAutomated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAutomated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sDescription%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Index` to the URL query string
    if (getIndex() != null) {
      joiner.add(String.format("%sIndex%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIndex()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Official` to the URL query string
    if (getOfficial() != null) {
      joiner.add(String.format("%sOfficial%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOfficial()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Stars` to the URL query string
    if (getStars() != null) {
      joiner.add(String.format("%sStars%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStars()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Tag` to the URL query string
    if (getTag() != null) {
      joiner.add(String.format("%sTag%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTag()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

