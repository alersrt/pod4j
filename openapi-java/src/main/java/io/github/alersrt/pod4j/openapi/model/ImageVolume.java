/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ImageVolume is a volume based on a container image.  The container image is first mounted on the host and is then bind-mounted into the container.  An ImageVolume is always mounted read-only.
 */
@JsonPropertyOrder({
  ImageVolume.JSON_PROPERTY_DESTINATION,
  ImageVolume.JSON_PROPERTY_READ_WRITE,
  ImageVolume.JSON_PROPERTY_SOURCE,
  ImageVolume.JSON_PROPERTY_SUB_PATH
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ImageVolume {
  public static final String JSON_PROPERTY_DESTINATION = "Destination";
  private String destination;

  public static final String JSON_PROPERTY_READ_WRITE = "ReadWrite";
  private Boolean readWrite;

  public static final String JSON_PROPERTY_SOURCE = "Source";
  private String source;

  public static final String JSON_PROPERTY_SUB_PATH = "subPath";
  private String subPath;

  public ImageVolume() { 
  }

  public ImageVolume destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Destination is the absolute path of the mount in the container.
   * @return destination
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDestination() {
    return destination;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestination(String destination) {
    this.destination = destination;
  }


  public ImageVolume readWrite(Boolean readWrite) {
    this.readWrite = readWrite;
    return this;
  }

  /**
   * ReadWrite sets the volume writable.
   * @return readWrite
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_READ_WRITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getReadWrite() {
    return readWrite;
  }


  @JsonProperty(JSON_PROPERTY_READ_WRITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadWrite(Boolean readWrite) {
    this.readWrite = readWrite;
  }


  public ImageVolume source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Source is the source of the image volume.  The image can be referred to by name and by ID.
   * @return source
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(String source) {
    this.source = source;
  }


  public ImageVolume subPath(String subPath) {
    this.subPath = subPath;
    return this;
  }

  /**
   * SubPath mounts a particular path within the image. If empty, the whole image is mounted.
   * @return subPath
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SUB_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSubPath() {
    return subPath;
  }


  @JsonProperty(JSON_PROPERTY_SUB_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubPath(String subPath) {
    this.subPath = subPath;
  }


  /**
   * Return true if this ImageVolume object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageVolume imageVolume = (ImageVolume) o;
    return Objects.equals(this.destination, imageVolume.destination) &&
        Objects.equals(this.readWrite, imageVolume.readWrite) &&
        Objects.equals(this.source, imageVolume.source) &&
        Objects.equals(this.subPath, imageVolume.subPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, readWrite, source, subPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageVolume {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    readWrite: ").append(toIndentedString(readWrite)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Destination` to the URL query string
    if (getDestination() != null) {
      joiner.add(String.format("%sDestination%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDestination()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ReadWrite` to the URL query string
    if (getReadWrite() != null) {
      joiner.add(String.format("%sReadWrite%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReadWrite()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Source` to the URL query string
    if (getSource() != null) {
      joiner.add(String.format("%sSource%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSource()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `subPath` to the URL query string
    if (getSubPath() != null) {
      joiner.add(String.format("%ssubPath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSubPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

