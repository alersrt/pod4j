/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.Topology;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * Info contains information about the Volume as a whole as provided by the CSI storage plugin.
 */
@JsonPropertyOrder({
  Info.JSON_PROPERTY_ACCESSIBLE_TOPOLOGY,
  Info.JSON_PROPERTY_CAPACITY_BYTES,
  Info.JSON_PROPERTY_VOLUME_CONTEXT,
  Info.JSON_PROPERTY_VOLUME_I_D
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class Info {
  public static final String JSON_PROPERTY_ACCESSIBLE_TOPOLOGY = "AccessibleTopology";
  private List<@Valid Topology> accessibleTopology = new ArrayList<>();

  public static final String JSON_PROPERTY_CAPACITY_BYTES = "CapacityBytes";
  private Long capacityBytes;

  public static final String JSON_PROPERTY_VOLUME_CONTEXT = "VolumeContext";
  private Map<String, String> volumeContext = new HashMap<>();

  public static final String JSON_PROPERTY_VOLUME_I_D = "VolumeID";
  private String volumeID;

  public Info() { 
  }

  public Info accessibleTopology(List<@Valid Topology> accessibleTopology) {
    this.accessibleTopology = accessibleTopology;
    return this;
  }

  public Info addAccessibleTopologyItem(Topology accessibleTopologyItem) {
    if (this.accessibleTopology == null) {
      this.accessibleTopology = new ArrayList<>();
    }
    this.accessibleTopology.add(accessibleTopologyItem);
    return this;
  }

  /**
   * AccessibleTopology is the topology this volume is actually accessible from.
   * @return accessibleTopology
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_ACCESSIBLE_TOPOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid Topology> getAccessibleTopology() {
    return accessibleTopology;
  }


  @JsonProperty(JSON_PROPERTY_ACCESSIBLE_TOPOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccessibleTopology(List<@Valid Topology> accessibleTopology) {
    this.accessibleTopology = accessibleTopology;
  }


  public Info capacityBytes(Long capacityBytes) {
    this.capacityBytes = capacityBytes;
    return this;
  }

  /**
   * CapacityBytes is the capacity of the volume in bytes. A value of 0 indicates that the capacity is unknown.
   * @return capacityBytes
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CAPACITY_BYTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getCapacityBytes() {
    return capacityBytes;
  }


  @JsonProperty(JSON_PROPERTY_CAPACITY_BYTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapacityBytes(Long capacityBytes) {
    this.capacityBytes = capacityBytes;
  }


  public Info volumeContext(Map<String, String> volumeContext) {
    this.volumeContext = volumeContext;
    return this;
  }

  public Info putVolumeContextItem(String key, String volumeContextItem) {
    if (this.volumeContext == null) {
      this.volumeContext = new HashMap<>();
    }
    this.volumeContext.put(key, volumeContextItem);
    return this;
  }

  /**
   * VolumeContext is the context originating from the CSI storage plugin when the Volume is created.
   * @return volumeContext
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VOLUME_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getVolumeContext() {
    return volumeContext;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumeContext(Map<String, String> volumeContext) {
    this.volumeContext = volumeContext;
  }


  public Info volumeID(String volumeID) {
    this.volumeID = volumeID;
    return this;
  }

  /**
   * VolumeID is the ID of the Volume as seen by the CSI storage plugin. This is distinct from the Volume&#39;s Swarm ID, which is the ID used by all of the Docker Engine to refer to the Volume. If this field is blank, then the Volume has not been successfully created yet.
   * @return volumeID
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VOLUME_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVolumeID() {
    return volumeID;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumeID(String volumeID) {
    this.volumeID = volumeID;
  }


  /**
   * Return true if this Info object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Info info = (Info) o;
    return Objects.equals(this.accessibleTopology, info.accessibleTopology) &&
        Objects.equals(this.capacityBytes, info.capacityBytes) &&
        Objects.equals(this.volumeContext, info.volumeContext) &&
        Objects.equals(this.volumeID, info.volumeID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibleTopology, capacityBytes, volumeContext, volumeID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Info {\n");
    sb.append("    accessibleTopology: ").append(toIndentedString(accessibleTopology)).append("\n");
    sb.append("    capacityBytes: ").append(toIndentedString(capacityBytes)).append("\n");
    sb.append("    volumeContext: ").append(toIndentedString(volumeContext)).append("\n");
    sb.append("    volumeID: ").append(toIndentedString(volumeID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `AccessibleTopology` to the URL query string
    if (getAccessibleTopology() != null) {
      for (int i = 0; i < getAccessibleTopology().size(); i++) {
        if (getAccessibleTopology().get(i) != null) {
          joiner.add(getAccessibleTopology().get(i).toUrlQueryString(String.format("%sAccessibleTopology%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `CapacityBytes` to the URL query string
    if (getCapacityBytes() != null) {
      joiner.add(String.format("%sCapacityBytes%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCapacityBytes()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `VolumeContext` to the URL query string
    if (getVolumeContext() != null) {
      for (String _key : getVolumeContext().keySet()) {
        joiner.add(String.format("%sVolumeContext%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getVolumeContext().get(_key), URLEncoder.encode(ApiClient.valueToString(getVolumeContext().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `VolumeID` to the URL query string
    if (getVolumeID() != null) {
      joiner.add(String.format("%sVolumeID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getVolumeID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

