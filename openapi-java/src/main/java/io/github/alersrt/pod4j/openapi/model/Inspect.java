/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ConfigReference;
import io.github.alersrt.pod4j.openapi.model.EndpointResource;
import io.github.alersrt.pod4j.openapi.model.IPAM;
import io.github.alersrt.pod4j.openapi.model.PeerInfo;
import io.github.alersrt.pod4j.openapi.model.ServiceInfo;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * Inspect
 */
@JsonPropertyOrder({
  Inspect.JSON_PROPERTY_ATTACHABLE,
  Inspect.JSON_PROPERTY_CONFIG_FROM,
  Inspect.JSON_PROPERTY_CONFIG_ONLY,
  Inspect.JSON_PROPERTY_CONTAINERS,
  Inspect.JSON_PROPERTY_CREATED,
  Inspect.JSON_PROPERTY_DRIVER,
  Inspect.JSON_PROPERTY_ENABLE_I_PV6,
  Inspect.JSON_PROPERTY_I_P_A_M,
  Inspect.JSON_PROPERTY_ID,
  Inspect.JSON_PROPERTY_INGRESS,
  Inspect.JSON_PROPERTY_INTERNAL,
  Inspect.JSON_PROPERTY_LABELS,
  Inspect.JSON_PROPERTY_NAME,
  Inspect.JSON_PROPERTY_OPTIONS,
  Inspect.JSON_PROPERTY_PEERS,
  Inspect.JSON_PROPERTY_SCOPE,
  Inspect.JSON_PROPERTY_SERVICES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class Inspect {
  public static final String JSON_PROPERTY_ATTACHABLE = "Attachable";
  private Boolean attachable;

  public static final String JSON_PROPERTY_CONFIG_FROM = "ConfigFrom";
  private ConfigReference configFrom;

  public static final String JSON_PROPERTY_CONFIG_ONLY = "ConfigOnly";
  private Boolean configOnly;

  public static final String JSON_PROPERTY_CONTAINERS = "Containers";
  private Map<String, EndpointResource> containers = new HashMap<>();

  public static final String JSON_PROPERTY_CREATED = "Created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_DRIVER = "Driver";
  private String driver;

  public static final String JSON_PROPERTY_ENABLE_I_PV6 = "EnableIPv6";
  private Boolean enableIPv6;

  public static final String JSON_PROPERTY_I_P_A_M = "IPAM";
  private IPAM ipam;

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_INGRESS = "Ingress";
  private Boolean ingress;

  public static final String JSON_PROPERTY_INTERNAL = "Internal";
  private Boolean internal;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_OPTIONS = "Options";
  private Map<String, String> options = new HashMap<>();

  public static final String JSON_PROPERTY_PEERS = "Peers";
  private List<@Valid PeerInfo> peers = new ArrayList<>();

  public static final String JSON_PROPERTY_SCOPE = "Scope";
  private String scope;

  public static final String JSON_PROPERTY_SERVICES = "Services";
  private Map<String, ServiceInfo> services = new HashMap<>();

  public Inspect() { 
  }

  public Inspect attachable(Boolean attachable) {
    this.attachable = attachable;
    return this;
  }

  /**
   * Get attachable
   * @return attachable
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachable() {
    return attachable;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachable(Boolean attachable) {
    this.attachable = attachable;
  }


  public Inspect configFrom(ConfigReference configFrom) {
    this.configFrom = configFrom;
    return this;
  }

  /**
   * Get configFrom
   * @return configFrom
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONFIG_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ConfigReference getConfigFrom() {
    return configFrom;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigFrom(ConfigReference configFrom) {
    this.configFrom = configFrom;
  }


  public Inspect configOnly(Boolean configOnly) {
    this.configOnly = configOnly;
    return this;
  }

  /**
   * Get configOnly
   * @return configOnly
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONFIG_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getConfigOnly() {
    return configOnly;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigOnly(Boolean configOnly) {
    this.configOnly = configOnly;
  }


  public Inspect containers(Map<String, EndpointResource> containers) {
    this.containers = containers;
    return this;
  }

  public Inspect putContainersItem(String key, EndpointResource containersItem) {
    if (this.containers == null) {
      this.containers = new HashMap<>();
    }
    this.containers.put(key, containersItem);
    return this;
  }

  /**
   * Get containers
   * @return containers
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, EndpointResource> getContainers() {
    return containers;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainers(Map<String, EndpointResource> containers) {
    this.containers = containers;
  }


  public Inspect created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Inspect driver(String driver) {
    this.driver = driver;
    return this;
  }

  /**
   * Get driver
   * @return driver
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDriver() {
    return driver;
  }


  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDriver(String driver) {
    this.driver = driver;
  }


  public Inspect enableIPv6(Boolean enableIPv6) {
    this.enableIPv6 = enableIPv6;
    return this;
  }

  /**
   * Get enableIPv6
   * @return enableIPv6
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENABLE_I_PV6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableIPv6() {
    return enableIPv6;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_I_PV6)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIPv6(Boolean enableIPv6) {
    this.enableIPv6 = enableIPv6;
  }


  public Inspect ipam(IPAM ipam) {
    this.ipam = ipam;
    return this;
  }

  /**
   * Get ipam
   * @return ipam
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_I_P_A_M)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public IPAM getIPAM() {
    return ipam;
  }


  @JsonProperty(JSON_PROPERTY_I_P_A_M)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIPAM(IPAM ipam) {
    this.ipam = ipam;
  }


  public Inspect id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public Inspect ingress(Boolean ingress) {
    this.ingress = ingress;
    return this;
  }

  /**
   * Get ingress
   * @return ingress
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIngress() {
    return ingress;
  }


  @JsonProperty(JSON_PROPERTY_INGRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIngress(Boolean ingress) {
    this.ingress = ingress;
  }


  public Inspect internal(Boolean internal) {
    this.internal = internal;
    return this;
  }

  /**
   * Get internal
   * @return internal
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INTERNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getInternal() {
    return internal;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternal(Boolean internal) {
    this.internal = internal;
  }


  public Inspect labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Inspect putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Inspect name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Inspect options(Map<String, String> options) {
    this.options = options;
    return this;
  }

  public Inspect putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(Map<String, String> options) {
    this.options = options;
  }


  public Inspect peers(List<@Valid PeerInfo> peers) {
    this.peers = peers;
    return this;
  }

  public Inspect addPeersItem(PeerInfo peersItem) {
    if (this.peers == null) {
      this.peers = new ArrayList<>();
    }
    this.peers.add(peersItem);
    return this;
  }

  /**
   * Get peers
   * @return peers
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_PEERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid PeerInfo> getPeers() {
    return peers;
  }


  @JsonProperty(JSON_PROPERTY_PEERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPeers(List<@Valid PeerInfo> peers) {
    this.peers = peers;
  }


  public Inspect scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScope(String scope) {
    this.scope = scope;
  }


  public Inspect services(Map<String, ServiceInfo> services) {
    this.services = services;
    return this;
  }

  public Inspect putServicesItem(String key, ServiceInfo servicesItem) {
    if (this.services == null) {
      this.services = new HashMap<>();
    }
    this.services.put(key, servicesItem);
    return this;
  }

  /**
   * Get services
   * @return services
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_SERVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, ServiceInfo> getServices() {
    return services;
  }


  @JsonProperty(JSON_PROPERTY_SERVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServices(Map<String, ServiceInfo> services) {
    this.services = services;
  }


  /**
   * Return true if this Inspect object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Inspect inspect = (Inspect) o;
    return Objects.equals(this.attachable, inspect.attachable) &&
        Objects.equals(this.configFrom, inspect.configFrom) &&
        Objects.equals(this.configOnly, inspect.configOnly) &&
        Objects.equals(this.containers, inspect.containers) &&
        Objects.equals(this.created, inspect.created) &&
        Objects.equals(this.driver, inspect.driver) &&
        Objects.equals(this.enableIPv6, inspect.enableIPv6) &&
        Objects.equals(this.ipam, inspect.ipam) &&
        Objects.equals(this.id, inspect.id) &&
        Objects.equals(this.ingress, inspect.ingress) &&
        Objects.equals(this.internal, inspect.internal) &&
        Objects.equals(this.labels, inspect.labels) &&
        Objects.equals(this.name, inspect.name) &&
        Objects.equals(this.options, inspect.options) &&
        Objects.equals(this.peers, inspect.peers) &&
        Objects.equals(this.scope, inspect.scope) &&
        Objects.equals(this.services, inspect.services);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachable, configFrom, configOnly, containers, created, driver, enableIPv6, ipam, id, ingress, internal, labels, name, options, peers, scope, services);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Inspect {\n");
    sb.append("    attachable: ").append(toIndentedString(attachable)).append("\n");
    sb.append("    configFrom: ").append(toIndentedString(configFrom)).append("\n");
    sb.append("    configOnly: ").append(toIndentedString(configOnly)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    enableIPv6: ").append(toIndentedString(enableIPv6)).append("\n");
    sb.append("    ipam: ").append(toIndentedString(ipam)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ingress: ").append(toIndentedString(ingress)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    peers: ").append(toIndentedString(peers)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Attachable` to the URL query string
    if (getAttachable() != null) {
      joiner.add(String.format("%sAttachable%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ConfigFrom` to the URL query string
    if (getConfigFrom() != null) {
      joiner.add(getConfigFrom().toUrlQueryString(prefix + "ConfigFrom" + suffix));
    }

    // add `ConfigOnly` to the URL query string
    if (getConfigOnly() != null) {
      joiner.add(String.format("%sConfigOnly%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConfigOnly()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Containers` to the URL query string
    if (getContainers() != null) {
      for (String _key : getContainers().keySet()) {
        if (getContainers().get(_key) != null) {
          joiner.add(getContainers().get(_key).toUrlQueryString(String.format("%sContainers%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Driver` to the URL query string
    if (getDriver() != null) {
      joiner.add(String.format("%sDriver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDriver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `EnableIPv6` to the URL query string
    if (getEnableIPv6() != null) {
      joiner.add(String.format("%sEnableIPv6%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEnableIPv6()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `IPAM` to the URL query string
    if (getIPAM() != null) {
      joiner.add(getIPAM().toUrlQueryString(prefix + "IPAM" + suffix));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Ingress` to the URL query string
    if (getIngress() != null) {
      joiner.add(String.format("%sIngress%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIngress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Internal` to the URL query string
    if (getInternal() != null) {
      joiner.add(String.format("%sInternal%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getInternal()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Options` to the URL query string
    if (getOptions() != null) {
      for (String _key : getOptions().keySet()) {
        joiner.add(String.format("%sOptions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getOptions().get(_key), URLEncoder.encode(ApiClient.valueToString(getOptions().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Peers` to the URL query string
    if (getPeers() != null) {
      for (int i = 0; i < getPeers().size(); i++) {
        if (getPeers().get(i) != null) {
          joiner.add(getPeers().get(i).toUrlQueryString(String.format("%sPeers%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Scope` to the URL query string
    if (getScope() != null) {
      joiner.add(String.format("%sScope%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getScope()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Services` to the URL query string
    if (getServices() != null) {
      for (String _key : getServices().keySet()) {
        if (getServices().get(_key) != null) {
          joiner.add(getServices().get(_key).toUrlQueryString(String.format("%sServices%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

