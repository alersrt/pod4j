/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.InspectSecret;
import io.github.alersrt.pod4j.openapi.model.Schema2HealthConfig;
import io.github.alersrt.pod4j.openapi.model.StartupHealthCheck;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * InspectContainerConfig holds further data about how a container was initially configured.
 */
@JsonPropertyOrder({
  InspectContainerConfig.JSON_PROPERTY_ANNOTATIONS,
  InspectContainerConfig.JSON_PROPERTY_ATTACH_STDERR,
  InspectContainerConfig.JSON_PROPERTY_ATTACH_STDIN,
  InspectContainerConfig.JSON_PROPERTY_ATTACH_STDOUT,
  InspectContainerConfig.JSON_PROPERTY_CHROOT_DIRS,
  InspectContainerConfig.JSON_PROPERTY_CMD,
  InspectContainerConfig.JSON_PROPERTY_CREATE_COMMAND,
  InspectContainerConfig.JSON_PROPERTY_DOMAINNAME,
  InspectContainerConfig.JSON_PROPERTY_ENTRYPOINT,
  InspectContainerConfig.JSON_PROPERTY_ENV,
  InspectContainerConfig.JSON_PROPERTY_EXPOSED_PORTS,
  InspectContainerConfig.JSON_PROPERTY_HEALTH_LOG_DESTINATION,
  InspectContainerConfig.JSON_PROPERTY_HEALTHCHECK,
  InspectContainerConfig.JSON_PROPERTY_HEALTHCHECK_MAX_LOG_COUNT,
  InspectContainerConfig.JSON_PROPERTY_HEALTHCHECK_MAX_LOG_SIZE,
  InspectContainerConfig.JSON_PROPERTY_HEALTHCHECK_ON_FAILURE_ACTION,
  InspectContainerConfig.JSON_PROPERTY_HOSTNAME,
  InspectContainerConfig.JSON_PROPERTY_IMAGE,
  InspectContainerConfig.JSON_PROPERTY_LABELS,
  InspectContainerConfig.JSON_PROPERTY_ON_BUILD,
  InspectContainerConfig.JSON_PROPERTY_OPEN_STDIN,
  InspectContainerConfig.JSON_PROPERTY_PASSWD,
  InspectContainerConfig.JSON_PROPERTY_SECRETS,
  InspectContainerConfig.JSON_PROPERTY_STARTUP_HEALTH_CHECK,
  InspectContainerConfig.JSON_PROPERTY_STDIN_ONCE,
  InspectContainerConfig.JSON_PROPERTY_STOP_SIGNAL,
  InspectContainerConfig.JSON_PROPERTY_STOP_TIMEOUT,
  InspectContainerConfig.JSON_PROPERTY_SYSTEMD_MODE,
  InspectContainerConfig.JSON_PROPERTY_TIMEOUT,
  InspectContainerConfig.JSON_PROPERTY_TIMEZONE,
  InspectContainerConfig.JSON_PROPERTY_TTY,
  InspectContainerConfig.JSON_PROPERTY_UMASK,
  InspectContainerConfig.JSON_PROPERTY_USER,
  InspectContainerConfig.JSON_PROPERTY_VOLUMES,
  InspectContainerConfig.JSON_PROPERTY_WORKING_DIR,
  InspectContainerConfig.JSON_PROPERTY_SD_NOTIFY_MODE,
  InspectContainerConfig.JSON_PROPERTY_SD_NOTIFY_SOCKET
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class InspectContainerConfig {
  public static final String JSON_PROPERTY_ANNOTATIONS = "Annotations";
  private Map<String, String> annotations = new HashMap<>();

  public static final String JSON_PROPERTY_ATTACH_STDERR = "AttachStderr";
  private Boolean attachStderr;

  public static final String JSON_PROPERTY_ATTACH_STDIN = "AttachStdin";
  private Boolean attachStdin;

  public static final String JSON_PROPERTY_ATTACH_STDOUT = "AttachStdout";
  private Boolean attachStdout;

  public static final String JSON_PROPERTY_CHROOT_DIRS = "ChrootDirs";
  private List<String> chrootDirs = new ArrayList<>();

  public static final String JSON_PROPERTY_CMD = "Cmd";
  private List<String> cmd = new ArrayList<>();

  public static final String JSON_PROPERTY_CREATE_COMMAND = "CreateCommand";
  private List<String> createCommand = new ArrayList<>();

  public static final String JSON_PROPERTY_DOMAINNAME = "Domainname";
  private String domainname;

  public static final String JSON_PROPERTY_ENTRYPOINT = "Entrypoint";
  private List<String> entrypoint = new ArrayList<>();

  public static final String JSON_PROPERTY_ENV = "Env";
  private List<String> env = new ArrayList<>();

  public static final String JSON_PROPERTY_EXPOSED_PORTS = "ExposedPorts";
  private Map<String, Object> exposedPorts = new HashMap<>();

  public static final String JSON_PROPERTY_HEALTH_LOG_DESTINATION = "HealthLogDestination";
  private String healthLogDestination;

  public static final String JSON_PROPERTY_HEALTHCHECK = "Healthcheck";
  private Schema2HealthConfig healthcheck;

  public static final String JSON_PROPERTY_HEALTHCHECK_MAX_LOG_COUNT = "HealthcheckMaxLogCount";
  private Integer healthcheckMaxLogCount;

  public static final String JSON_PROPERTY_HEALTHCHECK_MAX_LOG_SIZE = "HealthcheckMaxLogSize";
  private Integer healthcheckMaxLogSize;

  public static final String JSON_PROPERTY_HEALTHCHECK_ON_FAILURE_ACTION = "HealthcheckOnFailureAction";
  private String healthcheckOnFailureAction;

  public static final String JSON_PROPERTY_HOSTNAME = "Hostname";
  private String hostname;

  public static final String JSON_PROPERTY_IMAGE = "Image";
  private String image;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_ON_BUILD = "OnBuild";
  private String onBuild;

  public static final String JSON_PROPERTY_OPEN_STDIN = "OpenStdin";
  private Boolean openStdin;

  public static final String JSON_PROPERTY_PASSWD = "Passwd";
  private Boolean passwd;

  public static final String JSON_PROPERTY_SECRETS = "Secrets";
  private List<@Valid InspectSecret> secrets = new ArrayList<>();

  public static final String JSON_PROPERTY_STARTUP_HEALTH_CHECK = "StartupHealthCheck";
  private StartupHealthCheck startupHealthCheck;

  public static final String JSON_PROPERTY_STDIN_ONCE = "StdinOnce";
  private Boolean stdinOnce;

  public static final String JSON_PROPERTY_STOP_SIGNAL = "StopSignal";
  private String stopSignal;

  public static final String JSON_PROPERTY_STOP_TIMEOUT = "StopTimeout";
  private Integer stopTimeout;

  public static final String JSON_PROPERTY_SYSTEMD_MODE = "SystemdMode";
  private Boolean systemdMode;

  public static final String JSON_PROPERTY_TIMEOUT = "Timeout";
  private Integer timeout;

  public static final String JSON_PROPERTY_TIMEZONE = "Timezone";
  private String timezone;

  public static final String JSON_PROPERTY_TTY = "Tty";
  private Boolean tty;

  public static final String JSON_PROPERTY_UMASK = "Umask";
  private String umask;

  public static final String JSON_PROPERTY_USER = "User";
  private String user;

  public static final String JSON_PROPERTY_VOLUMES = "Volumes";
  private Map<String, Object> volumes = new HashMap<>();

  public static final String JSON_PROPERTY_WORKING_DIR = "WorkingDir";
  private String workingDir;

  public static final String JSON_PROPERTY_SD_NOTIFY_MODE = "sdNotifyMode";
  private String sdNotifyMode;

  public static final String JSON_PROPERTY_SD_NOTIFY_SOCKET = "sdNotifySocket";
  private String sdNotifySocket;

  public InspectContainerConfig() { 
  }

  public InspectContainerConfig annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public InspectContainerConfig putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Container annotations
   * @return annotations
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getAnnotations() {
    return annotations;
  }


  @JsonProperty(JSON_PROPERTY_ANNOTATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public InspectContainerConfig attachStderr(Boolean attachStderr) {
    this.attachStderr = attachStderr;
    return this;
  }

  /**
   * Unused, at present
   * @return attachStderr
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACH_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachStderr() {
    return attachStderr;
  }


  @JsonProperty(JSON_PROPERTY_ATTACH_STDERR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachStderr(Boolean attachStderr) {
    this.attachStderr = attachStderr;
  }


  public InspectContainerConfig attachStdin(Boolean attachStdin) {
    this.attachStdin = attachStdin;
    return this;
  }

  /**
   * Unused, at present
   * @return attachStdin
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACH_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachStdin() {
    return attachStdin;
  }


  @JsonProperty(JSON_PROPERTY_ATTACH_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachStdin(Boolean attachStdin) {
    this.attachStdin = attachStdin;
  }


  public InspectContainerConfig attachStdout(Boolean attachStdout) {
    this.attachStdout = attachStdout;
    return this;
  }

  /**
   * Unused, at present
   * @return attachStdout
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ATTACH_STDOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAttachStdout() {
    return attachStdout;
  }


  @JsonProperty(JSON_PROPERTY_ATTACH_STDOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachStdout(Boolean attachStdout) {
    this.attachStdout = attachStdout;
  }


  public InspectContainerConfig chrootDirs(List<String> chrootDirs) {
    this.chrootDirs = chrootDirs;
    return this;
  }

  public InspectContainerConfig addChrootDirsItem(String chrootDirsItem) {
    if (this.chrootDirs == null) {
      this.chrootDirs = new ArrayList<>();
    }
    this.chrootDirs.add(chrootDirsItem);
    return this;
  }

  /**
   * ChrootDirs is an additional set of directories that need to be treated as root directories. Standard bind mounts will be mounted into paths relative to these directories.
   * @return chrootDirs
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CHROOT_DIRS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getChrootDirs() {
    return chrootDirs;
  }


  @JsonProperty(JSON_PROPERTY_CHROOT_DIRS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChrootDirs(List<String> chrootDirs) {
    this.chrootDirs = chrootDirs;
  }


  public InspectContainerConfig cmd(List<String> cmd) {
    this.cmd = cmd;
    return this;
  }

  public InspectContainerConfig addCmdItem(String cmdItem) {
    if (this.cmd == null) {
      this.cmd = new ArrayList<>();
    }
    this.cmd.add(cmdItem);
    return this;
  }

  /**
   * Container command
   * @return cmd
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCmd() {
    return cmd;
  }


  @JsonProperty(JSON_PROPERTY_CMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCmd(List<String> cmd) {
    this.cmd = cmd;
  }


  public InspectContainerConfig createCommand(List<String> createCommand) {
    this.createCommand = createCommand;
    return this;
  }

  public InspectContainerConfig addCreateCommandItem(String createCommandItem) {
    if (this.createCommand == null) {
      this.createCommand = new ArrayList<>();
    }
    this.createCommand.add(createCommandItem);
    return this;
  }

  /**
   * CreateCommand is the full command plus arguments of the process the container has been created with.
   * @return createCommand
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CREATE_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCreateCommand() {
    return createCommand;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateCommand(List<String> createCommand) {
    this.createCommand = createCommand;
  }


  public InspectContainerConfig domainname(String domainname) {
    this.domainname = domainname;
    return this;
  }

  /**
   * Container domain name - unused at present
   * @return domainname
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DOMAINNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDomainname() {
    return domainname;
  }


  @JsonProperty(JSON_PROPERTY_DOMAINNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomainname(String domainname) {
    this.domainname = domainname;
  }


  public InspectContainerConfig entrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
    return this;
  }

  public InspectContainerConfig addEntrypointItem(String entrypointItem) {
    if (this.entrypoint == null) {
      this.entrypoint = new ArrayList<>();
    }
    this.entrypoint.add(entrypointItem);
    return this;
  }

  /**
   * Container entrypoint
   * @return entrypoint
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENTRYPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getEntrypoint() {
    return entrypoint;
  }


  @JsonProperty(JSON_PROPERTY_ENTRYPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
  }


  public InspectContainerConfig env(List<String> env) {
    this.env = env;
    return this;
  }

  public InspectContainerConfig addEnvItem(String envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * Container environment variables
   * @return env
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getEnv() {
    return env;
  }


  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnv(List<String> env) {
    this.env = env;
  }


  public InspectContainerConfig exposedPorts(Map<String, Object> exposedPorts) {
    this.exposedPorts = exposedPorts;
    return this;
  }

  public InspectContainerConfig putExposedPortsItem(String key, Object exposedPortsItem) {
    if (this.exposedPorts == null) {
      this.exposedPorts = new HashMap<>();
    }
    this.exposedPorts.put(key, exposedPortsItem);
    return this;
  }

  /**
   * ExposedPorts includes ports the container has exposed.
   * @return exposedPorts
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXPOSED_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, Object> getExposedPorts() {
    return exposedPorts;
  }


  @JsonProperty(JSON_PROPERTY_EXPOSED_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExposedPorts(Map<String, Object> exposedPorts) {
    this.exposedPorts = exposedPorts;
  }


  public InspectContainerConfig healthLogDestination(String healthLogDestination) {
    this.healthLogDestination = healthLogDestination;
    return this;
  }

  /**
   * HealthLogDestination defines the destination where the log is stored
   * @return healthLogDestination
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HEALTH_LOG_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHealthLogDestination() {
    return healthLogDestination;
  }


  @JsonProperty(JSON_PROPERTY_HEALTH_LOG_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthLogDestination(String healthLogDestination) {
    this.healthLogDestination = healthLogDestination;
  }


  public InspectContainerConfig healthcheck(Schema2HealthConfig healthcheck) {
    this.healthcheck = healthcheck;
    return this;
  }

  /**
   * Get healthcheck
   * @return healthcheck
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_HEALTHCHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Schema2HealthConfig getHealthcheck() {
    return healthcheck;
  }


  @JsonProperty(JSON_PROPERTY_HEALTHCHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthcheck(Schema2HealthConfig healthcheck) {
    this.healthcheck = healthcheck;
  }


  public InspectContainerConfig healthcheckMaxLogCount(Integer healthcheckMaxLogCount) {
    this.healthcheckMaxLogCount = healthcheckMaxLogCount;
    return this;
  }

  /**
   * HealthMaxLogCount is maximum number of attempts in the HealthCheck log file. (&#39;0&#39; value means an infinite number of attempts in the log file)
   * @return healthcheckMaxLogCount
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HEALTHCHECK_MAX_LOG_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getHealthcheckMaxLogCount() {
    return healthcheckMaxLogCount;
  }


  @JsonProperty(JSON_PROPERTY_HEALTHCHECK_MAX_LOG_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthcheckMaxLogCount(Integer healthcheckMaxLogCount) {
    this.healthcheckMaxLogCount = healthcheckMaxLogCount;
  }


  public InspectContainerConfig healthcheckMaxLogSize(Integer healthcheckMaxLogSize) {
    this.healthcheckMaxLogSize = healthcheckMaxLogSize;
    return this;
  }

  /**
   * HealthMaxLogSize is the maximum length in characters of stored HealthCheck log (\&quot;0\&quot; value means an infinite log length)
   * @return healthcheckMaxLogSize
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HEALTHCHECK_MAX_LOG_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getHealthcheckMaxLogSize() {
    return healthcheckMaxLogSize;
  }


  @JsonProperty(JSON_PROPERTY_HEALTHCHECK_MAX_LOG_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthcheckMaxLogSize(Integer healthcheckMaxLogSize) {
    this.healthcheckMaxLogSize = healthcheckMaxLogSize;
  }


  public InspectContainerConfig healthcheckOnFailureAction(String healthcheckOnFailureAction) {
    this.healthcheckOnFailureAction = healthcheckOnFailureAction;
    return this;
  }

  /**
   * HealthcheckOnFailureAction defines an action to take once the container turns unhealthy.
   * @return healthcheckOnFailureAction
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HEALTHCHECK_ON_FAILURE_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHealthcheckOnFailureAction() {
    return healthcheckOnFailureAction;
  }


  @JsonProperty(JSON_PROPERTY_HEALTHCHECK_ON_FAILURE_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealthcheckOnFailureAction(String healthcheckOnFailureAction) {
    this.healthcheckOnFailureAction = healthcheckOnFailureAction;
  }


  public InspectContainerConfig hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Container hostname
   * @return hostname
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHostname() {
    return hostname;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public InspectContainerConfig image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Container image
   * @return image
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public InspectContainerConfig labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public InspectContainerConfig putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Container labels
   * @return labels
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public InspectContainerConfig onBuild(String onBuild) {
    this.onBuild = onBuild;
    return this;
  }

  /**
   * On-build arguments - presently unused. More of Buildah&#39;s domain.
   * @return onBuild
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ON_BUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOnBuild() {
    return onBuild;
  }


  @JsonProperty(JSON_PROPERTY_ON_BUILD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnBuild(String onBuild) {
    this.onBuild = onBuild;
  }


  public InspectContainerConfig openStdin(Boolean openStdin) {
    this.openStdin = openStdin;
    return this;
  }

  /**
   * Whether the container leaves STDIN open
   * @return openStdin
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OPEN_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getOpenStdin() {
    return openStdin;
  }


  @JsonProperty(JSON_PROPERTY_OPEN_STDIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOpenStdin(Boolean openStdin) {
    this.openStdin = openStdin;
  }


  public InspectContainerConfig passwd(Boolean passwd) {
    this.passwd = passwd;
    return this;
  }

  /**
   * Passwd determines whether or not podman can add entries to /etc/passwd and /etc/group
   * @return passwd
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PASSWD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getPasswd() {
    return passwd;
  }


  @JsonProperty(JSON_PROPERTY_PASSWD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasswd(Boolean passwd) {
    this.passwd = passwd;
  }


  public InspectContainerConfig secrets(List<@Valid InspectSecret> secrets) {
    this.secrets = secrets;
    return this;
  }

  public InspectContainerConfig addSecretsItem(InspectSecret secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

  /**
   * Secrets are the secrets mounted in the container
   * @return secrets
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid InspectSecret> getSecrets() {
    return secrets;
  }


  @JsonProperty(JSON_PROPERTY_SECRETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecrets(List<@Valid InspectSecret> secrets) {
    this.secrets = secrets;
  }


  public InspectContainerConfig startupHealthCheck(StartupHealthCheck startupHealthCheck) {
    this.startupHealthCheck = startupHealthCheck;
    return this;
  }

  /**
   * Get startupHealthCheck
   * @return startupHealthCheck
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_STARTUP_HEALTH_CHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public StartupHealthCheck getStartupHealthCheck() {
    return startupHealthCheck;
  }


  @JsonProperty(JSON_PROPERTY_STARTUP_HEALTH_CHECK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartupHealthCheck(StartupHealthCheck startupHealthCheck) {
    this.startupHealthCheck = startupHealthCheck;
  }


  public InspectContainerConfig stdinOnce(Boolean stdinOnce) {
    this.stdinOnce = stdinOnce;
    return this;
  }

  /**
   * Whether STDIN is only left open once. Presently not supported by Podman, unused.
   * @return stdinOnce
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STDIN_ONCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getStdinOnce() {
    return stdinOnce;
  }


  @JsonProperty(JSON_PROPERTY_STDIN_ONCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStdinOnce(Boolean stdinOnce) {
    this.stdinOnce = stdinOnce;
  }


  public InspectContainerConfig stopSignal(String stopSignal) {
    this.stopSignal = stopSignal;
    return this;
  }

  /**
   * Container stop signal
   * @return stopSignal
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STOP_SIGNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStopSignal() {
    return stopSignal;
  }


  @JsonProperty(JSON_PROPERTY_STOP_SIGNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStopSignal(String stopSignal) {
    this.stopSignal = stopSignal;
  }


  public InspectContainerConfig stopTimeout(Integer stopTimeout) {
    this.stopTimeout = stopTimeout;
    return this;
  }

  /**
   * StopTimeout is time before container is stopped when calling stop
   * @return stopTimeout
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STOP_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getStopTimeout() {
    return stopTimeout;
  }


  @JsonProperty(JSON_PROPERTY_STOP_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStopTimeout(Integer stopTimeout) {
    this.stopTimeout = stopTimeout;
  }


  public InspectContainerConfig systemdMode(Boolean systemdMode) {
    this.systemdMode = systemdMode;
    return this;
  }

  /**
   * SystemdMode is whether the container is running in systemd mode. In systemd mode, the container configuration is customized to optimize running systemd in the container.
   * @return systemdMode
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SYSTEMD_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSystemdMode() {
    return systemdMode;
  }


  @JsonProperty(JSON_PROPERTY_SYSTEMD_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystemdMode(Boolean systemdMode) {
    this.systemdMode = systemdMode;
  }


  public InspectContainerConfig timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Timeout is time before container is killed by conmon
   * @return timeout
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getTimeout() {
    return timeout;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public InspectContainerConfig timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Timezone is the timezone inside the container. Local means it has the same timezone as the host machine
   * @return timezone
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTimezone() {
    return timezone;
  }


  @JsonProperty(JSON_PROPERTY_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public InspectContainerConfig tty(Boolean tty) {
    this.tty = tty;
    return this;
  }

  /**
   * Whether the container creates a TTY
   * @return tty
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTty() {
    return tty;
  }


  @JsonProperty(JSON_PROPERTY_TTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTty(Boolean tty) {
    this.tty = tty;
  }


  public InspectContainerConfig umask(String umask) {
    this.umask = umask;
    return this;
  }

  /**
   * Umask is the umask inside the container.
   * @return umask
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_UMASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUmask() {
    return umask;
  }


  @JsonProperty(JSON_PROPERTY_UMASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUmask(String umask) {
    this.umask = umask;
  }


  public InspectContainerConfig user(String user) {
    this.user = user;
    return this;
  }

  /**
   * User the container was launched with
   * @return user
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public InspectContainerConfig volumes(Map<String, Object> volumes) {
    this.volumes = volumes;
    return this;
  }

  public InspectContainerConfig putVolumesItem(String key, Object volumesItem) {
    if (this.volumes == null) {
      this.volumes = new HashMap<>();
    }
    this.volumes.put(key, volumesItem);
    return this;
  }

  /**
   * Unused, at present. I&#39;ve never seen this field populated.
   * @return volumes
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, Object> getVolumes() {
    return volumes;
  }


  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumes(Map<String, Object> volumes) {
    this.volumes = volumes;
  }


  public InspectContainerConfig workingDir(String workingDir) {
    this.workingDir = workingDir;
    return this;
  }

  /**
   * Container working directory
   * @return workingDir
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getWorkingDir() {
    return workingDir;
  }


  @JsonProperty(JSON_PROPERTY_WORKING_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkingDir(String workingDir) {
    this.workingDir = workingDir;
  }


  public InspectContainerConfig sdNotifyMode(String sdNotifyMode) {
    this.sdNotifyMode = sdNotifyMode;
    return this;
  }

  /**
   * SdNotifyMode is the sd-notify mode of the container.
   * @return sdNotifyMode
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SD_NOTIFY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSdNotifyMode() {
    return sdNotifyMode;
  }


  @JsonProperty(JSON_PROPERTY_SD_NOTIFY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdNotifyMode(String sdNotifyMode) {
    this.sdNotifyMode = sdNotifyMode;
  }


  public InspectContainerConfig sdNotifySocket(String sdNotifySocket) {
    this.sdNotifySocket = sdNotifySocket;
    return this;
  }

  /**
   * SdNotifySocket is the NOTIFY_SOCKET in use by/configured for the container.
   * @return sdNotifySocket
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SD_NOTIFY_SOCKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSdNotifySocket() {
    return sdNotifySocket;
  }


  @JsonProperty(JSON_PROPERTY_SD_NOTIFY_SOCKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdNotifySocket(String sdNotifySocket) {
    this.sdNotifySocket = sdNotifySocket;
  }


  /**
   * Return true if this InspectContainerConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InspectContainerConfig inspectContainerConfig = (InspectContainerConfig) o;
    return Objects.equals(this.annotations, inspectContainerConfig.annotations) &&
        Objects.equals(this.attachStderr, inspectContainerConfig.attachStderr) &&
        Objects.equals(this.attachStdin, inspectContainerConfig.attachStdin) &&
        Objects.equals(this.attachStdout, inspectContainerConfig.attachStdout) &&
        Objects.equals(this.chrootDirs, inspectContainerConfig.chrootDirs) &&
        Objects.equals(this.cmd, inspectContainerConfig.cmd) &&
        Objects.equals(this.createCommand, inspectContainerConfig.createCommand) &&
        Objects.equals(this.domainname, inspectContainerConfig.domainname) &&
        Objects.equals(this.entrypoint, inspectContainerConfig.entrypoint) &&
        Objects.equals(this.env, inspectContainerConfig.env) &&
        Objects.equals(this.exposedPorts, inspectContainerConfig.exposedPorts) &&
        Objects.equals(this.healthLogDestination, inspectContainerConfig.healthLogDestination) &&
        Objects.equals(this.healthcheck, inspectContainerConfig.healthcheck) &&
        Objects.equals(this.healthcheckMaxLogCount, inspectContainerConfig.healthcheckMaxLogCount) &&
        Objects.equals(this.healthcheckMaxLogSize, inspectContainerConfig.healthcheckMaxLogSize) &&
        Objects.equals(this.healthcheckOnFailureAction, inspectContainerConfig.healthcheckOnFailureAction) &&
        Objects.equals(this.hostname, inspectContainerConfig.hostname) &&
        Objects.equals(this.image, inspectContainerConfig.image) &&
        Objects.equals(this.labels, inspectContainerConfig.labels) &&
        Objects.equals(this.onBuild, inspectContainerConfig.onBuild) &&
        Objects.equals(this.openStdin, inspectContainerConfig.openStdin) &&
        Objects.equals(this.passwd, inspectContainerConfig.passwd) &&
        Objects.equals(this.secrets, inspectContainerConfig.secrets) &&
        Objects.equals(this.startupHealthCheck, inspectContainerConfig.startupHealthCheck) &&
        Objects.equals(this.stdinOnce, inspectContainerConfig.stdinOnce) &&
        Objects.equals(this.stopSignal, inspectContainerConfig.stopSignal) &&
        Objects.equals(this.stopTimeout, inspectContainerConfig.stopTimeout) &&
        Objects.equals(this.systemdMode, inspectContainerConfig.systemdMode) &&
        Objects.equals(this.timeout, inspectContainerConfig.timeout) &&
        Objects.equals(this.timezone, inspectContainerConfig.timezone) &&
        Objects.equals(this.tty, inspectContainerConfig.tty) &&
        Objects.equals(this.umask, inspectContainerConfig.umask) &&
        Objects.equals(this.user, inspectContainerConfig.user) &&
        Objects.equals(this.volumes, inspectContainerConfig.volumes) &&
        Objects.equals(this.workingDir, inspectContainerConfig.workingDir) &&
        Objects.equals(this.sdNotifyMode, inspectContainerConfig.sdNotifyMode) &&
        Objects.equals(this.sdNotifySocket, inspectContainerConfig.sdNotifySocket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, attachStderr, attachStdin, attachStdout, chrootDirs, cmd, createCommand, domainname, entrypoint, env, exposedPorts, healthLogDestination, healthcheck, healthcheckMaxLogCount, healthcheckMaxLogSize, healthcheckOnFailureAction, hostname, image, labels, onBuild, openStdin, passwd, secrets, startupHealthCheck, stdinOnce, stopSignal, stopTimeout, systemdMode, timeout, timezone, tty, umask, user, volumes, workingDir, sdNotifyMode, sdNotifySocket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InspectContainerConfig {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    attachStderr: ").append(toIndentedString(attachStderr)).append("\n");
    sb.append("    attachStdin: ").append(toIndentedString(attachStdin)).append("\n");
    sb.append("    attachStdout: ").append(toIndentedString(attachStdout)).append("\n");
    sb.append("    chrootDirs: ").append(toIndentedString(chrootDirs)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    createCommand: ").append(toIndentedString(createCommand)).append("\n");
    sb.append("    domainname: ").append(toIndentedString(domainname)).append("\n");
    sb.append("    entrypoint: ").append(toIndentedString(entrypoint)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    exposedPorts: ").append(toIndentedString(exposedPorts)).append("\n");
    sb.append("    healthLogDestination: ").append(toIndentedString(healthLogDestination)).append("\n");
    sb.append("    healthcheck: ").append(toIndentedString(healthcheck)).append("\n");
    sb.append("    healthcheckMaxLogCount: ").append(toIndentedString(healthcheckMaxLogCount)).append("\n");
    sb.append("    healthcheckMaxLogSize: ").append(toIndentedString(healthcheckMaxLogSize)).append("\n");
    sb.append("    healthcheckOnFailureAction: ").append(toIndentedString(healthcheckOnFailureAction)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    onBuild: ").append(toIndentedString(onBuild)).append("\n");
    sb.append("    openStdin: ").append(toIndentedString(openStdin)).append("\n");
    sb.append("    passwd: ").append(toIndentedString(passwd)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    startupHealthCheck: ").append(toIndentedString(startupHealthCheck)).append("\n");
    sb.append("    stdinOnce: ").append(toIndentedString(stdinOnce)).append("\n");
    sb.append("    stopSignal: ").append(toIndentedString(stopSignal)).append("\n");
    sb.append("    stopTimeout: ").append(toIndentedString(stopTimeout)).append("\n");
    sb.append("    systemdMode: ").append(toIndentedString(systemdMode)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    tty: ").append(toIndentedString(tty)).append("\n");
    sb.append("    umask: ").append(toIndentedString(umask)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    workingDir: ").append(toIndentedString(workingDir)).append("\n");
    sb.append("    sdNotifyMode: ").append(toIndentedString(sdNotifyMode)).append("\n");
    sb.append("    sdNotifySocket: ").append(toIndentedString(sdNotifySocket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Annotations` to the URL query string
    if (getAnnotations() != null) {
      for (String _key : getAnnotations().keySet()) {
        joiner.add(String.format("%sAnnotations%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getAnnotations().get(_key), URLEncoder.encode(ApiClient.valueToString(getAnnotations().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `AttachStderr` to the URL query string
    if (getAttachStderr() != null) {
      joiner.add(String.format("%sAttachStderr%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachStderr()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `AttachStdin` to the URL query string
    if (getAttachStdin() != null) {
      joiner.add(String.format("%sAttachStdin%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachStdin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `AttachStdout` to the URL query string
    if (getAttachStdout() != null) {
      joiner.add(String.format("%sAttachStdout%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAttachStdout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ChrootDirs` to the URL query string
    if (getChrootDirs() != null) {
      for (int i = 0; i < getChrootDirs().size(); i++) {
        joiner.add(String.format("%sChrootDirs%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getChrootDirs().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Cmd` to the URL query string
    if (getCmd() != null) {
      for (int i = 0; i < getCmd().size(); i++) {
        joiner.add(String.format("%sCmd%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCmd().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `CreateCommand` to the URL query string
    if (getCreateCommand() != null) {
      for (int i = 0; i < getCreateCommand().size(); i++) {
        joiner.add(String.format("%sCreateCommand%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCreateCommand().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Domainname` to the URL query string
    if (getDomainname() != null) {
      joiner.add(String.format("%sDomainname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDomainname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Entrypoint` to the URL query string
    if (getEntrypoint() != null) {
      for (int i = 0; i < getEntrypoint().size(); i++) {
        joiner.add(String.format("%sEntrypoint%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getEntrypoint().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Env` to the URL query string
    if (getEnv() != null) {
      for (int i = 0; i < getEnv().size(); i++) {
        joiner.add(String.format("%sEnv%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getEnv().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `ExposedPorts` to the URL query string
    if (getExposedPorts() != null) {
      for (String _key : getExposedPorts().keySet()) {
        joiner.add(String.format("%sExposedPorts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getExposedPorts().get(_key), URLEncoder.encode(ApiClient.valueToString(getExposedPorts().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `HealthLogDestination` to the URL query string
    if (getHealthLogDestination() != null) {
      joiner.add(String.format("%sHealthLogDestination%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHealthLogDestination()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Healthcheck` to the URL query string
    if (getHealthcheck() != null) {
      joiner.add(getHealthcheck().toUrlQueryString(prefix + "Healthcheck" + suffix));
    }

    // add `HealthcheckMaxLogCount` to the URL query string
    if (getHealthcheckMaxLogCount() != null) {
      joiner.add(String.format("%sHealthcheckMaxLogCount%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHealthcheckMaxLogCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `HealthcheckMaxLogSize` to the URL query string
    if (getHealthcheckMaxLogSize() != null) {
      joiner.add(String.format("%sHealthcheckMaxLogSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHealthcheckMaxLogSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `HealthcheckOnFailureAction` to the URL query string
    if (getHealthcheckOnFailureAction() != null) {
      joiner.add(String.format("%sHealthcheckOnFailureAction%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHealthcheckOnFailureAction()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Hostname` to the URL query string
    if (getHostname() != null) {
      joiner.add(String.format("%sHostname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHostname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Image` to the URL query string
    if (getImage() != null) {
      joiner.add(String.format("%sImage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `OnBuild` to the URL query string
    if (getOnBuild() != null) {
      joiner.add(String.format("%sOnBuild%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOnBuild()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `OpenStdin` to the URL query string
    if (getOpenStdin() != null) {
      joiner.add(String.format("%sOpenStdin%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOpenStdin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Passwd` to the URL query string
    if (getPasswd() != null) {
      joiner.add(String.format("%sPasswd%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPasswd()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Secrets` to the URL query string
    if (getSecrets() != null) {
      for (int i = 0; i < getSecrets().size(); i++) {
        if (getSecrets().get(i) != null) {
          joiner.add(getSecrets().get(i).toUrlQueryString(String.format("%sSecrets%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `StartupHealthCheck` to the URL query string
    if (getStartupHealthCheck() != null) {
      joiner.add(getStartupHealthCheck().toUrlQueryString(prefix + "StartupHealthCheck" + suffix));
    }

    // add `StdinOnce` to the URL query string
    if (getStdinOnce() != null) {
      joiner.add(String.format("%sStdinOnce%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStdinOnce()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `StopSignal` to the URL query string
    if (getStopSignal() != null) {
      joiner.add(String.format("%sStopSignal%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStopSignal()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `StopTimeout` to the URL query string
    if (getStopTimeout() != null) {
      joiner.add(String.format("%sStopTimeout%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStopTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `SystemdMode` to the URL query string
    if (getSystemdMode() != null) {
      joiner.add(String.format("%sSystemdMode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSystemdMode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Timeout` to the URL query string
    if (getTimeout() != null) {
      joiner.add(String.format("%sTimeout%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Timezone` to the URL query string
    if (getTimezone() != null) {
      joiner.add(String.format("%sTimezone%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTimezone()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Tty` to the URL query string
    if (getTty() != null) {
      joiner.add(String.format("%sTty%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTty()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Umask` to the URL query string
    if (getUmask() != null) {
      joiner.add(String.format("%sUmask%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUmask()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `User` to the URL query string
    if (getUser() != null) {
      joiner.add(String.format("%sUser%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Volumes` to the URL query string
    if (getVolumes() != null) {
      for (String _key : getVolumes().keySet()) {
        joiner.add(String.format("%sVolumes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getVolumes().get(_key), URLEncoder.encode(ApiClient.valueToString(getVolumes().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `WorkingDir` to the URL query string
    if (getWorkingDir() != null) {
      joiner.add(String.format("%sWorkingDir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWorkingDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sdNotifyMode` to the URL query string
    if (getSdNotifyMode() != null) {
      joiner.add(String.format("%ssdNotifyMode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSdNotifyMode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sdNotifySocket` to the URL query string
    if (getSdNotifySocket() != null) {
      joiner.add(String.format("%ssdNotifySocket%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSdNotifySocket()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

