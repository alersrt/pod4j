/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.DriverData;
import io.github.alersrt.pod4j.openapi.model.InspectContainerConfig;
import io.github.alersrt.pod4j.openapi.model.InspectContainerHostConfig;
import io.github.alersrt.pod4j.openapi.model.InspectContainerState;
import io.github.alersrt.pod4j.openapi.model.InspectMount;
import io.github.alersrt.pod4j.openapi.model.InspectNetworkSettings;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * InspectContainerData provides a detailed record of a container&#39;s configuration and state as viewed by Libpod. Large portions of this structure are defined such that the output is compatible with &#x60;docker inspect&#x60; JSON, but additional fields have been added as required to share information not in the original output.
 */
@JsonPropertyOrder({
  InspectContainerData.JSON_PROPERTY_APP_ARMOR_PROFILE,
  InspectContainerData.JSON_PROPERTY_ARGS,
  InspectContainerData.JSON_PROPERTY_BOUNDING_CAPS,
  InspectContainerData.JSON_PROPERTY_CONFIG,
  InspectContainerData.JSON_PROPERTY_CONMON_PID_FILE,
  InspectContainerData.JSON_PROPERTY_CREATED,
  InspectContainerData.JSON_PROPERTY_DEPENDENCIES,
  InspectContainerData.JSON_PROPERTY_DRIVER,
  InspectContainerData.JSON_PROPERTY_EFFECTIVE_CAPS,
  InspectContainerData.JSON_PROPERTY_EXEC_I_DS,
  InspectContainerData.JSON_PROPERTY_GRAPH_DRIVER,
  InspectContainerData.JSON_PROPERTY_HOST_CONFIG,
  InspectContainerData.JSON_PROPERTY_HOSTNAME_PATH,
  InspectContainerData.JSON_PROPERTY_HOSTS_PATH,
  InspectContainerData.JSON_PROPERTY_ID,
  InspectContainerData.JSON_PROPERTY_IMAGE,
  InspectContainerData.JSON_PROPERTY_IMAGE_DIGEST,
  InspectContainerData.JSON_PROPERTY_IMAGE_NAME,
  InspectContainerData.JSON_PROPERTY_IS_INFRA,
  InspectContainerData.JSON_PROPERTY_IS_SERVICE,
  InspectContainerData.JSON_PROPERTY_KUBE_EXIT_CODE_PROPAGATION,
  InspectContainerData.JSON_PROPERTY_MOUNT_LABEL,
  InspectContainerData.JSON_PROPERTY_MOUNTS,
  InspectContainerData.JSON_PROPERTY_NAME,
  InspectContainerData.JSON_PROPERTY_NAMESPACE,
  InspectContainerData.JSON_PROPERTY_NETWORK_SETTINGS,
  InspectContainerData.JSON_PROPERTY_OC_I_CONFIG_PATH,
  InspectContainerData.JSON_PROPERTY_OC_I_RUNTIME,
  InspectContainerData.JSON_PROPERTY_PATH,
  InspectContainerData.JSON_PROPERTY_PID_FILE,
  InspectContainerData.JSON_PROPERTY_POD,
  InspectContainerData.JSON_PROPERTY_PROCESS_LABEL,
  InspectContainerData.JSON_PROPERTY_RESOLV_CONF_PATH,
  InspectContainerData.JSON_PROPERTY_RESTART_COUNT,
  InspectContainerData.JSON_PROPERTY_ROOTFS,
  InspectContainerData.JSON_PROPERTY_SIZE_ROOT_FS,
  InspectContainerData.JSON_PROPERTY_SIZE_RW,
  InspectContainerData.JSON_PROPERTY_STATE,
  InspectContainerData.JSON_PROPERTY_STATIC_DIR,
  InspectContainerData.JSON_PROPERTY_LOCK_NUMBER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class InspectContainerData {
  public static final String JSON_PROPERTY_APP_ARMOR_PROFILE = "AppArmorProfile";
  private String appArmorProfile;

  public static final String JSON_PROPERTY_ARGS = "Args";
  private List<String> args = new ArrayList<>();

  public static final String JSON_PROPERTY_BOUNDING_CAPS = "BoundingCaps";
  private List<String> boundingCaps = new ArrayList<>();

  public static final String JSON_PROPERTY_CONFIG = "Config";
  private InspectContainerConfig config;

  public static final String JSON_PROPERTY_CONMON_PID_FILE = "ConmonPidFile";
  private String conmonPidFile;

  public static final String JSON_PROPERTY_CREATED = "Created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_DEPENDENCIES = "Dependencies";
  private List<String> dependencies = new ArrayList<>();

  public static final String JSON_PROPERTY_DRIVER = "Driver";
  private String driver;

  public static final String JSON_PROPERTY_EFFECTIVE_CAPS = "EffectiveCaps";
  private List<String> effectiveCaps = new ArrayList<>();

  public static final String JSON_PROPERTY_EXEC_I_DS = "ExecIDs";
  private List<String> execIDs = new ArrayList<>();

  public static final String JSON_PROPERTY_GRAPH_DRIVER = "GraphDriver";
  private DriverData graphDriver;

  public static final String JSON_PROPERTY_HOST_CONFIG = "HostConfig";
  private InspectContainerHostConfig hostConfig;

  public static final String JSON_PROPERTY_HOSTNAME_PATH = "HostnamePath";
  private String hostnamePath;

  public static final String JSON_PROPERTY_HOSTS_PATH = "HostsPath";
  private String hostsPath;

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_IMAGE = "Image";
  private String image;

  public static final String JSON_PROPERTY_IMAGE_DIGEST = "ImageDigest";
  private String imageDigest;

  public static final String JSON_PROPERTY_IMAGE_NAME = "ImageName";
  private String imageName;

  public static final String JSON_PROPERTY_IS_INFRA = "IsInfra";
  private Boolean isInfra;

  public static final String JSON_PROPERTY_IS_SERVICE = "IsService";
  private Boolean isService;

  public static final String JSON_PROPERTY_KUBE_EXIT_CODE_PROPAGATION = "KubeExitCodePropagation";
  private String kubeExitCodePropagation;

  public static final String JSON_PROPERTY_MOUNT_LABEL = "MountLabel";
  private String mountLabel;

  public static final String JSON_PROPERTY_MOUNTS = "Mounts";
  private List<@Valid InspectMount> mounts = new ArrayList<>();

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_NAMESPACE = "Namespace";
  private String namespace;

  public static final String JSON_PROPERTY_NETWORK_SETTINGS = "NetworkSettings";
  private InspectNetworkSettings networkSettings;

  public static final String JSON_PROPERTY_OC_I_CONFIG_PATH = "OCIConfigPath";
  private String ocIConfigPath;

  public static final String JSON_PROPERTY_OC_I_RUNTIME = "OCIRuntime";
  private String ocIRuntime;

  public static final String JSON_PROPERTY_PATH = "Path";
  private String path;

  public static final String JSON_PROPERTY_PID_FILE = "PidFile";
  private String pidFile;

  public static final String JSON_PROPERTY_POD = "Pod";
  private String pod;

  public static final String JSON_PROPERTY_PROCESS_LABEL = "ProcessLabel";
  private String processLabel;

  public static final String JSON_PROPERTY_RESOLV_CONF_PATH = "ResolvConfPath";
  private String resolvConfPath;

  public static final String JSON_PROPERTY_RESTART_COUNT = "RestartCount";
  private Integer restartCount;

  public static final String JSON_PROPERTY_ROOTFS = "Rootfs";
  private String rootfs;

  public static final String JSON_PROPERTY_SIZE_ROOT_FS = "SizeRootFs";
  private Long sizeRootFs;

  public static final String JSON_PROPERTY_SIZE_RW = "SizeRw";
  private Long sizeRw;

  public static final String JSON_PROPERTY_STATE = "State";
  private InspectContainerState state;

  public static final String JSON_PROPERTY_STATIC_DIR = "StaticDir";
  private String staticDir;

  public static final String JSON_PROPERTY_LOCK_NUMBER = "lockNumber";
  private Integer lockNumber;

  public InspectContainerData() { 
  }

  public InspectContainerData appArmorProfile(String appArmorProfile) {
    this.appArmorProfile = appArmorProfile;
    return this;
  }

  /**
   * Get appArmorProfile
   * @return appArmorProfile
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_APP_ARMOR_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAppArmorProfile() {
    return appArmorProfile;
  }


  @JsonProperty(JSON_PROPERTY_APP_ARMOR_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppArmorProfile(String appArmorProfile) {
    this.appArmorProfile = appArmorProfile;
  }


  public InspectContainerData args(List<String> args) {
    this.args = args;
    return this;
  }

  public InspectContainerData addArgsItem(String argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
   * Get args
   * @return args
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getArgs() {
    return args;
  }


  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArgs(List<String> args) {
    this.args = args;
  }


  public InspectContainerData boundingCaps(List<String> boundingCaps) {
    this.boundingCaps = boundingCaps;
    return this;
  }

  public InspectContainerData addBoundingCapsItem(String boundingCapsItem) {
    if (this.boundingCaps == null) {
      this.boundingCaps = new ArrayList<>();
    }
    this.boundingCaps.add(boundingCapsItem);
    return this;
  }

  /**
   * Get boundingCaps
   * @return boundingCaps
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_BOUNDING_CAPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getBoundingCaps() {
    return boundingCaps;
  }


  @JsonProperty(JSON_PROPERTY_BOUNDING_CAPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBoundingCaps(List<String> boundingCaps) {
    this.boundingCaps = boundingCaps;
  }


  public InspectContainerData config(InspectContainerConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InspectContainerConfig getConfig() {
    return config;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfig(InspectContainerConfig config) {
    this.config = config;
  }


  public InspectContainerData conmonPidFile(String conmonPidFile) {
    this.conmonPidFile = conmonPidFile;
    return this;
  }

  /**
   * Get conmonPidFile
   * @return conmonPidFile
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONMON_PID_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getConmonPidFile() {
    return conmonPidFile;
  }


  @JsonProperty(JSON_PROPERTY_CONMON_PID_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConmonPidFile(String conmonPidFile) {
    this.conmonPidFile = conmonPidFile;
  }


  public InspectContainerData created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public InspectContainerData dependencies(List<String> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public InspectContainerData addDependenciesItem(String dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

  /**
   * Get dependencies
   * @return dependencies
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DEPENDENCIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getDependencies() {
    return dependencies;
  }


  @JsonProperty(JSON_PROPERTY_DEPENDENCIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDependencies(List<String> dependencies) {
    this.dependencies = dependencies;
  }


  public InspectContainerData driver(String driver) {
    this.driver = driver;
    return this;
  }

  /**
   * Get driver
   * @return driver
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDriver() {
    return driver;
  }


  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDriver(String driver) {
    this.driver = driver;
  }


  public InspectContainerData effectiveCaps(List<String> effectiveCaps) {
    this.effectiveCaps = effectiveCaps;
    return this;
  }

  public InspectContainerData addEffectiveCapsItem(String effectiveCapsItem) {
    if (this.effectiveCaps == null) {
      this.effectiveCaps = new ArrayList<>();
    }
    this.effectiveCaps.add(effectiveCapsItem);
    return this;
  }

  /**
   * Get effectiveCaps
   * @return effectiveCaps
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EFFECTIVE_CAPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getEffectiveCaps() {
    return effectiveCaps;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_CAPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveCaps(List<String> effectiveCaps) {
    this.effectiveCaps = effectiveCaps;
  }


  public InspectContainerData execIDs(List<String> execIDs) {
    this.execIDs = execIDs;
    return this;
  }

  public InspectContainerData addExecIDsItem(String execIDsItem) {
    if (this.execIDs == null) {
      this.execIDs = new ArrayList<>();
    }
    this.execIDs.add(execIDsItem);
    return this;
  }

  /**
   * Get execIDs
   * @return execIDs
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXEC_I_DS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getExecIDs() {
    return execIDs;
  }


  @JsonProperty(JSON_PROPERTY_EXEC_I_DS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecIDs(List<String> execIDs) {
    this.execIDs = execIDs;
  }


  public InspectContainerData graphDriver(DriverData graphDriver) {
    this.graphDriver = graphDriver;
    return this;
  }

  /**
   * Get graphDriver
   * @return graphDriver
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_GRAPH_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DriverData getGraphDriver() {
    return graphDriver;
  }


  @JsonProperty(JSON_PROPERTY_GRAPH_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphDriver(DriverData graphDriver) {
    this.graphDriver = graphDriver;
  }


  public InspectContainerData hostConfig(InspectContainerHostConfig hostConfig) {
    this.hostConfig = hostConfig;
    return this;
  }

  /**
   * Get hostConfig
   * @return hostConfig
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_HOST_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InspectContainerHostConfig getHostConfig() {
    return hostConfig;
  }


  @JsonProperty(JSON_PROPERTY_HOST_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostConfig(InspectContainerHostConfig hostConfig) {
    this.hostConfig = hostConfig;
  }


  public InspectContainerData hostnamePath(String hostnamePath) {
    this.hostnamePath = hostnamePath;
    return this;
  }

  /**
   * Get hostnamePath
   * @return hostnamePath
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HOSTNAME_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHostnamePath() {
    return hostnamePath;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAME_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostnamePath(String hostnamePath) {
    this.hostnamePath = hostnamePath;
  }


  public InspectContainerData hostsPath(String hostsPath) {
    this.hostsPath = hostsPath;
    return this;
  }

  /**
   * Get hostsPath
   * @return hostsPath
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HOSTS_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHostsPath() {
    return hostsPath;
  }


  @JsonProperty(JSON_PROPERTY_HOSTS_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostsPath(String hostsPath) {
    this.hostsPath = hostsPath;
  }


  public InspectContainerData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public InspectContainerData image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public InspectContainerData imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Get imageDigest
   * @return imageDigest
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_DIGEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageDigest() {
    return imageDigest;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_DIGEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public InspectContainerData imageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

  /**
   * Get imageName
   * @return imageName
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageName() {
    return imageName;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageName(String imageName) {
    this.imageName = imageName;
  }


  public InspectContainerData isInfra(Boolean isInfra) {
    this.isInfra = isInfra;
    return this;
  }

  /**
   * Get isInfra
   * @return isInfra
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IS_INFRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsInfra() {
    return isInfra;
  }


  @JsonProperty(JSON_PROPERTY_IS_INFRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsInfra(Boolean isInfra) {
    this.isInfra = isInfra;
  }


  public InspectContainerData isService(Boolean isService) {
    this.isService = isService;
    return this;
  }

  /**
   * Get isService
   * @return isService
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IS_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsService() {
    return isService;
  }


  @JsonProperty(JSON_PROPERTY_IS_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsService(Boolean isService) {
    this.isService = isService;
  }


  public InspectContainerData kubeExitCodePropagation(String kubeExitCodePropagation) {
    this.kubeExitCodePropagation = kubeExitCodePropagation;
    return this;
  }

  /**
   * Get kubeExitCodePropagation
   * @return kubeExitCodePropagation
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_KUBE_EXIT_CODE_PROPAGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getKubeExitCodePropagation() {
    return kubeExitCodePropagation;
  }


  @JsonProperty(JSON_PROPERTY_KUBE_EXIT_CODE_PROPAGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKubeExitCodePropagation(String kubeExitCodePropagation) {
    this.kubeExitCodePropagation = kubeExitCodePropagation;
  }


  public InspectContainerData mountLabel(String mountLabel) {
    this.mountLabel = mountLabel;
    return this;
  }

  /**
   * Get mountLabel
   * @return mountLabel
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MOUNT_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMountLabel() {
    return mountLabel;
  }


  @JsonProperty(JSON_PROPERTY_MOUNT_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMountLabel(String mountLabel) {
    this.mountLabel = mountLabel;
  }


  public InspectContainerData mounts(List<@Valid InspectMount> mounts) {
    this.mounts = mounts;
    return this;
  }

  public InspectContainerData addMountsItem(InspectMount mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

  /**
   * Get mounts
   * @return mounts
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid InspectMount> getMounts() {
    return mounts;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMounts(List<@Valid InspectMount> mounts) {
    this.mounts = mounts;
  }


  public InspectContainerData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public InspectContainerData namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public InspectContainerData networkSettings(InspectNetworkSettings networkSettings) {
    this.networkSettings = networkSettings;
    return this;
  }

  /**
   * Get networkSettings
   * @return networkSettings
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NETWORK_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InspectNetworkSettings getNetworkSettings() {
    return networkSettings;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkSettings(InspectNetworkSettings networkSettings) {
    this.networkSettings = networkSettings;
  }


  public InspectContainerData ocIConfigPath(String ocIConfigPath) {
    this.ocIConfigPath = ocIConfigPath;
    return this;
  }

  /**
   * Get ocIConfigPath
   * @return ocIConfigPath
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OC_I_CONFIG_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOcIConfigPath() {
    return ocIConfigPath;
  }


  @JsonProperty(JSON_PROPERTY_OC_I_CONFIG_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOcIConfigPath(String ocIConfigPath) {
    this.ocIConfigPath = ocIConfigPath;
  }


  public InspectContainerData ocIRuntime(String ocIRuntime) {
    this.ocIRuntime = ocIRuntime;
    return this;
  }

  /**
   * Get ocIRuntime
   * @return ocIRuntime
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OC_I_RUNTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOcIRuntime() {
    return ocIRuntime;
  }


  @JsonProperty(JSON_PROPERTY_OC_I_RUNTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOcIRuntime(String ocIRuntime) {
    this.ocIRuntime = ocIRuntime;
  }


  public InspectContainerData path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(String path) {
    this.path = path;
  }


  public InspectContainerData pidFile(String pidFile) {
    this.pidFile = pidFile;
    return this;
  }

  /**
   * Get pidFile
   * @return pidFile
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PID_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPidFile() {
    return pidFile;
  }


  @JsonProperty(JSON_PROPERTY_PID_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPidFile(String pidFile) {
    this.pidFile = pidFile;
  }


  public InspectContainerData pod(String pod) {
    this.pod = pod;
    return this;
  }

  /**
   * Get pod
   * @return pod
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_POD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPod() {
    return pod;
  }


  @JsonProperty(JSON_PROPERTY_POD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPod(String pod) {
    this.pod = pod;
  }


  public InspectContainerData processLabel(String processLabel) {
    this.processLabel = processLabel;
    return this;
  }

  /**
   * Get processLabel
   * @return processLabel
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PROCESS_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getProcessLabel() {
    return processLabel;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessLabel(String processLabel) {
    this.processLabel = processLabel;
  }


  public InspectContainerData resolvConfPath(String resolvConfPath) {
    this.resolvConfPath = resolvConfPath;
    return this;
  }

  /**
   * Get resolvConfPath
   * @return resolvConfPath
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RESOLV_CONF_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getResolvConfPath() {
    return resolvConfPath;
  }


  @JsonProperty(JSON_PROPERTY_RESOLV_CONF_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResolvConfPath(String resolvConfPath) {
    this.resolvConfPath = resolvConfPath;
  }


  public InspectContainerData restartCount(Integer restartCount) {
    this.restartCount = restartCount;
    return this;
  }

  /**
   * Get restartCount
   * @return restartCount
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RESTART_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getRestartCount() {
    return restartCount;
  }


  @JsonProperty(JSON_PROPERTY_RESTART_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestartCount(Integer restartCount) {
    this.restartCount = restartCount;
  }


  public InspectContainerData rootfs(String rootfs) {
    this.rootfs = rootfs;
    return this;
  }

  /**
   * Get rootfs
   * @return rootfs
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ROOTFS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRootfs() {
    return rootfs;
  }


  @JsonProperty(JSON_PROPERTY_ROOTFS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootfs(String rootfs) {
    this.rootfs = rootfs;
  }


  public InspectContainerData sizeRootFs(Long sizeRootFs) {
    this.sizeRootFs = sizeRootFs;
    return this;
  }

  /**
   * Get sizeRootFs
   * @return sizeRootFs
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SIZE_ROOT_FS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSizeRootFs() {
    return sizeRootFs;
  }


  @JsonProperty(JSON_PROPERTY_SIZE_ROOT_FS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSizeRootFs(Long sizeRootFs) {
    this.sizeRootFs = sizeRootFs;
  }


  public InspectContainerData sizeRw(Long sizeRw) {
    this.sizeRw = sizeRw;
    return this;
  }

  /**
   * Get sizeRw
   * @return sizeRw
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SIZE_RW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSizeRw() {
    return sizeRw;
  }


  @JsonProperty(JSON_PROPERTY_SIZE_RW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSizeRw(Long sizeRw) {
    this.sizeRw = sizeRw;
  }


  public InspectContainerData state(InspectContainerState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InspectContainerState getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(InspectContainerState state) {
    this.state = state;
  }


  public InspectContainerData staticDir(String staticDir) {
    this.staticDir = staticDir;
    return this;
  }

  /**
   * Get staticDir
   * @return staticDir
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATIC_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStaticDir() {
    return staticDir;
  }


  @JsonProperty(JSON_PROPERTY_STATIC_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStaticDir(String staticDir) {
    this.staticDir = staticDir;
  }


  public InspectContainerData lockNumber(Integer lockNumber) {
    this.lockNumber = lockNumber;
    return this;
  }

  /**
   * Get lockNumber
   * @return lockNumber
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LOCK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getLockNumber() {
    return lockNumber;
  }


  @JsonProperty(JSON_PROPERTY_LOCK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLockNumber(Integer lockNumber) {
    this.lockNumber = lockNumber;
  }


  /**
   * Return true if this InspectContainerData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InspectContainerData inspectContainerData = (InspectContainerData) o;
    return Objects.equals(this.appArmorProfile, inspectContainerData.appArmorProfile) &&
        Objects.equals(this.args, inspectContainerData.args) &&
        Objects.equals(this.boundingCaps, inspectContainerData.boundingCaps) &&
        Objects.equals(this.config, inspectContainerData.config) &&
        Objects.equals(this.conmonPidFile, inspectContainerData.conmonPidFile) &&
        Objects.equals(this.created, inspectContainerData.created) &&
        Objects.equals(this.dependencies, inspectContainerData.dependencies) &&
        Objects.equals(this.driver, inspectContainerData.driver) &&
        Objects.equals(this.effectiveCaps, inspectContainerData.effectiveCaps) &&
        Objects.equals(this.execIDs, inspectContainerData.execIDs) &&
        Objects.equals(this.graphDriver, inspectContainerData.graphDriver) &&
        Objects.equals(this.hostConfig, inspectContainerData.hostConfig) &&
        Objects.equals(this.hostnamePath, inspectContainerData.hostnamePath) &&
        Objects.equals(this.hostsPath, inspectContainerData.hostsPath) &&
        Objects.equals(this.id, inspectContainerData.id) &&
        Objects.equals(this.image, inspectContainerData.image) &&
        Objects.equals(this.imageDigest, inspectContainerData.imageDigest) &&
        Objects.equals(this.imageName, inspectContainerData.imageName) &&
        Objects.equals(this.isInfra, inspectContainerData.isInfra) &&
        Objects.equals(this.isService, inspectContainerData.isService) &&
        Objects.equals(this.kubeExitCodePropagation, inspectContainerData.kubeExitCodePropagation) &&
        Objects.equals(this.mountLabel, inspectContainerData.mountLabel) &&
        Objects.equals(this.mounts, inspectContainerData.mounts) &&
        Objects.equals(this.name, inspectContainerData.name) &&
        Objects.equals(this.namespace, inspectContainerData.namespace) &&
        Objects.equals(this.networkSettings, inspectContainerData.networkSettings) &&
        Objects.equals(this.ocIConfigPath, inspectContainerData.ocIConfigPath) &&
        Objects.equals(this.ocIRuntime, inspectContainerData.ocIRuntime) &&
        Objects.equals(this.path, inspectContainerData.path) &&
        Objects.equals(this.pidFile, inspectContainerData.pidFile) &&
        Objects.equals(this.pod, inspectContainerData.pod) &&
        Objects.equals(this.processLabel, inspectContainerData.processLabel) &&
        Objects.equals(this.resolvConfPath, inspectContainerData.resolvConfPath) &&
        Objects.equals(this.restartCount, inspectContainerData.restartCount) &&
        Objects.equals(this.rootfs, inspectContainerData.rootfs) &&
        Objects.equals(this.sizeRootFs, inspectContainerData.sizeRootFs) &&
        Objects.equals(this.sizeRw, inspectContainerData.sizeRw) &&
        Objects.equals(this.state, inspectContainerData.state) &&
        Objects.equals(this.staticDir, inspectContainerData.staticDir) &&
        Objects.equals(this.lockNumber, inspectContainerData.lockNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appArmorProfile, args, boundingCaps, config, conmonPidFile, created, dependencies, driver, effectiveCaps, execIDs, graphDriver, hostConfig, hostnamePath, hostsPath, id, image, imageDigest, imageName, isInfra, isService, kubeExitCodePropagation, mountLabel, mounts, name, namespace, networkSettings, ocIConfigPath, ocIRuntime, path, pidFile, pod, processLabel, resolvConfPath, restartCount, rootfs, sizeRootFs, sizeRw, state, staticDir, lockNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InspectContainerData {\n");
    sb.append("    appArmorProfile: ").append(toIndentedString(appArmorProfile)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    boundingCaps: ").append(toIndentedString(boundingCaps)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    conmonPidFile: ").append(toIndentedString(conmonPidFile)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    effectiveCaps: ").append(toIndentedString(effectiveCaps)).append("\n");
    sb.append("    execIDs: ").append(toIndentedString(execIDs)).append("\n");
    sb.append("    graphDriver: ").append(toIndentedString(graphDriver)).append("\n");
    sb.append("    hostConfig: ").append(toIndentedString(hostConfig)).append("\n");
    sb.append("    hostnamePath: ").append(toIndentedString(hostnamePath)).append("\n");
    sb.append("    hostsPath: ").append(toIndentedString(hostsPath)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    isInfra: ").append(toIndentedString(isInfra)).append("\n");
    sb.append("    isService: ").append(toIndentedString(isService)).append("\n");
    sb.append("    kubeExitCodePropagation: ").append(toIndentedString(kubeExitCodePropagation)).append("\n");
    sb.append("    mountLabel: ").append(toIndentedString(mountLabel)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    networkSettings: ").append(toIndentedString(networkSettings)).append("\n");
    sb.append("    ocIConfigPath: ").append(toIndentedString(ocIConfigPath)).append("\n");
    sb.append("    ocIRuntime: ").append(toIndentedString(ocIRuntime)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pidFile: ").append(toIndentedString(pidFile)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    processLabel: ").append(toIndentedString(processLabel)).append("\n");
    sb.append("    resolvConfPath: ").append(toIndentedString(resolvConfPath)).append("\n");
    sb.append("    restartCount: ").append(toIndentedString(restartCount)).append("\n");
    sb.append("    rootfs: ").append(toIndentedString(rootfs)).append("\n");
    sb.append("    sizeRootFs: ").append(toIndentedString(sizeRootFs)).append("\n");
    sb.append("    sizeRw: ").append(toIndentedString(sizeRw)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    staticDir: ").append(toIndentedString(staticDir)).append("\n");
    sb.append("    lockNumber: ").append(toIndentedString(lockNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `AppArmorProfile` to the URL query string
    if (getAppArmorProfile() != null) {
      joiner.add(String.format("%sAppArmorProfile%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAppArmorProfile()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Args` to the URL query string
    if (getArgs() != null) {
      for (int i = 0; i < getArgs().size(); i++) {
        joiner.add(String.format("%sArgs%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getArgs().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `BoundingCaps` to the URL query string
    if (getBoundingCaps() != null) {
      for (int i = 0; i < getBoundingCaps().size(); i++) {
        joiner.add(String.format("%sBoundingCaps%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getBoundingCaps().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Config` to the URL query string
    if (getConfig() != null) {
      joiner.add(getConfig().toUrlQueryString(prefix + "Config" + suffix));
    }

    // add `ConmonPidFile` to the URL query string
    if (getConmonPidFile() != null) {
      joiner.add(String.format("%sConmonPidFile%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConmonPidFile()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Dependencies` to the URL query string
    if (getDependencies() != null) {
      for (int i = 0; i < getDependencies().size(); i++) {
        joiner.add(String.format("%sDependencies%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getDependencies().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Driver` to the URL query string
    if (getDriver() != null) {
      joiner.add(String.format("%sDriver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDriver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `EffectiveCaps` to the URL query string
    if (getEffectiveCaps() != null) {
      for (int i = 0; i < getEffectiveCaps().size(); i++) {
        joiner.add(String.format("%sEffectiveCaps%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getEffectiveCaps().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `ExecIDs` to the URL query string
    if (getExecIDs() != null) {
      for (int i = 0; i < getExecIDs().size(); i++) {
        joiner.add(String.format("%sExecIDs%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getExecIDs().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `GraphDriver` to the URL query string
    if (getGraphDriver() != null) {
      joiner.add(getGraphDriver().toUrlQueryString(prefix + "GraphDriver" + suffix));
    }

    // add `HostConfig` to the URL query string
    if (getHostConfig() != null) {
      joiner.add(getHostConfig().toUrlQueryString(prefix + "HostConfig" + suffix));
    }

    // add `HostnamePath` to the URL query string
    if (getHostnamePath() != null) {
      joiner.add(String.format("%sHostnamePath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHostnamePath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `HostsPath` to the URL query string
    if (getHostsPath() != null) {
      joiner.add(String.format("%sHostsPath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHostsPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Image` to the URL query string
    if (getImage() != null) {
      joiner.add(String.format("%sImage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ImageDigest` to the URL query string
    if (getImageDigest() != null) {
      joiner.add(String.format("%sImageDigest%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageDigest()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ImageName` to the URL query string
    if (getImageName() != null) {
      joiner.add(String.format("%sImageName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `IsInfra` to the URL query string
    if (getIsInfra() != null) {
      joiner.add(String.format("%sIsInfra%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIsInfra()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `IsService` to the URL query string
    if (getIsService() != null) {
      joiner.add(String.format("%sIsService%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIsService()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `KubeExitCodePropagation` to the URL query string
    if (getKubeExitCodePropagation() != null) {
      joiner.add(String.format("%sKubeExitCodePropagation%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getKubeExitCodePropagation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `MountLabel` to the URL query string
    if (getMountLabel() != null) {
      joiner.add(String.format("%sMountLabel%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMountLabel()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Mounts` to the URL query string
    if (getMounts() != null) {
      for (int i = 0; i < getMounts().size(); i++) {
        if (getMounts().get(i) != null) {
          joiner.add(getMounts().get(i).toUrlQueryString(String.format("%sMounts%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Namespace` to the URL query string
    if (getNamespace() != null) {
      joiner.add(String.format("%sNamespace%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNamespace()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `NetworkSettings` to the URL query string
    if (getNetworkSettings() != null) {
      joiner.add(getNetworkSettings().toUrlQueryString(prefix + "NetworkSettings" + suffix));
    }

    // add `OCIConfigPath` to the URL query string
    if (getOcIConfigPath() != null) {
      joiner.add(String.format("%sOCIConfigPath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOcIConfigPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `OCIRuntime` to the URL query string
    if (getOcIRuntime() != null) {
      joiner.add(String.format("%sOCIRuntime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOcIRuntime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Path` to the URL query string
    if (getPath() != null) {
      joiner.add(String.format("%sPath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `PidFile` to the URL query string
    if (getPidFile() != null) {
      joiner.add(String.format("%sPidFile%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPidFile()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Pod` to the URL query string
    if (getPod() != null) {
      joiner.add(String.format("%sPod%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ProcessLabel` to the URL query string
    if (getProcessLabel() != null) {
      joiner.add(String.format("%sProcessLabel%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getProcessLabel()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ResolvConfPath` to the URL query string
    if (getResolvConfPath() != null) {
      joiner.add(String.format("%sResolvConfPath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getResolvConfPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `RestartCount` to the URL query string
    if (getRestartCount() != null) {
      joiner.add(String.format("%sRestartCount%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRestartCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Rootfs` to the URL query string
    if (getRootfs() != null) {
      joiner.add(String.format("%sRootfs%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRootfs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `SizeRootFs` to the URL query string
    if (getSizeRootFs() != null) {
      joiner.add(String.format("%sSizeRootFs%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSizeRootFs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `SizeRw` to the URL query string
    if (getSizeRw() != null) {
      joiner.add(String.format("%sSizeRw%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSizeRw()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `State` to the URL query string
    if (getState() != null) {
      joiner.add(getState().toUrlQueryString(prefix + "State" + suffix));
    }

    // add `StaticDir` to the URL query string
    if (getStaticDir() != null) {
      joiner.add(String.format("%sStaticDir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStaticDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `lockNumber` to the URL query string
    if (getLockNumber() != null) {
      joiner.add(String.format("%slockNumber%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLockNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

