/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * InspectDevice
 */
@JsonPropertyOrder({
  InspectDevice.JSON_PROPERTY_CGROUP_PERMISSIONS,
  InspectDevice.JSON_PROPERTY_PATH_IN_CONTAINER,
  InspectDevice.JSON_PROPERTY_PATH_ON_HOST
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class InspectDevice {
  public static final String JSON_PROPERTY_CGROUP_PERMISSIONS = "CgroupPermissions";
  private String cgroupPermissions;

  public static final String JSON_PROPERTY_PATH_IN_CONTAINER = "PathInContainer";
  private String pathInContainer;

  public static final String JSON_PROPERTY_PATH_ON_HOST = "PathOnHost";
  private String pathOnHost;

  public InspectDevice() { 
  }

  public InspectDevice cgroupPermissions(String cgroupPermissions) {
    this.cgroupPermissions = cgroupPermissions;
    return this;
  }

  /**
   * CgroupPermissions is the permissions of the mounted device. Presently not populated. TODO.
   * @return cgroupPermissions
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CGROUP_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCgroupPermissions() {
    return cgroupPermissions;
  }


  @JsonProperty(JSON_PROPERTY_CGROUP_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCgroupPermissions(String cgroupPermissions) {
    this.cgroupPermissions = cgroupPermissions;
  }


  public InspectDevice pathInContainer(String pathInContainer) {
    this.pathInContainer = pathInContainer;
    return this;
  }

  /**
   * PathInContainer is the path of the device within the container.
   * @return pathInContainer
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PATH_IN_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPathInContainer() {
    return pathInContainer;
  }


  @JsonProperty(JSON_PROPERTY_PATH_IN_CONTAINER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPathInContainer(String pathInContainer) {
    this.pathInContainer = pathInContainer;
  }


  public InspectDevice pathOnHost(String pathOnHost) {
    this.pathOnHost = pathOnHost;
    return this;
  }

  /**
   * PathOnHost is the path of the device on the host.
   * @return pathOnHost
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PATH_ON_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPathOnHost() {
    return pathOnHost;
  }


  @JsonProperty(JSON_PROPERTY_PATH_ON_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPathOnHost(String pathOnHost) {
    this.pathOnHost = pathOnHost;
  }


  /**
   * Return true if this InspectDevice object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InspectDevice inspectDevice = (InspectDevice) o;
    return Objects.equals(this.cgroupPermissions, inspectDevice.cgroupPermissions) &&
        Objects.equals(this.pathInContainer, inspectDevice.pathInContainer) &&
        Objects.equals(this.pathOnHost, inspectDevice.pathOnHost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cgroupPermissions, pathInContainer, pathOnHost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InspectDevice {\n");
    sb.append("    cgroupPermissions: ").append(toIndentedString(cgroupPermissions)).append("\n");
    sb.append("    pathInContainer: ").append(toIndentedString(pathInContainer)).append("\n");
    sb.append("    pathOnHost: ").append(toIndentedString(pathOnHost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `CgroupPermissions` to the URL query string
    if (getCgroupPermissions() != null) {
      joiner.add(String.format("%sCgroupPermissions%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCgroupPermissions()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `PathInContainer` to the URL query string
    if (getPathInContainer() != null) {
      joiner.add(String.format("%sPathInContainer%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPathInContainer()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `PathOnHost` to the URL query string
    if (getPathOnHost() != null) {
      joiner.add(String.format("%sPathOnHost%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPathOnHost()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

