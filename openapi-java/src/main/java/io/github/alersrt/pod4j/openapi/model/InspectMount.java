/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * InspectMount provides a record of a single mount in a container. It contains fields for both named and normal volumes. Only user-specified volumes will be included, and tmpfs volumes are not included even if the user specified them.
 */
@JsonPropertyOrder({
  InspectMount.JSON_PROPERTY_DESTINATION,
  InspectMount.JSON_PROPERTY_DRIVER,
  InspectMount.JSON_PROPERTY_MODE,
  InspectMount.JSON_PROPERTY_NAME,
  InspectMount.JSON_PROPERTY_OPTIONS,
  InspectMount.JSON_PROPERTY_PROPAGATION,
  InspectMount.JSON_PROPERTY_R_W,
  InspectMount.JSON_PROPERTY_SOURCE,
  InspectMount.JSON_PROPERTY_SUB_PATH,
  InspectMount.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class InspectMount {
  public static final String JSON_PROPERTY_DESTINATION = "Destination";
  private String destination;

  public static final String JSON_PROPERTY_DRIVER = "Driver";
  private String driver;

  public static final String JSON_PROPERTY_MODE = "Mode";
  private String mode;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_OPTIONS = "Options";
  private List<String> options = new ArrayList<>();

  public static final String JSON_PROPERTY_PROPAGATION = "Propagation";
  private String propagation;

  public static final String JSON_PROPERTY_R_W = "RW";
  private Boolean RW;

  public static final String JSON_PROPERTY_SOURCE = "Source";
  private String source;

  public static final String JSON_PROPERTY_SUB_PATH = "SubPath";
  private String subPath;

  public static final String JSON_PROPERTY_TYPE = "Type";
  private String type;

  public InspectMount() { 
  }

  public InspectMount destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * The destination directory for the volume. Specified as a path within the container, as it would be passed into the OCI runtime.
   * @return destination
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDestination() {
    return destination;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestination(String destination) {
    this.destination = destination;
  }


  public InspectMount driver(String driver) {
    this.driver = driver;
    return this;
  }

  /**
   * The driver used for the named volume. Empty for bind mounts.
   * @return driver
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDriver() {
    return driver;
  }


  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDriver(String driver) {
    this.driver = driver;
  }


  public InspectMount mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Contains SELinux :z/:Z mount options. Unclear what, if anything, else goes in here.
   * @return mode
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMode() {
    return mode;
  }


  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMode(String mode) {
    this.mode = mode;
  }


  public InspectMount name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the volume. Empty for bind mounts.
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public InspectMount options(List<String> options) {
    this.options = options;
    return this;
  }

  public InspectMount addOptionsItem(String optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * All remaining mount options. Additional data, not present in the original output.
   * @return options
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(List<String> options) {
    this.options = options;
  }


  public InspectMount propagation(String propagation) {
    this.propagation = propagation;
    return this;
  }

  /**
   * Mount propagation for the mount. Can be empty if not specified, but is always printed - no omitempty.
   * @return propagation
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PROPAGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPropagation() {
    return propagation;
  }


  @JsonProperty(JSON_PROPERTY_PROPAGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropagation(String propagation) {
    this.propagation = propagation;
  }


  public InspectMount RW(Boolean RW) {
    this.RW = RW;
    return this;
  }

  /**
   * Whether the volume is read-write
   * @return RW
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_R_W)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRW() {
    return RW;
  }


  @JsonProperty(JSON_PROPERTY_R_W)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRW(Boolean RW) {
    this.RW = RW;
  }


  public InspectMount source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The source directory for the volume.
   * @return source
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(String source) {
    this.source = source;
  }


  public InspectMount subPath(String subPath) {
    this.subPath = subPath;
    return this;
  }

  /**
   * SubPath object from the volume. Specified as a path within the source volume to be mounted at the Destination.
   * @return subPath
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SUB_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSubPath() {
    return subPath;
  }


  @JsonProperty(JSON_PROPERTY_SUB_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubPath(String subPath) {
    this.subPath = subPath;
  }


  public InspectMount type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Whether the mount is a volume or bind mount. Allowed values are \&quot;volume\&quot; and \&quot;bind\&quot;.
   * @return type
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  /**
   * Return true if this InspectMount object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InspectMount inspectMount = (InspectMount) o;
    return Objects.equals(this.destination, inspectMount.destination) &&
        Objects.equals(this.driver, inspectMount.driver) &&
        Objects.equals(this.mode, inspectMount.mode) &&
        Objects.equals(this.name, inspectMount.name) &&
        Objects.equals(this.options, inspectMount.options) &&
        Objects.equals(this.propagation, inspectMount.propagation) &&
        Objects.equals(this.RW, inspectMount.RW) &&
        Objects.equals(this.source, inspectMount.source) &&
        Objects.equals(this.subPath, inspectMount.subPath) &&
        Objects.equals(this.type, inspectMount.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, driver, mode, name, options, propagation, RW, source, subPath, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InspectMount {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    propagation: ").append(toIndentedString(propagation)).append("\n");
    sb.append("    RW: ").append(toIndentedString(RW)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Destination` to the URL query string
    if (getDestination() != null) {
      joiner.add(String.format("%sDestination%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDestination()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Driver` to the URL query string
    if (getDriver() != null) {
      joiner.add(String.format("%sDriver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDriver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Mode` to the URL query string
    if (getMode() != null) {
      joiner.add(String.format("%sMode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Options` to the URL query string
    if (getOptions() != null) {
      for (int i = 0; i < getOptions().size(); i++) {
        joiner.add(String.format("%sOptions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getOptions().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Propagation` to the URL query string
    if (getPropagation() != null) {
      joiner.add(String.format("%sPropagation%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPropagation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `RW` to the URL query string
    if (getRW() != null) {
      joiner.add(String.format("%sRW%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRW()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Source` to the URL query string
    if (getSource() != null) {
      joiner.add(String.format("%sSource%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSource()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `SubPath` to the URL query string
    if (getSubPath() != null) {
      joiner.add(String.format("%sSubPath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSubPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%sType%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

