/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.InspectBlkioThrottleDevice;
import io.github.alersrt.pod4j.openapi.model.InspectBlkioWeightDevice;
import io.github.alersrt.pod4j.openapi.model.InspectDevice;
import io.github.alersrt.pod4j.openapi.model.InspectMount;
import io.github.alersrt.pod4j.openapi.model.InspectPodContainerInfo;
import io.github.alersrt.pod4j.openapi.model.InspectPodInfraConfig;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * InspectPodData contains detailed information on a pod&#39;s configuration and state. It is used as the output of Inspect on pods.
 */
@JsonPropertyOrder({
  InspectPodData.JSON_PROPERTY_CGROUP_PARENT,
  InspectPodData.JSON_PROPERTY_CGROUP_PATH,
  InspectPodData.JSON_PROPERTY_CONTAINERS,
  InspectPodData.JSON_PROPERTY_CREATE_CGROUP,
  InspectPodData.JSON_PROPERTY_CREATE_COMMAND,
  InspectPodData.JSON_PROPERTY_CREATE_INFRA,
  InspectPodData.JSON_PROPERTY_CREATED,
  InspectPodData.JSON_PROPERTY_EXIT_POLICY,
  InspectPodData.JSON_PROPERTY_HOSTNAME,
  InspectPodData.JSON_PROPERTY_ID,
  InspectPodData.JSON_PROPERTY_INFRA_CONFIG,
  InspectPodData.JSON_PROPERTY_INFRA_CONTAINER_I_D,
  InspectPodData.JSON_PROPERTY_LABELS,
  InspectPodData.JSON_PROPERTY_LOCK_NUMBER,
  InspectPodData.JSON_PROPERTY_NAME,
  InspectPodData.JSON_PROPERTY_NAMESPACE,
  InspectPodData.JSON_PROPERTY_NUM_CONTAINERS,
  InspectPodData.JSON_PROPERTY_RESTART_POLICY,
  InspectPodData.JSON_PROPERTY_SHARED_NAMESPACES,
  InspectPodData.JSON_PROPERTY_STATE,
  InspectPodData.JSON_PROPERTY_BLKIO_WEIGHT,
  InspectPodData.JSON_PROPERTY_BLKIO_WEIGHT_DEVICE,
  InspectPodData.JSON_PROPERTY_CPU_PERIOD,
  InspectPodData.JSON_PROPERTY_CPU_QUOTA,
  InspectPodData.JSON_PROPERTY_CPU_SHARES,
  InspectPodData.JSON_PROPERTY_CPUSET_CPUS,
  InspectPodData.JSON_PROPERTY_CPUSET_MEMS,
  InspectPodData.JSON_PROPERTY_DEVICE_READ_BPS,
  InspectPodData.JSON_PROPERTY_DEVICE_WRITE_BPS,
  InspectPodData.JSON_PROPERTY_DEVICES,
  InspectPodData.JSON_PROPERTY_MEMORY_LIMIT,
  InspectPodData.JSON_PROPERTY_MEMORY_SWAP,
  InspectPodData.JSON_PROPERTY_MOUNTS,
  InspectPodData.JSON_PROPERTY_SECURITY_OPT,
  InspectPodData.JSON_PROPERTY_VOLUMES_FROM
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class InspectPodData {
  public static final String JSON_PROPERTY_CGROUP_PARENT = "CgroupParent";
  private String cgroupParent;

  public static final String JSON_PROPERTY_CGROUP_PATH = "CgroupPath";
  private String cgroupPath;

  public static final String JSON_PROPERTY_CONTAINERS = "Containers";
  private List<@Valid InspectPodContainerInfo> containers = new ArrayList<>();

  public static final String JSON_PROPERTY_CREATE_CGROUP = "CreateCgroup";
  private Boolean createCgroup;

  public static final String JSON_PROPERTY_CREATE_COMMAND = "CreateCommand";
  private List<String> createCommand = new ArrayList<>();

  public static final String JSON_PROPERTY_CREATE_INFRA = "CreateInfra";
  private Boolean createInfra;

  public static final String JSON_PROPERTY_CREATED = "Created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_EXIT_POLICY = "ExitPolicy";
  private String exitPolicy;

  public static final String JSON_PROPERTY_HOSTNAME = "Hostname";
  private String hostname;

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_INFRA_CONFIG = "InfraConfig";
  private InspectPodInfraConfig infraConfig;

  public static final String JSON_PROPERTY_INFRA_CONTAINER_I_D = "InfraContainerID";
  private String infraContainerID;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_LOCK_NUMBER = "LockNumber";
  private Integer lockNumber;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_NAMESPACE = "Namespace";
  private String namespace;

  public static final String JSON_PROPERTY_NUM_CONTAINERS = "NumContainers";
  private Integer numContainers;

  public static final String JSON_PROPERTY_RESTART_POLICY = "RestartPolicy";
  private String restartPolicy;

  public static final String JSON_PROPERTY_SHARED_NAMESPACES = "SharedNamespaces";
  private List<String> sharedNamespaces = new ArrayList<>();

  public static final String JSON_PROPERTY_STATE = "State";
  private String state;

  public static final String JSON_PROPERTY_BLKIO_WEIGHT = "blkio_weight";
  private Integer blkioWeight;

  public static final String JSON_PROPERTY_BLKIO_WEIGHT_DEVICE = "blkio_weight_device";
  private List<@Valid InspectBlkioWeightDevice> blkioWeightDevice = new ArrayList<>();

  public static final String JSON_PROPERTY_CPU_PERIOD = "cpu_period";
  private Integer cpuPeriod;

  public static final String JSON_PROPERTY_CPU_QUOTA = "cpu_quota";
  private Long cpuQuota;

  public static final String JSON_PROPERTY_CPU_SHARES = "cpu_shares";
  private Integer cpuShares;

  public static final String JSON_PROPERTY_CPUSET_CPUS = "cpuset_cpus";
  private String cpusetCpus;

  public static final String JSON_PROPERTY_CPUSET_MEMS = "cpuset_mems";
  private String cpusetMems;

  public static final String JSON_PROPERTY_DEVICE_READ_BPS = "device_read_bps";
  private List<@Valid InspectBlkioThrottleDevice> deviceReadBps = new ArrayList<>();

  public static final String JSON_PROPERTY_DEVICE_WRITE_BPS = "device_write_bps";
  private List<@Valid InspectBlkioThrottleDevice> deviceWriteBps = new ArrayList<>();

  public static final String JSON_PROPERTY_DEVICES = "devices";
  private List<@Valid InspectDevice> devices = new ArrayList<>();

  public static final String JSON_PROPERTY_MEMORY_LIMIT = "memory_limit";
  private Integer memoryLimit;

  public static final String JSON_PROPERTY_MEMORY_SWAP = "memory_swap";
  private Integer memorySwap;

  public static final String JSON_PROPERTY_MOUNTS = "mounts";
  private List<@Valid InspectMount> mounts = new ArrayList<>();

  public static final String JSON_PROPERTY_SECURITY_OPT = "security_opt";
  private List<String> securityOpt = new ArrayList<>();

  public static final String JSON_PROPERTY_VOLUMES_FROM = "volumes_from";
  private List<String> volumesFrom = new ArrayList<>();

  public InspectPodData() { 
  }

  public InspectPodData cgroupParent(String cgroupParent) {
    this.cgroupParent = cgroupParent;
    return this;
  }

  /**
   * CgroupParent is the parent of the pod&#39;s Cgroup.
   * @return cgroupParent
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CGROUP_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCgroupParent() {
    return cgroupParent;
  }


  @JsonProperty(JSON_PROPERTY_CGROUP_PARENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCgroupParent(String cgroupParent) {
    this.cgroupParent = cgroupParent;
  }


  public InspectPodData cgroupPath(String cgroupPath) {
    this.cgroupPath = cgroupPath;
    return this;
  }

  /**
   * CgroupPath is the path to the pod&#39;s Cgroup.
   * @return cgroupPath
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CGROUP_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCgroupPath() {
    return cgroupPath;
  }


  @JsonProperty(JSON_PROPERTY_CGROUP_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCgroupPath(String cgroupPath) {
    this.cgroupPath = cgroupPath;
  }


  public InspectPodData containers(List<@Valid InspectPodContainerInfo> containers) {
    this.containers = containers;
    return this;
  }

  public InspectPodData addContainersItem(InspectPodContainerInfo containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * Containers gives a brief summary of all containers in the pod and their current status.
   * @return containers
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid InspectPodContainerInfo> getContainers() {
    return containers;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainers(List<@Valid InspectPodContainerInfo> containers) {
    this.containers = containers;
  }


  public InspectPodData createCgroup(Boolean createCgroup) {
    this.createCgroup = createCgroup;
    return this;
  }

  /**
   * CreateCgroup is whether this pod will create its own Cgroup to group containers under.
   * @return createCgroup
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CREATE_CGROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCreateCgroup() {
    return createCgroup;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_CGROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateCgroup(Boolean createCgroup) {
    this.createCgroup = createCgroup;
  }


  public InspectPodData createCommand(List<String> createCommand) {
    this.createCommand = createCommand;
    return this;
  }

  public InspectPodData addCreateCommandItem(String createCommandItem) {
    if (this.createCommand == null) {
      this.createCommand = new ArrayList<>();
    }
    this.createCommand.add(createCommandItem);
    return this;
  }

  /**
   * CreateCommand is the full command plus arguments of the process the container has been created with.
   * @return createCommand
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CREATE_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCreateCommand() {
    return createCommand;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateCommand(List<String> createCommand) {
    this.createCommand = createCommand;
  }


  public InspectPodData createInfra(Boolean createInfra) {
    this.createInfra = createInfra;
    return this;
  }

  /**
   * CreateInfra is whether this pod will create an infra container to share namespaces.
   * @return createInfra
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CREATE_INFRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCreateInfra() {
    return createInfra;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_INFRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateInfra(Boolean createInfra) {
    this.createInfra = createInfra;
  }


  public InspectPodData created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Created is the time when the pod was created.
   * @return created
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public InspectPodData exitPolicy(String exitPolicy) {
    this.exitPolicy = exitPolicy;
    return this;
  }

  /**
   * ExitPolicy of the pod.
   * @return exitPolicy
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXIT_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getExitPolicy() {
    return exitPolicy;
  }


  @JsonProperty(JSON_PROPERTY_EXIT_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExitPolicy(String exitPolicy) {
    this.exitPolicy = exitPolicy;
  }


  public InspectPodData hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Hostname is the hostname that the pod will set.
   * @return hostname
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHostname() {
    return hostname;
  }


  @JsonProperty(JSON_PROPERTY_HOSTNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public InspectPodData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID is the ID of the pod.
   * @return id
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public InspectPodData infraConfig(InspectPodInfraConfig infraConfig) {
    this.infraConfig = infraConfig;
    return this;
  }

  /**
   * Get infraConfig
   * @return infraConfig
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_INFRA_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InspectPodInfraConfig getInfraConfig() {
    return infraConfig;
  }


  @JsonProperty(JSON_PROPERTY_INFRA_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInfraConfig(InspectPodInfraConfig infraConfig) {
    this.infraConfig = infraConfig;
  }


  public InspectPodData infraContainerID(String infraContainerID) {
    this.infraContainerID = infraContainerID;
    return this;
  }

  /**
   * InfraContainerID is the ID of the pod&#39;s infra container, if one is present.
   * @return infraContainerID
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INFRA_CONTAINER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getInfraContainerID() {
    return infraContainerID;
  }


  @JsonProperty(JSON_PROPERTY_INFRA_CONTAINER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInfraContainerID(String infraContainerID) {
    this.infraContainerID = infraContainerID;
  }


  public InspectPodData labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public InspectPodData putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels is a set of key-value labels that have been applied to the pod.
   * @return labels
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public InspectPodData lockNumber(Integer lockNumber) {
    this.lockNumber = lockNumber;
    return this;
  }

  /**
   * Number of the pod&#39;s Libpod lock.
   * @return lockNumber
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LOCK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getLockNumber() {
    return lockNumber;
  }


  @JsonProperty(JSON_PROPERTY_LOCK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLockNumber(Integer lockNumber) {
    this.lockNumber = lockNumber;
  }


  public InspectPodData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name is the name of the pod.
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public InspectPodData namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Namespace is the Libpod namespace the pod is placed in.
   * @return namespace
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public InspectPodData numContainers(Integer numContainers) {
    this.numContainers = numContainers;
    return this;
  }

  /**
   * NumContainers is the number of containers in the pod, including the infra container.
   * @return numContainers
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NUM_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getNumContainers() {
    return numContainers;
  }


  @JsonProperty(JSON_PROPERTY_NUM_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumContainers(Integer numContainers) {
    this.numContainers = numContainers;
  }


  public InspectPodData restartPolicy(String restartPolicy) {
    this.restartPolicy = restartPolicy;
    return this;
  }

  /**
   * RestartPolicy of the pod.
   * @return restartPolicy
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RESTART_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRestartPolicy() {
    return restartPolicy;
  }


  @JsonProperty(JSON_PROPERTY_RESTART_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestartPolicy(String restartPolicy) {
    this.restartPolicy = restartPolicy;
  }


  public InspectPodData sharedNamespaces(List<String> sharedNamespaces) {
    this.sharedNamespaces = sharedNamespaces;
    return this;
  }

  public InspectPodData addSharedNamespacesItem(String sharedNamespacesItem) {
    if (this.sharedNamespaces == null) {
      this.sharedNamespaces = new ArrayList<>();
    }
    this.sharedNamespaces.add(sharedNamespacesItem);
    return this;
  }

  /**
   * SharedNamespaces contains a list of namespaces that will be shared by containers within the pod. Can only be set if CreateInfra is true.
   * @return sharedNamespaces
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SHARED_NAMESPACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getSharedNamespaces() {
    return sharedNamespaces;
  }


  @JsonProperty(JSON_PROPERTY_SHARED_NAMESPACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSharedNamespaces(List<String> sharedNamespaces) {
    this.sharedNamespaces = sharedNamespaces;
  }


  public InspectPodData state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State represents the current state of the pod.
   * @return state
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(String state) {
    this.state = state;
  }


  public InspectPodData blkioWeight(Integer blkioWeight) {
    this.blkioWeight = blkioWeight;
    return this;
  }

  /**
   * BlkioWeight contains the blkio weight limit for the pod
   * @return blkioWeight
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_BLKIO_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getBlkioWeight() {
    return blkioWeight;
  }


  @JsonProperty(JSON_PROPERTY_BLKIO_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlkioWeight(Integer blkioWeight) {
    this.blkioWeight = blkioWeight;
  }


  public InspectPodData blkioWeightDevice(List<@Valid InspectBlkioWeightDevice> blkioWeightDevice) {
    this.blkioWeightDevice = blkioWeightDevice;
    return this;
  }

  public InspectPodData addBlkioWeightDeviceItem(InspectBlkioWeightDevice blkioWeightDeviceItem) {
    if (this.blkioWeightDevice == null) {
      this.blkioWeightDevice = new ArrayList<>();
    }
    this.blkioWeightDevice.add(blkioWeightDeviceItem);
    return this;
  }

  /**
   * BlkioWeightDevice contains the blkio weight device limits for the pod
   * @return blkioWeightDevice
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_BLKIO_WEIGHT_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid InspectBlkioWeightDevice> getBlkioWeightDevice() {
    return blkioWeightDevice;
  }


  @JsonProperty(JSON_PROPERTY_BLKIO_WEIGHT_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlkioWeightDevice(List<@Valid InspectBlkioWeightDevice> blkioWeightDevice) {
    this.blkioWeightDevice = blkioWeightDevice;
  }


  public InspectPodData cpuPeriod(Integer cpuPeriod) {
    this.cpuPeriod = cpuPeriod;
    return this;
  }

  /**
   * CPUPeriod contains the CPU period of the pod
   * @return cpuPeriod
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CPU_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCpuPeriod() {
    return cpuPeriod;
  }


  @JsonProperty(JSON_PROPERTY_CPU_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpuPeriod(Integer cpuPeriod) {
    this.cpuPeriod = cpuPeriod;
  }


  public InspectPodData cpuQuota(Long cpuQuota) {
    this.cpuQuota = cpuQuota;
    return this;
  }

  /**
   * CPUQuota contains the CPU quota of the pod
   * @return cpuQuota
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CPU_QUOTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getCpuQuota() {
    return cpuQuota;
  }


  @JsonProperty(JSON_PROPERTY_CPU_QUOTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpuQuota(Long cpuQuota) {
    this.cpuQuota = cpuQuota;
  }


  public InspectPodData cpuShares(Integer cpuShares) {
    this.cpuShares = cpuShares;
    return this;
  }

  /**
   * CPUShares contains the cpu shares for the pod
   * @return cpuShares
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CPU_SHARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCpuShares() {
    return cpuShares;
  }


  @JsonProperty(JSON_PROPERTY_CPU_SHARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpuShares(Integer cpuShares) {
    this.cpuShares = cpuShares;
  }


  public InspectPodData cpusetCpus(String cpusetCpus) {
    this.cpusetCpus = cpusetCpus;
    return this;
  }

  /**
   * CPUSetCPUs contains linux specific CPU data for the pod
   * @return cpusetCpus
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CPUSET_CPUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCpusetCpus() {
    return cpusetCpus;
  }


  @JsonProperty(JSON_PROPERTY_CPUSET_CPUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpusetCpus(String cpusetCpus) {
    this.cpusetCpus = cpusetCpus;
  }


  public InspectPodData cpusetMems(String cpusetMems) {
    this.cpusetMems = cpusetMems;
    return this;
  }

  /**
   * CPUSetMems contains linux specific CPU data for the pod
   * @return cpusetMems
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CPUSET_MEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCpusetMems() {
    return cpusetMems;
  }


  @JsonProperty(JSON_PROPERTY_CPUSET_MEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpusetMems(String cpusetMems) {
    this.cpusetMems = cpusetMems;
  }


  public InspectPodData deviceReadBps(List<@Valid InspectBlkioThrottleDevice> deviceReadBps) {
    this.deviceReadBps = deviceReadBps;
    return this;
  }

  public InspectPodData addDeviceReadBpsItem(InspectBlkioThrottleDevice deviceReadBpsItem) {
    if (this.deviceReadBps == null) {
      this.deviceReadBps = new ArrayList<>();
    }
    this.deviceReadBps.add(deviceReadBpsItem);
    return this;
  }

  /**
   * BlkioDeviceReadBps contains the Read/Access limit for the pod&#39;s devices
   * @return deviceReadBps
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_DEVICE_READ_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid InspectBlkioThrottleDevice> getDeviceReadBps() {
    return deviceReadBps;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_READ_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceReadBps(List<@Valid InspectBlkioThrottleDevice> deviceReadBps) {
    this.deviceReadBps = deviceReadBps;
  }


  public InspectPodData deviceWriteBps(List<@Valid InspectBlkioThrottleDevice> deviceWriteBps) {
    this.deviceWriteBps = deviceWriteBps;
    return this;
  }

  public InspectPodData addDeviceWriteBpsItem(InspectBlkioThrottleDevice deviceWriteBpsItem) {
    if (this.deviceWriteBps == null) {
      this.deviceWriteBps = new ArrayList<>();
    }
    this.deviceWriteBps.add(deviceWriteBpsItem);
    return this;
  }

  /**
   * BlkioDeviceReadBps contains the Read/Access limit for the pod&#39;s devices
   * @return deviceWriteBps
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_DEVICE_WRITE_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid InspectBlkioThrottleDevice> getDeviceWriteBps() {
    return deviceWriteBps;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_WRITE_BPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceWriteBps(List<@Valid InspectBlkioThrottleDevice> deviceWriteBps) {
    this.deviceWriteBps = deviceWriteBps;
  }


  public InspectPodData devices(List<@Valid InspectDevice> devices) {
    this.devices = devices;
    return this;
  }

  public InspectPodData addDevicesItem(InspectDevice devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

  /**
   * Devices contains the specified host devices
   * @return devices
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid InspectDevice> getDevices() {
    return devices;
  }


  @JsonProperty(JSON_PROPERTY_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevices(List<@Valid InspectDevice> devices) {
    this.devices = devices;
  }


  public InspectPodData memoryLimit(Integer memoryLimit) {
    this.memoryLimit = memoryLimit;
    return this;
  }

  /**
   * MemoryLimit contains the specified cgroup memory limit for the pod
   * @return memoryLimit
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEMORY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMemoryLimit() {
    return memoryLimit;
  }


  @JsonProperty(JSON_PROPERTY_MEMORY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemoryLimit(Integer memoryLimit) {
    this.memoryLimit = memoryLimit;
  }


  public InspectPodData memorySwap(Integer memorySwap) {
    this.memorySwap = memorySwap;
    return this;
  }

  /**
   * MemorySwap contains the specified memory swap limit for the pod
   * @return memorySwap
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEMORY_SWAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMemorySwap() {
    return memorySwap;
  }


  @JsonProperty(JSON_PROPERTY_MEMORY_SWAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemorySwap(Integer memorySwap) {
    this.memorySwap = memorySwap;
  }


  public InspectPodData mounts(List<@Valid InspectMount> mounts) {
    this.mounts = mounts;
    return this;
  }

  public InspectPodData addMountsItem(InspectMount mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

  /**
   * Mounts contains volume related information for the pod
   * @return mounts
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid InspectMount> getMounts() {
    return mounts;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMounts(List<@Valid InspectMount> mounts) {
    this.mounts = mounts;
  }


  public InspectPodData securityOpt(List<String> securityOpt) {
    this.securityOpt = securityOpt;
    return this;
  }

  public InspectPodData addSecurityOptItem(String securityOptItem) {
    if (this.securityOpt == null) {
      this.securityOpt = new ArrayList<>();
    }
    this.securityOpt.add(securityOptItem);
    return this;
  }

  /**
   * SecurityOpt contains the specified security labels and related SELinux information
   * @return securityOpt
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SECURITY_OPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getSecurityOpt() {
    return securityOpt;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY_OPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityOpt(List<String> securityOpt) {
    this.securityOpt = securityOpt;
  }


  public InspectPodData volumesFrom(List<String> volumesFrom) {
    this.volumesFrom = volumesFrom;
    return this;
  }

  public InspectPodData addVolumesFromItem(String volumesFromItem) {
    if (this.volumesFrom == null) {
      this.volumesFrom = new ArrayList<>();
    }
    this.volumesFrom.add(volumesFromItem);
    return this;
  }

  /**
   * VolumesFrom contains the containers that the pod inherits mounts from
   * @return volumesFrom
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VOLUMES_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getVolumesFrom() {
    return volumesFrom;
  }


  @JsonProperty(JSON_PROPERTY_VOLUMES_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumesFrom(List<String> volumesFrom) {
    this.volumesFrom = volumesFrom;
  }


  /**
   * Return true if this InspectPodData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InspectPodData inspectPodData = (InspectPodData) o;
    return Objects.equals(this.cgroupParent, inspectPodData.cgroupParent) &&
        Objects.equals(this.cgroupPath, inspectPodData.cgroupPath) &&
        Objects.equals(this.containers, inspectPodData.containers) &&
        Objects.equals(this.createCgroup, inspectPodData.createCgroup) &&
        Objects.equals(this.createCommand, inspectPodData.createCommand) &&
        Objects.equals(this.createInfra, inspectPodData.createInfra) &&
        Objects.equals(this.created, inspectPodData.created) &&
        Objects.equals(this.exitPolicy, inspectPodData.exitPolicy) &&
        Objects.equals(this.hostname, inspectPodData.hostname) &&
        Objects.equals(this.id, inspectPodData.id) &&
        Objects.equals(this.infraConfig, inspectPodData.infraConfig) &&
        Objects.equals(this.infraContainerID, inspectPodData.infraContainerID) &&
        Objects.equals(this.labels, inspectPodData.labels) &&
        Objects.equals(this.lockNumber, inspectPodData.lockNumber) &&
        Objects.equals(this.name, inspectPodData.name) &&
        Objects.equals(this.namespace, inspectPodData.namespace) &&
        Objects.equals(this.numContainers, inspectPodData.numContainers) &&
        Objects.equals(this.restartPolicy, inspectPodData.restartPolicy) &&
        Objects.equals(this.sharedNamespaces, inspectPodData.sharedNamespaces) &&
        Objects.equals(this.state, inspectPodData.state) &&
        Objects.equals(this.blkioWeight, inspectPodData.blkioWeight) &&
        Objects.equals(this.blkioWeightDevice, inspectPodData.blkioWeightDevice) &&
        Objects.equals(this.cpuPeriod, inspectPodData.cpuPeriod) &&
        Objects.equals(this.cpuQuota, inspectPodData.cpuQuota) &&
        Objects.equals(this.cpuShares, inspectPodData.cpuShares) &&
        Objects.equals(this.cpusetCpus, inspectPodData.cpusetCpus) &&
        Objects.equals(this.cpusetMems, inspectPodData.cpusetMems) &&
        Objects.equals(this.deviceReadBps, inspectPodData.deviceReadBps) &&
        Objects.equals(this.deviceWriteBps, inspectPodData.deviceWriteBps) &&
        Objects.equals(this.devices, inspectPodData.devices) &&
        Objects.equals(this.memoryLimit, inspectPodData.memoryLimit) &&
        Objects.equals(this.memorySwap, inspectPodData.memorySwap) &&
        Objects.equals(this.mounts, inspectPodData.mounts) &&
        Objects.equals(this.securityOpt, inspectPodData.securityOpt) &&
        Objects.equals(this.volumesFrom, inspectPodData.volumesFrom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cgroupParent, cgroupPath, containers, createCgroup, createCommand, createInfra, created, exitPolicy, hostname, id, infraConfig, infraContainerID, labels, lockNumber, name, namespace, numContainers, restartPolicy, sharedNamespaces, state, blkioWeight, blkioWeightDevice, cpuPeriod, cpuQuota, cpuShares, cpusetCpus, cpusetMems, deviceReadBps, deviceWriteBps, devices, memoryLimit, memorySwap, mounts, securityOpt, volumesFrom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InspectPodData {\n");
    sb.append("    cgroupParent: ").append(toIndentedString(cgroupParent)).append("\n");
    sb.append("    cgroupPath: ").append(toIndentedString(cgroupPath)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    createCgroup: ").append(toIndentedString(createCgroup)).append("\n");
    sb.append("    createCommand: ").append(toIndentedString(createCommand)).append("\n");
    sb.append("    createInfra: ").append(toIndentedString(createInfra)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    exitPolicy: ").append(toIndentedString(exitPolicy)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    infraConfig: ").append(toIndentedString(infraConfig)).append("\n");
    sb.append("    infraContainerID: ").append(toIndentedString(infraContainerID)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lockNumber: ").append(toIndentedString(lockNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    numContainers: ").append(toIndentedString(numContainers)).append("\n");
    sb.append("    restartPolicy: ").append(toIndentedString(restartPolicy)).append("\n");
    sb.append("    sharedNamespaces: ").append(toIndentedString(sharedNamespaces)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    blkioWeight: ").append(toIndentedString(blkioWeight)).append("\n");
    sb.append("    blkioWeightDevice: ").append(toIndentedString(blkioWeightDevice)).append("\n");
    sb.append("    cpuPeriod: ").append(toIndentedString(cpuPeriod)).append("\n");
    sb.append("    cpuQuota: ").append(toIndentedString(cpuQuota)).append("\n");
    sb.append("    cpuShares: ").append(toIndentedString(cpuShares)).append("\n");
    sb.append("    cpusetCpus: ").append(toIndentedString(cpusetCpus)).append("\n");
    sb.append("    cpusetMems: ").append(toIndentedString(cpusetMems)).append("\n");
    sb.append("    deviceReadBps: ").append(toIndentedString(deviceReadBps)).append("\n");
    sb.append("    deviceWriteBps: ").append(toIndentedString(deviceWriteBps)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    memoryLimit: ").append(toIndentedString(memoryLimit)).append("\n");
    sb.append("    memorySwap: ").append(toIndentedString(memorySwap)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    securityOpt: ").append(toIndentedString(securityOpt)).append("\n");
    sb.append("    volumesFrom: ").append(toIndentedString(volumesFrom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `CgroupParent` to the URL query string
    if (getCgroupParent() != null) {
      joiner.add(String.format("%sCgroupParent%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCgroupParent()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `CgroupPath` to the URL query string
    if (getCgroupPath() != null) {
      joiner.add(String.format("%sCgroupPath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCgroupPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Containers` to the URL query string
    if (getContainers() != null) {
      for (int i = 0; i < getContainers().size(); i++) {
        if (getContainers().get(i) != null) {
          joiner.add(getContainers().get(i).toUrlQueryString(String.format("%sContainers%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `CreateCgroup` to the URL query string
    if (getCreateCgroup() != null) {
      joiner.add(String.format("%sCreateCgroup%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreateCgroup()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `CreateCommand` to the URL query string
    if (getCreateCommand() != null) {
      for (int i = 0; i < getCreateCommand().size(); i++) {
        joiner.add(String.format("%sCreateCommand%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCreateCommand().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `CreateInfra` to the URL query string
    if (getCreateInfra() != null) {
      joiner.add(String.format("%sCreateInfra%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreateInfra()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ExitPolicy` to the URL query string
    if (getExitPolicy() != null) {
      joiner.add(String.format("%sExitPolicy%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExitPolicy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Hostname` to the URL query string
    if (getHostname() != null) {
      joiner.add(String.format("%sHostname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHostname()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `InfraConfig` to the URL query string
    if (getInfraConfig() != null) {
      joiner.add(getInfraConfig().toUrlQueryString(prefix + "InfraConfig" + suffix));
    }

    // add `InfraContainerID` to the URL query string
    if (getInfraContainerID() != null) {
      joiner.add(String.format("%sInfraContainerID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getInfraContainerID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `LockNumber` to the URL query string
    if (getLockNumber() != null) {
      joiner.add(String.format("%sLockNumber%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLockNumber()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Namespace` to the URL query string
    if (getNamespace() != null) {
      joiner.add(String.format("%sNamespace%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNamespace()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `NumContainers` to the URL query string
    if (getNumContainers() != null) {
      joiner.add(String.format("%sNumContainers%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNumContainers()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `RestartPolicy` to the URL query string
    if (getRestartPolicy() != null) {
      joiner.add(String.format("%sRestartPolicy%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRestartPolicy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `SharedNamespaces` to the URL query string
    if (getSharedNamespaces() != null) {
      for (int i = 0; i < getSharedNamespaces().size(); i++) {
        joiner.add(String.format("%sSharedNamespaces%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getSharedNamespaces().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `State` to the URL query string
    if (getState() != null) {
      joiner.add(String.format("%sState%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getState()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `blkio_weight` to the URL query string
    if (getBlkioWeight() != null) {
      joiner.add(String.format("%sblkio_weight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBlkioWeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `blkio_weight_device` to the URL query string
    if (getBlkioWeightDevice() != null) {
      for (int i = 0; i < getBlkioWeightDevice().size(); i++) {
        if (getBlkioWeightDevice().get(i) != null) {
          joiner.add(getBlkioWeightDevice().get(i).toUrlQueryString(String.format("%sblkio_weight_device%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `cpu_period` to the URL query string
    if (getCpuPeriod() != null) {
      joiner.add(String.format("%scpu_period%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpuPeriod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cpu_quota` to the URL query string
    if (getCpuQuota() != null) {
      joiner.add(String.format("%scpu_quota%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpuQuota()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cpu_shares` to the URL query string
    if (getCpuShares() != null) {
      joiner.add(String.format("%scpu_shares%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpuShares()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cpuset_cpus` to the URL query string
    if (getCpusetCpus() != null) {
      joiner.add(String.format("%scpuset_cpus%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpusetCpus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cpuset_mems` to the URL query string
    if (getCpusetMems() != null) {
      joiner.add(String.format("%scpuset_mems%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpusetMems()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `device_read_bps` to the URL query string
    if (getDeviceReadBps() != null) {
      for (int i = 0; i < getDeviceReadBps().size(); i++) {
        if (getDeviceReadBps().get(i) != null) {
          joiner.add(getDeviceReadBps().get(i).toUrlQueryString(String.format("%sdevice_read_bps%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `device_write_bps` to the URL query string
    if (getDeviceWriteBps() != null) {
      for (int i = 0; i < getDeviceWriteBps().size(); i++) {
        if (getDeviceWriteBps().get(i) != null) {
          joiner.add(getDeviceWriteBps().get(i).toUrlQueryString(String.format("%sdevice_write_bps%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `devices` to the URL query string
    if (getDevices() != null) {
      for (int i = 0; i < getDevices().size(); i++) {
        if (getDevices().get(i) != null) {
          joiner.add(getDevices().get(i).toUrlQueryString(String.format("%sdevices%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `memory_limit` to the URL query string
    if (getMemoryLimit() != null) {
      joiner.add(String.format("%smemory_limit%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMemoryLimit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `memory_swap` to the URL query string
    if (getMemorySwap() != null) {
      joiner.add(String.format("%smemory_swap%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMemorySwap()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `mounts` to the URL query string
    if (getMounts() != null) {
      for (int i = 0; i < getMounts().size(); i++) {
        if (getMounts().get(i) != null) {
          joiner.add(getMounts().get(i).toUrlQueryString(String.format("%smounts%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `security_opt` to the URL query string
    if (getSecurityOpt() != null) {
      for (int i = 0; i < getSecurityOpt().size(); i++) {
        joiner.add(String.format("%ssecurity_opt%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getSecurityOpt().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `volumes_from` to the URL query string
    if (getVolumesFrom() != null) {
      for (int i = 0; i < getVolumesFrom().size(); i++) {
        joiner.add(String.format("%svolumes_from%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getVolumesFrom().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

