/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * LibpodImageSummary
 */
@JsonPropertyOrder({
  LibpodImageSummary.JSON_PROPERTY_ARCH,
  LibpodImageSummary.JSON_PROPERTY_CONTAINERS,
  LibpodImageSummary.JSON_PROPERTY_CREATED,
  LibpodImageSummary.JSON_PROPERTY_DANGLING,
  LibpodImageSummary.JSON_PROPERTY_DIGEST,
  LibpodImageSummary.JSON_PROPERTY_HISTORY,
  LibpodImageSummary.JSON_PROPERTY_ID,
  LibpodImageSummary.JSON_PROPERTY_IS_MANIFEST_LIST,
  LibpodImageSummary.JSON_PROPERTY_LABELS,
  LibpodImageSummary.JSON_PROPERTY_NAMES,
  LibpodImageSummary.JSON_PROPERTY_OS,
  LibpodImageSummary.JSON_PROPERTY_PARENT_ID,
  LibpodImageSummary.JSON_PROPERTY_READ_ONLY,
  LibpodImageSummary.JSON_PROPERTY_REPO_DIGESTS,
  LibpodImageSummary.JSON_PROPERTY_REPO_TAGS,
  LibpodImageSummary.JSON_PROPERTY_SHARED_SIZE,
  LibpodImageSummary.JSON_PROPERTY_SIZE,
  LibpodImageSummary.JSON_PROPERTY_VIRTUAL_SIZE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class LibpodImageSummary {
  public static final String JSON_PROPERTY_ARCH = "Arch";
  private String arch;

  public static final String JSON_PROPERTY_CONTAINERS = "Containers";
  private Long containers;

  public static final String JSON_PROPERTY_CREATED = "Created";
  private Long created;

  public static final String JSON_PROPERTY_DANGLING = "Dangling";
  private Boolean dangling;

  public static final String JSON_PROPERTY_DIGEST = "Digest";
  private String digest;

  public static final String JSON_PROPERTY_HISTORY = "History";
  private List<String> history = new ArrayList<>();

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_IS_MANIFEST_LIST = "IsManifestList";
  private Boolean isManifestList;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_NAMES = "Names";
  private List<String> names = new ArrayList<>();

  public static final String JSON_PROPERTY_OS = "Os";
  private String os;

  public static final String JSON_PROPERTY_PARENT_ID = "ParentId";
  private String parentId;

  public static final String JSON_PROPERTY_READ_ONLY = "ReadOnly";
  private Boolean readOnly;

  public static final String JSON_PROPERTY_REPO_DIGESTS = "RepoDigests";
  private List<String> repoDigests = new ArrayList<>();

  public static final String JSON_PROPERTY_REPO_TAGS = "RepoTags";
  private List<String> repoTags = new ArrayList<>();

  public static final String JSON_PROPERTY_SHARED_SIZE = "SharedSize";
  private Long sharedSize;

  public static final String JSON_PROPERTY_SIZE = "Size";
  private Long size;

  public static final String JSON_PROPERTY_VIRTUAL_SIZE = "VirtualSize";
  private Long virtualSize;

  public LibpodImageSummary() { 
  }

  public LibpodImageSummary arch(String arch) {
    this.arch = arch;
    return this;
  }

  /**
   * Podman extensions
   * @return arch
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getArch() {
    return arch;
  }


  @JsonProperty(JSON_PROPERTY_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArch(String arch) {
    this.arch = arch;
  }


  public LibpodImageSummary containers(Long containers) {
    this.containers = containers;
    return this;
  }

  /**
   * Get containers
   * @return containers
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getContainers() {
    return containers;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainers(Long containers) {
    this.containers = containers;
  }


  public LibpodImageSummary created(Long created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(Long created) {
    this.created = created;
  }


  public LibpodImageSummary dangling(Boolean dangling) {
    this.dangling = dangling;
    return this;
  }

  /**
   * Get dangling
   * @return dangling
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DANGLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDangling() {
    return dangling;
  }


  @JsonProperty(JSON_PROPERTY_DANGLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDangling(Boolean dangling) {
    this.dangling = dangling;
  }


  public LibpodImageSummary digest(String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * Get digest
   * @return digest
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DIGEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDigest() {
    return digest;
  }


  @JsonProperty(JSON_PROPERTY_DIGEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDigest(String digest) {
    this.digest = digest;
  }


  public LibpodImageSummary history(List<String> history) {
    this.history = history;
    return this;
  }

  public LibpodImageSummary addHistoryItem(String historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

  /**
   * Get history
   * @return history
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getHistory() {
    return history;
  }


  @JsonProperty(JSON_PROPERTY_HISTORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHistory(List<String> history) {
    this.history = history;
  }


  public LibpodImageSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public LibpodImageSummary isManifestList(Boolean isManifestList) {
    this.isManifestList = isManifestList;
    return this;
  }

  /**
   * IsManifestList is a ptr so we can distinguish between a true json empty response and false.  the docker compat side needs to return empty; where as the libpod side needs a value of true or false
   * @return isManifestList
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IS_MANIFEST_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsManifestList() {
    return isManifestList;
  }


  @JsonProperty(JSON_PROPERTY_IS_MANIFEST_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsManifestList(Boolean isManifestList) {
    this.isManifestList = isManifestList;
  }


  public LibpodImageSummary labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public LibpodImageSummary putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public LibpodImageSummary names(List<String> names) {
    this.names = names;
    return this;
  }

  public LibpodImageSummary addNamesItem(String namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getNames() {
    return names;
  }


  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNames(List<String> names) {
    this.names = names;
  }


  public LibpodImageSummary os(String os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOs() {
    return os;
  }


  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOs(String os) {
    this.os = os;
  }


  public LibpodImageSummary parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getParentId() {
    return parentId;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public LibpodImageSummary readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getReadOnly() {
    return readOnly;
  }


  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public LibpodImageSummary repoDigests(List<String> repoDigests) {
    this.repoDigests = repoDigests;
    return this;
  }

  public LibpodImageSummary addRepoDigestsItem(String repoDigestsItem) {
    if (this.repoDigests == null) {
      this.repoDigests = new ArrayList<>();
    }
    this.repoDigests.add(repoDigestsItem);
    return this;
  }

  /**
   * Get repoDigests
   * @return repoDigests
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_REPO_DIGESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getRepoDigests() {
    return repoDigests;
  }


  @JsonProperty(JSON_PROPERTY_REPO_DIGESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepoDigests(List<String> repoDigests) {
    this.repoDigests = repoDigests;
  }


  public LibpodImageSummary repoTags(List<String> repoTags) {
    this.repoTags = repoTags;
    return this;
  }

  public LibpodImageSummary addRepoTagsItem(String repoTagsItem) {
    if (this.repoTags == null) {
      this.repoTags = new ArrayList<>();
    }
    this.repoTags.add(repoTagsItem);
    return this;
  }

  /**
   * Get repoTags
   * @return repoTags
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_REPO_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getRepoTags() {
    return repoTags;
  }


  @JsonProperty(JSON_PROPERTY_REPO_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepoTags(List<String> repoTags) {
    this.repoTags = repoTags;
  }


  public LibpodImageSummary sharedSize(Long sharedSize) {
    this.sharedSize = sharedSize;
    return this;
  }

  /**
   * Get sharedSize
   * @return sharedSize
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SHARED_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSharedSize() {
    return sharedSize;
  }


  @JsonProperty(JSON_PROPERTY_SHARED_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSharedSize(Long sharedSize) {
    this.sharedSize = sharedSize;
  }


  public LibpodImageSummary size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public LibpodImageSummary virtualSize(Long virtualSize) {
    this.virtualSize = virtualSize;
    return this;
  }

  /**
   * Get virtualSize
   * @return virtualSize
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VIRTUAL_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getVirtualSize() {
    return virtualSize;
  }


  @JsonProperty(JSON_PROPERTY_VIRTUAL_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVirtualSize(Long virtualSize) {
    this.virtualSize = virtualSize;
  }


  /**
   * Return true if this LibpodImageSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibpodImageSummary libpodImageSummary = (LibpodImageSummary) o;
    return Objects.equals(this.arch, libpodImageSummary.arch) &&
        Objects.equals(this.containers, libpodImageSummary.containers) &&
        Objects.equals(this.created, libpodImageSummary.created) &&
        Objects.equals(this.dangling, libpodImageSummary.dangling) &&
        Objects.equals(this.digest, libpodImageSummary.digest) &&
        Objects.equals(this.history, libpodImageSummary.history) &&
        Objects.equals(this.id, libpodImageSummary.id) &&
        Objects.equals(this.isManifestList, libpodImageSummary.isManifestList) &&
        Objects.equals(this.labels, libpodImageSummary.labels) &&
        Objects.equals(this.names, libpodImageSummary.names) &&
        Objects.equals(this.os, libpodImageSummary.os) &&
        Objects.equals(this.parentId, libpodImageSummary.parentId) &&
        Objects.equals(this.readOnly, libpodImageSummary.readOnly) &&
        Objects.equals(this.repoDigests, libpodImageSummary.repoDigests) &&
        Objects.equals(this.repoTags, libpodImageSummary.repoTags) &&
        Objects.equals(this.sharedSize, libpodImageSummary.sharedSize) &&
        Objects.equals(this.size, libpodImageSummary.size) &&
        Objects.equals(this.virtualSize, libpodImageSummary.virtualSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arch, containers, created, dangling, digest, history, id, isManifestList, labels, names, os, parentId, readOnly, repoDigests, repoTags, sharedSize, size, virtualSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibpodImageSummary {\n");
    sb.append("    arch: ").append(toIndentedString(arch)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dangling: ").append(toIndentedString(dangling)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isManifestList: ").append(toIndentedString(isManifestList)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    repoDigests: ").append(toIndentedString(repoDigests)).append("\n");
    sb.append("    repoTags: ").append(toIndentedString(repoTags)).append("\n");
    sb.append("    sharedSize: ").append(toIndentedString(sharedSize)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    virtualSize: ").append(toIndentedString(virtualSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Arch` to the URL query string
    if (getArch() != null) {
      joiner.add(String.format("%sArch%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getArch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Containers` to the URL query string
    if (getContainers() != null) {
      joiner.add(String.format("%sContainers%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getContainers()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Dangling` to the URL query string
    if (getDangling() != null) {
      joiner.add(String.format("%sDangling%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDangling()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Digest` to the URL query string
    if (getDigest() != null) {
      joiner.add(String.format("%sDigest%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDigest()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `History` to the URL query string
    if (getHistory() != null) {
      for (int i = 0; i < getHistory().size(); i++) {
        joiner.add(String.format("%sHistory%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getHistory().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `IsManifestList` to the URL query string
    if (getIsManifestList() != null) {
      joiner.add(String.format("%sIsManifestList%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIsManifestList()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Names` to the URL query string
    if (getNames() != null) {
      for (int i = 0; i < getNames().size(); i++) {
        joiner.add(String.format("%sNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getNames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Os` to the URL query string
    if (getOs() != null) {
      joiner.add(String.format("%sOs%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ParentId` to the URL query string
    if (getParentId() != null) {
      joiner.add(String.format("%sParentId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getParentId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ReadOnly` to the URL query string
    if (getReadOnly() != null) {
      joiner.add(String.format("%sReadOnly%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReadOnly()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `RepoDigests` to the URL query string
    if (getRepoDigests() != null) {
      for (int i = 0; i < getRepoDigests().size(); i++) {
        joiner.add(String.format("%sRepoDigests%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getRepoDigests().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `RepoTags` to the URL query string
    if (getRepoTags() != null) {
      for (int i = 0; i < getRepoTags().size(); i++) {
        joiner.add(String.format("%sRepoTags%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getRepoTags().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `SharedSize` to the URL query string
    if (getSharedSize() != null) {
      joiner.add(String.format("%sSharedSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSharedSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Size` to the URL query string
    if (getSize() != null) {
      joiner.add(String.format("%sSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `VirtualSize` to the URL query string
    if (getVirtualSize() != null) {
      joiner.add(String.format("%sVirtualSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getVirtualSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

