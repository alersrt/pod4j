/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.LinuxThrottleDevice;
import io.github.alersrt.pod4j.openapi.model.LinuxWeightDevice;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * LinuxBlockIO for Linux cgroup &#39;blkio&#39; resource management
 */
@JsonPropertyOrder({
  LinuxBlockIO.JSON_PROPERTY_LEAF_WEIGHT,
  LinuxBlockIO.JSON_PROPERTY_THROTTLE_READ_BPS_DEVICE,
  LinuxBlockIO.JSON_PROPERTY_THROTTLE_READ_I_O_P_S_DEVICE,
  LinuxBlockIO.JSON_PROPERTY_THROTTLE_WRITE_BPS_DEVICE,
  LinuxBlockIO.JSON_PROPERTY_THROTTLE_WRITE_I_O_P_S_DEVICE,
  LinuxBlockIO.JSON_PROPERTY_WEIGHT,
  LinuxBlockIO.JSON_PROPERTY_WEIGHT_DEVICE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class LinuxBlockIO {
  public static final String JSON_PROPERTY_LEAF_WEIGHT = "leafWeight";
  private Integer leafWeight;

  public static final String JSON_PROPERTY_THROTTLE_READ_BPS_DEVICE = "throttleReadBpsDevice";
  private List<@Valid LinuxThrottleDevice> throttleReadBpsDevice = new ArrayList<>();

  public static final String JSON_PROPERTY_THROTTLE_READ_I_O_P_S_DEVICE = "throttleReadIOPSDevice";
  private List<@Valid LinuxThrottleDevice> throttleReadIOPSDevice = new ArrayList<>();

  public static final String JSON_PROPERTY_THROTTLE_WRITE_BPS_DEVICE = "throttleWriteBpsDevice";
  private List<@Valid LinuxThrottleDevice> throttleWriteBpsDevice = new ArrayList<>();

  public static final String JSON_PROPERTY_THROTTLE_WRITE_I_O_P_S_DEVICE = "throttleWriteIOPSDevice";
  private List<@Valid LinuxThrottleDevice> throttleWriteIOPSDevice = new ArrayList<>();

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private Integer weight;

  public static final String JSON_PROPERTY_WEIGHT_DEVICE = "weightDevice";
  private List<@Valid LinuxWeightDevice> weightDevice = new ArrayList<>();

  public LinuxBlockIO() { 
  }

  public LinuxBlockIO leafWeight(Integer leafWeight) {
    this.leafWeight = leafWeight;
    return this;
  }

  /**
   * Specifies tasks&#39; weight in the given cgroup while competing with the cgroup&#39;s child cgroups, CFQ scheduler only
   * @return leafWeight
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LEAF_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getLeafWeight() {
    return leafWeight;
  }


  @JsonProperty(JSON_PROPERTY_LEAF_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLeafWeight(Integer leafWeight) {
    this.leafWeight = leafWeight;
  }


  public LinuxBlockIO throttleReadBpsDevice(List<@Valid LinuxThrottleDevice> throttleReadBpsDevice) {
    this.throttleReadBpsDevice = throttleReadBpsDevice;
    return this;
  }

  public LinuxBlockIO addThrottleReadBpsDeviceItem(LinuxThrottleDevice throttleReadBpsDeviceItem) {
    if (this.throttleReadBpsDevice == null) {
      this.throttleReadBpsDevice = new ArrayList<>();
    }
    this.throttleReadBpsDevice.add(throttleReadBpsDeviceItem);
    return this;
  }

  /**
   * IO read rate limit per cgroup per device, bytes per second
   * @return throttleReadBpsDevice
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_THROTTLE_READ_BPS_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxThrottleDevice> getThrottleReadBpsDevice() {
    return throttleReadBpsDevice;
  }


  @JsonProperty(JSON_PROPERTY_THROTTLE_READ_BPS_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThrottleReadBpsDevice(List<@Valid LinuxThrottleDevice> throttleReadBpsDevice) {
    this.throttleReadBpsDevice = throttleReadBpsDevice;
  }


  public LinuxBlockIO throttleReadIOPSDevice(List<@Valid LinuxThrottleDevice> throttleReadIOPSDevice) {
    this.throttleReadIOPSDevice = throttleReadIOPSDevice;
    return this;
  }

  public LinuxBlockIO addThrottleReadIOPSDeviceItem(LinuxThrottleDevice throttleReadIOPSDeviceItem) {
    if (this.throttleReadIOPSDevice == null) {
      this.throttleReadIOPSDevice = new ArrayList<>();
    }
    this.throttleReadIOPSDevice.add(throttleReadIOPSDeviceItem);
    return this;
  }

  /**
   * IO read rate limit per cgroup per device, IO per second
   * @return throttleReadIOPSDevice
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_THROTTLE_READ_I_O_P_S_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxThrottleDevice> getThrottleReadIOPSDevice() {
    return throttleReadIOPSDevice;
  }


  @JsonProperty(JSON_PROPERTY_THROTTLE_READ_I_O_P_S_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThrottleReadIOPSDevice(List<@Valid LinuxThrottleDevice> throttleReadIOPSDevice) {
    this.throttleReadIOPSDevice = throttleReadIOPSDevice;
  }


  public LinuxBlockIO throttleWriteBpsDevice(List<@Valid LinuxThrottleDevice> throttleWriteBpsDevice) {
    this.throttleWriteBpsDevice = throttleWriteBpsDevice;
    return this;
  }

  public LinuxBlockIO addThrottleWriteBpsDeviceItem(LinuxThrottleDevice throttleWriteBpsDeviceItem) {
    if (this.throttleWriteBpsDevice == null) {
      this.throttleWriteBpsDevice = new ArrayList<>();
    }
    this.throttleWriteBpsDevice.add(throttleWriteBpsDeviceItem);
    return this;
  }

  /**
   * IO write rate limit per cgroup per device, bytes per second
   * @return throttleWriteBpsDevice
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_THROTTLE_WRITE_BPS_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxThrottleDevice> getThrottleWriteBpsDevice() {
    return throttleWriteBpsDevice;
  }


  @JsonProperty(JSON_PROPERTY_THROTTLE_WRITE_BPS_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThrottleWriteBpsDevice(List<@Valid LinuxThrottleDevice> throttleWriteBpsDevice) {
    this.throttleWriteBpsDevice = throttleWriteBpsDevice;
  }


  public LinuxBlockIO throttleWriteIOPSDevice(List<@Valid LinuxThrottleDevice> throttleWriteIOPSDevice) {
    this.throttleWriteIOPSDevice = throttleWriteIOPSDevice;
    return this;
  }

  public LinuxBlockIO addThrottleWriteIOPSDeviceItem(LinuxThrottleDevice throttleWriteIOPSDeviceItem) {
    if (this.throttleWriteIOPSDevice == null) {
      this.throttleWriteIOPSDevice = new ArrayList<>();
    }
    this.throttleWriteIOPSDevice.add(throttleWriteIOPSDeviceItem);
    return this;
  }

  /**
   * IO write rate limit per cgroup per device, IO per second
   * @return throttleWriteIOPSDevice
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_THROTTLE_WRITE_I_O_P_S_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxThrottleDevice> getThrottleWriteIOPSDevice() {
    return throttleWriteIOPSDevice;
  }


  @JsonProperty(JSON_PROPERTY_THROTTLE_WRITE_I_O_P_S_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThrottleWriteIOPSDevice(List<@Valid LinuxThrottleDevice> throttleWriteIOPSDevice) {
    this.throttleWriteIOPSDevice = throttleWriteIOPSDevice;
  }


  public LinuxBlockIO weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Specifies per cgroup weight
   * @return weight
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public LinuxBlockIO weightDevice(List<@Valid LinuxWeightDevice> weightDevice) {
    this.weightDevice = weightDevice;
    return this;
  }

  public LinuxBlockIO addWeightDeviceItem(LinuxWeightDevice weightDeviceItem) {
    if (this.weightDevice == null) {
      this.weightDevice = new ArrayList<>();
    }
    this.weightDevice.add(weightDeviceItem);
    return this;
  }

  /**
   * Weight per cgroup per device, can override BlkioWeight
   * @return weightDevice
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_WEIGHT_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxWeightDevice> getWeightDevice() {
    return weightDevice;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeightDevice(List<@Valid LinuxWeightDevice> weightDevice) {
    this.weightDevice = weightDevice;
  }


  /**
   * Return true if this LinuxBlockIO object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxBlockIO linuxBlockIO = (LinuxBlockIO) o;
    return Objects.equals(this.leafWeight, linuxBlockIO.leafWeight) &&
        Objects.equals(this.throttleReadBpsDevice, linuxBlockIO.throttleReadBpsDevice) &&
        Objects.equals(this.throttleReadIOPSDevice, linuxBlockIO.throttleReadIOPSDevice) &&
        Objects.equals(this.throttleWriteBpsDevice, linuxBlockIO.throttleWriteBpsDevice) &&
        Objects.equals(this.throttleWriteIOPSDevice, linuxBlockIO.throttleWriteIOPSDevice) &&
        Objects.equals(this.weight, linuxBlockIO.weight) &&
        Objects.equals(this.weightDevice, linuxBlockIO.weightDevice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leafWeight, throttleReadBpsDevice, throttleReadIOPSDevice, throttleWriteBpsDevice, throttleWriteIOPSDevice, weight, weightDevice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxBlockIO {\n");
    sb.append("    leafWeight: ").append(toIndentedString(leafWeight)).append("\n");
    sb.append("    throttleReadBpsDevice: ").append(toIndentedString(throttleReadBpsDevice)).append("\n");
    sb.append("    throttleReadIOPSDevice: ").append(toIndentedString(throttleReadIOPSDevice)).append("\n");
    sb.append("    throttleWriteBpsDevice: ").append(toIndentedString(throttleWriteBpsDevice)).append("\n");
    sb.append("    throttleWriteIOPSDevice: ").append(toIndentedString(throttleWriteIOPSDevice)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    weightDevice: ").append(toIndentedString(weightDevice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `leafWeight` to the URL query string
    if (getLeafWeight() != null) {
      joiner.add(String.format("%sleafWeight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLeafWeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `throttleReadBpsDevice` to the URL query string
    if (getThrottleReadBpsDevice() != null) {
      for (int i = 0; i < getThrottleReadBpsDevice().size(); i++) {
        if (getThrottleReadBpsDevice().get(i) != null) {
          joiner.add(getThrottleReadBpsDevice().get(i).toUrlQueryString(String.format("%sthrottleReadBpsDevice%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `throttleReadIOPSDevice` to the URL query string
    if (getThrottleReadIOPSDevice() != null) {
      for (int i = 0; i < getThrottleReadIOPSDevice().size(); i++) {
        if (getThrottleReadIOPSDevice().get(i) != null) {
          joiner.add(getThrottleReadIOPSDevice().get(i).toUrlQueryString(String.format("%sthrottleReadIOPSDevice%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `throttleWriteBpsDevice` to the URL query string
    if (getThrottleWriteBpsDevice() != null) {
      for (int i = 0; i < getThrottleWriteBpsDevice().size(); i++) {
        if (getThrottleWriteBpsDevice().get(i) != null) {
          joiner.add(getThrottleWriteBpsDevice().get(i).toUrlQueryString(String.format("%sthrottleWriteBpsDevice%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `throttleWriteIOPSDevice` to the URL query string
    if (getThrottleWriteIOPSDevice() != null) {
      for (int i = 0; i < getThrottleWriteIOPSDevice().size(); i++) {
        if (getThrottleWriteIOPSDevice().get(i) != null) {
          joiner.add(getThrottleWriteIOPSDevice().get(i).toUrlQueryString(String.format("%sthrottleWriteIOPSDevice%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `weight` to the URL query string
    if (getWeight() != null) {
      joiner.add(String.format("%sweight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `weightDevice` to the URL query string
    if (getWeightDevice() != null) {
      for (int i = 0; i < getWeightDevice().size(); i++) {
        if (getWeightDevice().get(i) != null) {
          joiner.add(getWeightDevice().get(i).toUrlQueryString(String.format("%sweightDevice%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

