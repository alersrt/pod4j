/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * LinuxCPU for Linux cgroup &#39;cpu&#39; resource management
 */
@JsonPropertyOrder({
  LinuxCPU.JSON_PROPERTY_BURST,
  LinuxCPU.JSON_PROPERTY_CPUS,
  LinuxCPU.JSON_PROPERTY_IDLE,
  LinuxCPU.JSON_PROPERTY_MEMS,
  LinuxCPU.JSON_PROPERTY_PERIOD,
  LinuxCPU.JSON_PROPERTY_QUOTA,
  LinuxCPU.JSON_PROPERTY_REALTIME_PERIOD,
  LinuxCPU.JSON_PROPERTY_REALTIME_RUNTIME,
  LinuxCPU.JSON_PROPERTY_SHARES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class LinuxCPU {
  public static final String JSON_PROPERTY_BURST = "burst";
  private Integer burst;

  public static final String JSON_PROPERTY_CPUS = "cpus";
  private String cpus;

  public static final String JSON_PROPERTY_IDLE = "idle";
  private Long idle;

  public static final String JSON_PROPERTY_MEMS = "mems";
  private String mems;

  public static final String JSON_PROPERTY_PERIOD = "period";
  private Integer period;

  public static final String JSON_PROPERTY_QUOTA = "quota";
  private Long quota;

  public static final String JSON_PROPERTY_REALTIME_PERIOD = "realtimePeriod";
  private Integer realtimePeriod;

  public static final String JSON_PROPERTY_REALTIME_RUNTIME = "realtimeRuntime";
  private Long realtimeRuntime;

  public static final String JSON_PROPERTY_SHARES = "shares";
  private Integer shares;

  public LinuxCPU() { 
  }

  public LinuxCPU burst(Integer burst) {
    this.burst = burst;
    return this;
  }

  /**
   * CPU hardcap burst limit (in usecs). Allowed accumulated cpu time additionally for burst in a given period.
   * @return burst
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_BURST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getBurst() {
    return burst;
  }


  @JsonProperty(JSON_PROPERTY_BURST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBurst(Integer burst) {
    this.burst = burst;
  }


  public LinuxCPU cpus(String cpus) {
    this.cpus = cpus;
    return this;
  }

  /**
   * CPUs to use within the cpuset. Default is to use any CPU available.
   * @return cpus
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CPUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCpus() {
    return cpus;
  }


  @JsonProperty(JSON_PROPERTY_CPUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpus(String cpus) {
    this.cpus = cpus;
  }


  public LinuxCPU idle(Long idle) {
    this.idle = idle;
    return this;
  }

  /**
   * cgroups are configured with minimum weight, 0: default behavior, 1: SCHED_IDLE.
   * @return idle
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IDLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getIdle() {
    return idle;
  }


  @JsonProperty(JSON_PROPERTY_IDLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdle(Long idle) {
    this.idle = idle;
  }


  public LinuxCPU mems(String mems) {
    this.mems = mems;
    return this;
  }

  /**
   * List of memory nodes in the cpuset. Default is to use any available memory node.
   * @return mems
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMems() {
    return mems;
  }


  @JsonProperty(JSON_PROPERTY_MEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMems(String mems) {
    this.mems = mems;
  }


  public LinuxCPU period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * CPU period to be used for hardcapping (in usecs).
   * @return period
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getPeriod() {
    return period;
  }


  @JsonProperty(JSON_PROPERTY_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPeriod(Integer period) {
    this.period = period;
  }


  public LinuxCPU quota(Long quota) {
    this.quota = quota;
    return this;
  }

  /**
   * CPU hardcap limit (in usecs). Allowed cpu time in a given period.
   * @return quota
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_QUOTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getQuota() {
    return quota;
  }


  @JsonProperty(JSON_PROPERTY_QUOTA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuota(Long quota) {
    this.quota = quota;
  }


  public LinuxCPU realtimePeriod(Integer realtimePeriod) {
    this.realtimePeriod = realtimePeriod;
    return this;
  }

  /**
   * CPU period to be used for realtime scheduling (in usecs).
   * @return realtimePeriod
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_REALTIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getRealtimePeriod() {
    return realtimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_REALTIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRealtimePeriod(Integer realtimePeriod) {
    this.realtimePeriod = realtimePeriod;
  }


  public LinuxCPU realtimeRuntime(Long realtimeRuntime) {
    this.realtimeRuntime = realtimeRuntime;
    return this;
  }

  /**
   * How much time realtime scheduling may use (in usecs).
   * @return realtimeRuntime
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_REALTIME_RUNTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getRealtimeRuntime() {
    return realtimeRuntime;
  }


  @JsonProperty(JSON_PROPERTY_REALTIME_RUNTIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRealtimeRuntime(Long realtimeRuntime) {
    this.realtimeRuntime = realtimeRuntime;
  }


  public LinuxCPU shares(Integer shares) {
    this.shares = shares;
    return this;
  }

  /**
   * CPU shares (relative weight (ratio) vs. other cgroups with cpu shares).
   * @return shares
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SHARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getShares() {
    return shares;
  }


  @JsonProperty(JSON_PROPERTY_SHARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShares(Integer shares) {
    this.shares = shares;
  }


  /**
   * Return true if this LinuxCPU object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxCPU linuxCPU = (LinuxCPU) o;
    return Objects.equals(this.burst, linuxCPU.burst) &&
        Objects.equals(this.cpus, linuxCPU.cpus) &&
        Objects.equals(this.idle, linuxCPU.idle) &&
        Objects.equals(this.mems, linuxCPU.mems) &&
        Objects.equals(this.period, linuxCPU.period) &&
        Objects.equals(this.quota, linuxCPU.quota) &&
        Objects.equals(this.realtimePeriod, linuxCPU.realtimePeriod) &&
        Objects.equals(this.realtimeRuntime, linuxCPU.realtimeRuntime) &&
        Objects.equals(this.shares, linuxCPU.shares);
  }

  @Override
  public int hashCode() {
    return Objects.hash(burst, cpus, idle, mems, period, quota, realtimePeriod, realtimeRuntime, shares);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxCPU {\n");
    sb.append("    burst: ").append(toIndentedString(burst)).append("\n");
    sb.append("    cpus: ").append(toIndentedString(cpus)).append("\n");
    sb.append("    idle: ").append(toIndentedString(idle)).append("\n");
    sb.append("    mems: ").append(toIndentedString(mems)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    realtimePeriod: ").append(toIndentedString(realtimePeriod)).append("\n");
    sb.append("    realtimeRuntime: ").append(toIndentedString(realtimeRuntime)).append("\n");
    sb.append("    shares: ").append(toIndentedString(shares)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `burst` to the URL query string
    if (getBurst() != null) {
      joiner.add(String.format("%sburst%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBurst()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cpus` to the URL query string
    if (getCpus() != null) {
      joiner.add(String.format("%scpus%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCpus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `idle` to the URL query string
    if (getIdle() != null) {
      joiner.add(String.format("%sidle%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIdle()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `mems` to the URL query string
    if (getMems() != null) {
      joiner.add(String.format("%smems%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMems()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `period` to the URL query string
    if (getPeriod() != null) {
      joiner.add(String.format("%speriod%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPeriod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `quota` to the URL query string
    if (getQuota() != null) {
      joiner.add(String.format("%squota%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getQuota()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `realtimePeriod` to the URL query string
    if (getRealtimePeriod() != null) {
      joiner.add(String.format("%srealtimePeriod%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRealtimePeriod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `realtimeRuntime` to the URL query string
    if (getRealtimeRuntime() != null) {
      joiner.add(String.format("%srealtimeRuntime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRealtimeRuntime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `shares` to the URL query string
    if (getShares() != null) {
      joiner.add(String.format("%sshares%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getShares()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

