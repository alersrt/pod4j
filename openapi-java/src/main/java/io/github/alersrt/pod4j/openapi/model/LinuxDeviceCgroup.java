/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * LinuxDeviceCgroup represents a device rule for the devices specified to the device controller
 */
@JsonPropertyOrder({
  LinuxDeviceCgroup.JSON_PROPERTY_ACCESS,
  LinuxDeviceCgroup.JSON_PROPERTY_ALLOW,
  LinuxDeviceCgroup.JSON_PROPERTY_MAJOR,
  LinuxDeviceCgroup.JSON_PROPERTY_MINOR,
  LinuxDeviceCgroup.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class LinuxDeviceCgroup {
  public static final String JSON_PROPERTY_ACCESS = "access";
  private String access;

  public static final String JSON_PROPERTY_ALLOW = "allow";
  private Boolean allow;

  public static final String JSON_PROPERTY_MAJOR = "major";
  private Long major;

  public static final String JSON_PROPERTY_MINOR = "minor";
  private Long minor;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public LinuxDeviceCgroup() { 
  }

  public LinuxDeviceCgroup access(String access) {
    this.access = access;
    return this;
  }

  /**
   * Cgroup access permissions format, rwm.
   * @return access
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAccess() {
    return access;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccess(String access) {
    this.access = access;
  }


  public LinuxDeviceCgroup allow(Boolean allow) {
    this.allow = allow;
    return this;
  }

  /**
   * Allow or deny
   * @return allow
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ALLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAllow() {
    return allow;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllow(Boolean allow) {
    this.allow = allow;
  }


  public LinuxDeviceCgroup major(Long major) {
    this.major = major;
    return this;
  }

  /**
   * Major is the device&#39;s major number.
   * @return major
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MAJOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getMajor() {
    return major;
  }


  @JsonProperty(JSON_PROPERTY_MAJOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMajor(Long major) {
    this.major = major;
  }


  public LinuxDeviceCgroup minor(Long minor) {
    this.minor = minor;
    return this;
  }

  /**
   * Minor is the device&#39;s minor number.
   * @return minor
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MINOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getMinor() {
    return minor;
  }


  @JsonProperty(JSON_PROPERTY_MINOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinor(Long minor) {
    this.minor = minor;
  }


  public LinuxDeviceCgroup type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Device type, block, char, etc.
   * @return type
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  /**
   * Return true if this LinuxDeviceCgroup object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxDeviceCgroup linuxDeviceCgroup = (LinuxDeviceCgroup) o;
    return Objects.equals(this.access, linuxDeviceCgroup.access) &&
        Objects.equals(this.allow, linuxDeviceCgroup.allow) &&
        Objects.equals(this.major, linuxDeviceCgroup.major) &&
        Objects.equals(this.minor, linuxDeviceCgroup.minor) &&
        Objects.equals(this.type, linuxDeviceCgroup.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, allow, major, minor, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxDeviceCgroup {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    allow: ").append(toIndentedString(allow)).append("\n");
    sb.append("    major: ").append(toIndentedString(major)).append("\n");
    sb.append("    minor: ").append(toIndentedString(minor)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `access` to the URL query string
    if (getAccess() != null) {
      joiner.add(String.format("%saccess%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAccess()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `allow` to the URL query string
    if (getAllow() != null) {
      joiner.add(String.format("%sallow%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAllow()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `major` to the URL query string
    if (getMajor() != null) {
      joiner.add(String.format("%smajor%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMajor()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `minor` to the URL query string
    if (getMinor() != null) {
      joiner.add(String.format("%sminor%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMinor()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

