/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * LinuxIntelRdt has container runtime resource constraints for Intel RDT CAT and MBA features and flags enabling Intel RDT CMT and MBM features. Intel RDT features are available in Linux 4.14 and newer kernel versions.
 */
@JsonPropertyOrder({
  LinuxIntelRdt.JSON_PROPERTY_CLOS_I_D,
  LinuxIntelRdt.JSON_PROPERTY_ENABLE_C_M_T,
  LinuxIntelRdt.JSON_PROPERTY_ENABLE_M_B_M,
  LinuxIntelRdt.JSON_PROPERTY_L3_CACHE_SCHEMA,
  LinuxIntelRdt.JSON_PROPERTY_MEM_BW_SCHEMA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class LinuxIntelRdt {
  public static final String JSON_PROPERTY_CLOS_I_D = "closID";
  private String closID;

  public static final String JSON_PROPERTY_ENABLE_C_M_T = "enableCMT";
  private Boolean enableCMT;

  public static final String JSON_PROPERTY_ENABLE_M_B_M = "enableMBM";
  private Boolean enableMBM;

  public static final String JSON_PROPERTY_L3_CACHE_SCHEMA = "l3CacheSchema";
  private String l3CacheSchema;

  public static final String JSON_PROPERTY_MEM_BW_SCHEMA = "memBwSchema";
  private String memBwSchema;

  public LinuxIntelRdt() { 
  }

  public LinuxIntelRdt closID(String closID) {
    this.closID = closID;
    return this;
  }

  /**
   * The identity for RDT Class of Service
   * @return closID
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CLOS_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getClosID() {
    return closID;
  }


  @JsonProperty(JSON_PROPERTY_CLOS_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClosID(String closID) {
    this.closID = closID;
  }


  public LinuxIntelRdt enableCMT(Boolean enableCMT) {
    this.enableCMT = enableCMT;
    return this;
  }

  /**
   * EnableCMT is the flag to indicate if the Intel RDT CMT is enabled. CMT (Cache Monitoring Technology) supports monitoring of the last-level cache (LLC) occupancy for the container.
   * @return enableCMT
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENABLE_C_M_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableCMT() {
    return enableCMT;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_C_M_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableCMT(Boolean enableCMT) {
    this.enableCMT = enableCMT;
  }


  public LinuxIntelRdt enableMBM(Boolean enableMBM) {
    this.enableMBM = enableMBM;
    return this;
  }

  /**
   * EnableMBM is the flag to indicate if the Intel RDT MBM is enabled. MBM (Memory Bandwidth Monitoring) supports monitoring of total and local memory bandwidth for the container.
   * @return enableMBM
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENABLE_M_B_M)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnableMBM() {
    return enableMBM;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_M_B_M)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableMBM(Boolean enableMBM) {
    this.enableMBM = enableMBM;
  }


  public LinuxIntelRdt l3CacheSchema(String l3CacheSchema) {
    this.l3CacheSchema = l3CacheSchema;
    return this;
  }

  /**
   * The schema for L3 cache id and capacity bitmask (CBM) Format: \&quot;L3:&lt;cache_id0&gt;&#x3D;&lt;cbm0&gt;;&lt;cache_id1&gt;&#x3D;&lt;cbm1&gt;;...\&quot;
   * @return l3CacheSchema
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_L3_CACHE_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getL3CacheSchema() {
    return l3CacheSchema;
  }


  @JsonProperty(JSON_PROPERTY_L3_CACHE_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setL3CacheSchema(String l3CacheSchema) {
    this.l3CacheSchema = l3CacheSchema;
  }


  public LinuxIntelRdt memBwSchema(String memBwSchema) {
    this.memBwSchema = memBwSchema;
    return this;
  }

  /**
   * The schema of memory bandwidth per L3 cache id Format: \&quot;MB:&lt;cache_id0&gt;&#x3D;bandwidth0;&lt;cache_id1&gt;&#x3D;bandwidth1;...\&quot; The unit of memory bandwidth is specified in \&quot;percentages\&quot; by default, and in \&quot;MBps\&quot; if MBA Software Controller is enabled.
   * @return memBwSchema
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MEM_BW_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMemBwSchema() {
    return memBwSchema;
  }


  @JsonProperty(JSON_PROPERTY_MEM_BW_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemBwSchema(String memBwSchema) {
    this.memBwSchema = memBwSchema;
  }


  /**
   * Return true if this LinuxIntelRdt object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxIntelRdt linuxIntelRdt = (LinuxIntelRdt) o;
    return Objects.equals(this.closID, linuxIntelRdt.closID) &&
        Objects.equals(this.enableCMT, linuxIntelRdt.enableCMT) &&
        Objects.equals(this.enableMBM, linuxIntelRdt.enableMBM) &&
        Objects.equals(this.l3CacheSchema, linuxIntelRdt.l3CacheSchema) &&
        Objects.equals(this.memBwSchema, linuxIntelRdt.memBwSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closID, enableCMT, enableMBM, l3CacheSchema, memBwSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxIntelRdt {\n");
    sb.append("    closID: ").append(toIndentedString(closID)).append("\n");
    sb.append("    enableCMT: ").append(toIndentedString(enableCMT)).append("\n");
    sb.append("    enableMBM: ").append(toIndentedString(enableMBM)).append("\n");
    sb.append("    l3CacheSchema: ").append(toIndentedString(l3CacheSchema)).append("\n");
    sb.append("    memBwSchema: ").append(toIndentedString(memBwSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `closID` to the URL query string
    if (getClosID() != null) {
      joiner.add(String.format("%sclosID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getClosID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `enableCMT` to the URL query string
    if (getEnableCMT() != null) {
      joiner.add(String.format("%senableCMT%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEnableCMT()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `enableMBM` to the URL query string
    if (getEnableMBM() != null) {
      joiner.add(String.format("%senableMBM%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEnableMBM()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `l3CacheSchema` to the URL query string
    if (getL3CacheSchema() != null) {
      joiner.add(String.format("%sl3CacheSchema%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getL3CacheSchema()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `memBwSchema` to the URL query string
    if (getMemBwSchema() != null) {
      joiner.add(String.format("%smemBwSchema%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMemBwSchema()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

