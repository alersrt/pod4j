/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * LinuxMemory for Linux cgroup &#39;memory&#39; resource management
 */
@JsonPropertyOrder({
  LinuxMemory.JSON_PROPERTY_CHECK_BEFORE_UPDATE,
  LinuxMemory.JSON_PROPERTY_DISABLE_O_O_M_KILLER,
  LinuxMemory.JSON_PROPERTY_KERNEL,
  LinuxMemory.JSON_PROPERTY_KERNEL_T_C_P,
  LinuxMemory.JSON_PROPERTY_LIMIT,
  LinuxMemory.JSON_PROPERTY_RESERVATION,
  LinuxMemory.JSON_PROPERTY_SWAP,
  LinuxMemory.JSON_PROPERTY_SWAPPINESS,
  LinuxMemory.JSON_PROPERTY_USE_HIERARCHY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class LinuxMemory {
  public static final String JSON_PROPERTY_CHECK_BEFORE_UPDATE = "checkBeforeUpdate";
  private Boolean checkBeforeUpdate;

  public static final String JSON_PROPERTY_DISABLE_O_O_M_KILLER = "disableOOMKiller";
  private Boolean disableOOMKiller;

  public static final String JSON_PROPERTY_KERNEL = "kernel";
  private Long kernel;

  public static final String JSON_PROPERTY_KERNEL_T_C_P = "kernelTCP";
  private Long kernelTCP;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  private Long limit;

  public static final String JSON_PROPERTY_RESERVATION = "reservation";
  private Long reservation;

  public static final String JSON_PROPERTY_SWAP = "swap";
  private Long swap;

  public static final String JSON_PROPERTY_SWAPPINESS = "swappiness";
  private Integer swappiness;

  public static final String JSON_PROPERTY_USE_HIERARCHY = "useHierarchy";
  private Boolean useHierarchy;

  public LinuxMemory() { 
  }

  public LinuxMemory checkBeforeUpdate(Boolean checkBeforeUpdate) {
    this.checkBeforeUpdate = checkBeforeUpdate;
    return this;
  }

  /**
   * CheckBeforeUpdate enables checking if a new memory limit is lower than the current usage during update, and if so, rejecting the new limit.
   * @return checkBeforeUpdate
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CHECK_BEFORE_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCheckBeforeUpdate() {
    return checkBeforeUpdate;
  }


  @JsonProperty(JSON_PROPERTY_CHECK_BEFORE_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCheckBeforeUpdate(Boolean checkBeforeUpdate) {
    this.checkBeforeUpdate = checkBeforeUpdate;
  }


  public LinuxMemory disableOOMKiller(Boolean disableOOMKiller) {
    this.disableOOMKiller = disableOOMKiller;
    return this;
  }

  /**
   * DisableOOMKiller disables the OOM killer for out of memory conditions
   * @return disableOOMKiller
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DISABLE_O_O_M_KILLER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getDisableOOMKiller() {
    return disableOOMKiller;
  }


  @JsonProperty(JSON_PROPERTY_DISABLE_O_O_M_KILLER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisableOOMKiller(Boolean disableOOMKiller) {
    this.disableOOMKiller = disableOOMKiller;
  }


  public LinuxMemory kernel(Long kernel) {
    this.kernel = kernel;
    return this;
  }

  /**
   * Kernel memory limit (in bytes).  Deprecated: kernel-memory limits are not supported in cgroups v2, and were obsoleted in [kernel v5.4]. This field should no longer be used, as it may be ignored by runtimes.  [kernel v5.4]: https://github.com/torvalds/linux/commit/0158115f702b0ba208ab0
   * @return kernel
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_KERNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getKernel() {
    return kernel;
  }


  @JsonProperty(JSON_PROPERTY_KERNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKernel(Long kernel) {
    this.kernel = kernel;
  }


  public LinuxMemory kernelTCP(Long kernelTCP) {
    this.kernelTCP = kernelTCP;
    return this;
  }

  /**
   * Kernel memory limit for tcp (in bytes)
   * @return kernelTCP
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_KERNEL_T_C_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getKernelTCP() {
    return kernelTCP;
  }


  @JsonProperty(JSON_PROPERTY_KERNEL_T_C_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKernelTCP(Long kernelTCP) {
    this.kernelTCP = kernelTCP;
  }


  public LinuxMemory limit(Long limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Memory limit (in bytes).
   * @return limit
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimit(Long limit) {
    this.limit = limit;
  }


  public LinuxMemory reservation(Long reservation) {
    this.reservation = reservation;
    return this;
  }

  /**
   * Memory reservation or soft_limit (in bytes).
   * @return reservation
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RESERVATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getReservation() {
    return reservation;
  }


  @JsonProperty(JSON_PROPERTY_RESERVATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReservation(Long reservation) {
    this.reservation = reservation;
  }


  public LinuxMemory swap(Long swap) {
    this.swap = swap;
    return this;
  }

  /**
   * Total memory limit (memory + swap).
   * @return swap
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SWAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSwap() {
    return swap;
  }


  @JsonProperty(JSON_PROPERTY_SWAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSwap(Long swap) {
    this.swap = swap;
  }


  public LinuxMemory swappiness(Integer swappiness) {
    this.swappiness = swappiness;
    return this;
  }

  /**
   * How aggressive the kernel will swap memory pages.
   * @return swappiness
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SWAPPINESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getSwappiness() {
    return swappiness;
  }


  @JsonProperty(JSON_PROPERTY_SWAPPINESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSwappiness(Integer swappiness) {
    this.swappiness = swappiness;
  }


  public LinuxMemory useHierarchy(Boolean useHierarchy) {
    this.useHierarchy = useHierarchy;
    return this;
  }

  /**
   * Enables hierarchical memory accounting
   * @return useHierarchy
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USE_HIERARCHY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getUseHierarchy() {
    return useHierarchy;
  }


  @JsonProperty(JSON_PROPERTY_USE_HIERARCHY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseHierarchy(Boolean useHierarchy) {
    this.useHierarchy = useHierarchy;
  }


  /**
   * Return true if this LinuxMemory object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxMemory linuxMemory = (LinuxMemory) o;
    return Objects.equals(this.checkBeforeUpdate, linuxMemory.checkBeforeUpdate) &&
        Objects.equals(this.disableOOMKiller, linuxMemory.disableOOMKiller) &&
        Objects.equals(this.kernel, linuxMemory.kernel) &&
        Objects.equals(this.kernelTCP, linuxMemory.kernelTCP) &&
        Objects.equals(this.limit, linuxMemory.limit) &&
        Objects.equals(this.reservation, linuxMemory.reservation) &&
        Objects.equals(this.swap, linuxMemory.swap) &&
        Objects.equals(this.swappiness, linuxMemory.swappiness) &&
        Objects.equals(this.useHierarchy, linuxMemory.useHierarchy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkBeforeUpdate, disableOOMKiller, kernel, kernelTCP, limit, reservation, swap, swappiness, useHierarchy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxMemory {\n");
    sb.append("    checkBeforeUpdate: ").append(toIndentedString(checkBeforeUpdate)).append("\n");
    sb.append("    disableOOMKiller: ").append(toIndentedString(disableOOMKiller)).append("\n");
    sb.append("    kernel: ").append(toIndentedString(kernel)).append("\n");
    sb.append("    kernelTCP: ").append(toIndentedString(kernelTCP)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    reservation: ").append(toIndentedString(reservation)).append("\n");
    sb.append("    swap: ").append(toIndentedString(swap)).append("\n");
    sb.append("    swappiness: ").append(toIndentedString(swappiness)).append("\n");
    sb.append("    useHierarchy: ").append(toIndentedString(useHierarchy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `checkBeforeUpdate` to the URL query string
    if (getCheckBeforeUpdate() != null) {
      joiner.add(String.format("%scheckBeforeUpdate%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCheckBeforeUpdate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `disableOOMKiller` to the URL query string
    if (getDisableOOMKiller() != null) {
      joiner.add(String.format("%sdisableOOMKiller%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDisableOOMKiller()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `kernel` to the URL query string
    if (getKernel() != null) {
      joiner.add(String.format("%skernel%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getKernel()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `kernelTCP` to the URL query string
    if (getKernelTCP() != null) {
      joiner.add(String.format("%skernelTCP%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getKernelTCP()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `limit` to the URL query string
    if (getLimit() != null) {
      joiner.add(String.format("%slimit%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLimit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `reservation` to the URL query string
    if (getReservation() != null) {
      joiner.add(String.format("%sreservation%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReservation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `swap` to the URL query string
    if (getSwap() != null) {
      joiner.add(String.format("%sswap%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSwap()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `swappiness` to the URL query string
    if (getSwappiness() != null) {
      joiner.add(String.format("%sswappiness%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSwappiness()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `useHierarchy` to the URL query string
    if (getUseHierarchy() != null) {
      joiner.add(String.format("%suseHierarchy%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUseHierarchy()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

