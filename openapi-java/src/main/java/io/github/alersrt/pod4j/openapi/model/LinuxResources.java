/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.LinuxBlockIO;
import io.github.alersrt.pod4j.openapi.model.LinuxCPU;
import io.github.alersrt.pod4j.openapi.model.LinuxDeviceCgroup;
import io.github.alersrt.pod4j.openapi.model.LinuxHugepageLimit;
import io.github.alersrt.pod4j.openapi.model.LinuxMemory;
import io.github.alersrt.pod4j.openapi.model.LinuxNetwork;
import io.github.alersrt.pod4j.openapi.model.LinuxPids;
import io.github.alersrt.pod4j.openapi.model.LinuxRdma;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * LinuxResources has container runtime resource constraints
 */
@JsonPropertyOrder({
  LinuxResources.JSON_PROPERTY_BLOCK_I_O,
  LinuxResources.JSON_PROPERTY_CPU,
  LinuxResources.JSON_PROPERTY_DEVICES,
  LinuxResources.JSON_PROPERTY_HUGEPAGE_LIMITS,
  LinuxResources.JSON_PROPERTY_MEMORY,
  LinuxResources.JSON_PROPERTY_NETWORK,
  LinuxResources.JSON_PROPERTY_PIDS,
  LinuxResources.JSON_PROPERTY_RDMA,
  LinuxResources.JSON_PROPERTY_UNIFIED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class LinuxResources {
  public static final String JSON_PROPERTY_BLOCK_I_O = "blockIO";
  private LinuxBlockIO blockIO;

  public static final String JSON_PROPERTY_CPU = "cpu";
  private LinuxCPU cpu;

  public static final String JSON_PROPERTY_DEVICES = "devices";
  private List<@Valid LinuxDeviceCgroup> devices = new ArrayList<>();

  public static final String JSON_PROPERTY_HUGEPAGE_LIMITS = "hugepageLimits";
  private List<@Valid LinuxHugepageLimit> hugepageLimits = new ArrayList<>();

  public static final String JSON_PROPERTY_MEMORY = "memory";
  private LinuxMemory memory;

  public static final String JSON_PROPERTY_NETWORK = "network";
  private LinuxNetwork network;

  public static final String JSON_PROPERTY_PIDS = "pids";
  private LinuxPids pids;

  public static final String JSON_PROPERTY_RDMA = "rdma";
  private Map<String, LinuxRdma> rdma = new HashMap<>();

  public static final String JSON_PROPERTY_UNIFIED = "unified";
  private Map<String, String> unified = new HashMap<>();

  public LinuxResources() { 
  }

  public LinuxResources blockIO(LinuxBlockIO blockIO) {
    this.blockIO = blockIO;
    return this;
  }

  /**
   * Get blockIO
   * @return blockIO
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_BLOCK_I_O)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LinuxBlockIO getBlockIO() {
    return blockIO;
  }


  @JsonProperty(JSON_PROPERTY_BLOCK_I_O)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlockIO(LinuxBlockIO blockIO) {
    this.blockIO = blockIO;
  }


  public LinuxResources cpu(LinuxCPU cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CPU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LinuxCPU getCpu() {
    return cpu;
  }


  @JsonProperty(JSON_PROPERTY_CPU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpu(LinuxCPU cpu) {
    this.cpu = cpu;
  }


  public LinuxResources devices(List<@Valid LinuxDeviceCgroup> devices) {
    this.devices = devices;
    return this;
  }

  public LinuxResources addDevicesItem(LinuxDeviceCgroup devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

  /**
   * Devices configures the device allowlist.
   * @return devices
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxDeviceCgroup> getDevices() {
    return devices;
  }


  @JsonProperty(JSON_PROPERTY_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevices(List<@Valid LinuxDeviceCgroup> devices) {
    this.devices = devices;
  }


  public LinuxResources hugepageLimits(List<@Valid LinuxHugepageLimit> hugepageLimits) {
    this.hugepageLimits = hugepageLimits;
    return this;
  }

  public LinuxResources addHugepageLimitsItem(LinuxHugepageLimit hugepageLimitsItem) {
    if (this.hugepageLimits == null) {
      this.hugepageLimits = new ArrayList<>();
    }
    this.hugepageLimits.add(hugepageLimitsItem);
    return this;
  }

  /**
   * Hugetlb limits (in bytes). Default to reservation limits if supported.
   * @return hugepageLimits
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_HUGEPAGE_LIMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid LinuxHugepageLimit> getHugepageLimits() {
    return hugepageLimits;
  }


  @JsonProperty(JSON_PROPERTY_HUGEPAGE_LIMITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHugepageLimits(List<@Valid LinuxHugepageLimit> hugepageLimits) {
    this.hugepageLimits = hugepageLimits;
  }


  public LinuxResources memory(LinuxMemory memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_MEMORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LinuxMemory getMemory() {
    return memory;
  }


  @JsonProperty(JSON_PROPERTY_MEMORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemory(LinuxMemory memory) {
    this.memory = memory;
  }


  public LinuxResources network(LinuxNetwork network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LinuxNetwork getNetwork() {
    return network;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetwork(LinuxNetwork network) {
    this.network = network;
  }


  public LinuxResources pids(LinuxPids pids) {
    this.pids = pids;
    return this;
  }

  /**
   * Get pids
   * @return pids
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_PIDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LinuxPids getPids() {
    return pids;
  }


  @JsonProperty(JSON_PROPERTY_PIDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPids(LinuxPids pids) {
    this.pids = pids;
  }


  public LinuxResources rdma(Map<String, LinuxRdma> rdma) {
    this.rdma = rdma;
    return this;
  }

  public LinuxResources putRdmaItem(String key, LinuxRdma rdmaItem) {
    if (this.rdma == null) {
      this.rdma = new HashMap<>();
    }
    this.rdma.put(key, rdmaItem);
    return this;
  }

  /**
   * Rdma resource restriction configuration. Limits are a set of key value pairs that define RDMA resource limits, where the key is device name and value is resource limits.
   * @return rdma
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_RDMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, LinuxRdma> getRdma() {
    return rdma;
  }


  @JsonProperty(JSON_PROPERTY_RDMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRdma(Map<String, LinuxRdma> rdma) {
    this.rdma = rdma;
  }


  public LinuxResources unified(Map<String, String> unified) {
    this.unified = unified;
    return this;
  }

  public LinuxResources putUnifiedItem(String key, String unifiedItem) {
    if (this.unified == null) {
      this.unified = new HashMap<>();
    }
    this.unified.put(key, unifiedItem);
    return this;
  }

  /**
   * Unified resources.
   * @return unified
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_UNIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getUnified() {
    return unified;
  }


  @JsonProperty(JSON_PROPERTY_UNIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnified(Map<String, String> unified) {
    this.unified = unified;
  }


  /**
   * Return true if this LinuxResources object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxResources linuxResources = (LinuxResources) o;
    return Objects.equals(this.blockIO, linuxResources.blockIO) &&
        Objects.equals(this.cpu, linuxResources.cpu) &&
        Objects.equals(this.devices, linuxResources.devices) &&
        Objects.equals(this.hugepageLimits, linuxResources.hugepageLimits) &&
        Objects.equals(this.memory, linuxResources.memory) &&
        Objects.equals(this.network, linuxResources.network) &&
        Objects.equals(this.pids, linuxResources.pids) &&
        Objects.equals(this.rdma, linuxResources.rdma) &&
        Objects.equals(this.unified, linuxResources.unified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockIO, cpu, devices, hugepageLimits, memory, network, pids, rdma, unified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxResources {\n");
    sb.append("    blockIO: ").append(toIndentedString(blockIO)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    hugepageLimits: ").append(toIndentedString(hugepageLimits)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    pids: ").append(toIndentedString(pids)).append("\n");
    sb.append("    rdma: ").append(toIndentedString(rdma)).append("\n");
    sb.append("    unified: ").append(toIndentedString(unified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `blockIO` to the URL query string
    if (getBlockIO() != null) {
      joiner.add(getBlockIO().toUrlQueryString(prefix + "blockIO" + suffix));
    }

    // add `cpu` to the URL query string
    if (getCpu() != null) {
      joiner.add(getCpu().toUrlQueryString(prefix + "cpu" + suffix));
    }

    // add `devices` to the URL query string
    if (getDevices() != null) {
      for (int i = 0; i < getDevices().size(); i++) {
        if (getDevices().get(i) != null) {
          joiner.add(getDevices().get(i).toUrlQueryString(String.format("%sdevices%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `hugepageLimits` to the URL query string
    if (getHugepageLimits() != null) {
      for (int i = 0; i < getHugepageLimits().size(); i++) {
        if (getHugepageLimits().get(i) != null) {
          joiner.add(getHugepageLimits().get(i).toUrlQueryString(String.format("%shugepageLimits%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `memory` to the URL query string
    if (getMemory() != null) {
      joiner.add(getMemory().toUrlQueryString(prefix + "memory" + suffix));
    }

    // add `network` to the URL query string
    if (getNetwork() != null) {
      joiner.add(getNetwork().toUrlQueryString(prefix + "network" + suffix));
    }

    // add `pids` to the URL query string
    if (getPids() != null) {
      joiner.add(getPids().toUrlQueryString(prefix + "pids" + suffix));
    }

    // add `rdma` to the URL query string
    if (getRdma() != null) {
      for (String _key : getRdma().keySet()) {
        if (getRdma().get(_key) != null) {
          joiner.add(getRdma().get(_key).toUrlQueryString(String.format("%srdma%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `unified` to the URL query string
    if (getUnified() != null) {
      for (String _key : getUnified().keySet()) {
        joiner.add(String.format("%sunified%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getUnified().get(_key), URLEncoder.encode(ApiClient.valueToString(getUnified().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

