/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ContainerSize;
import io.github.alersrt.pod4j.openapi.model.ListContainerNamespaces;
import io.github.alersrt.pod4j.openapi.model.PortMapping;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ListContainer describes a container suitable for listing
 */
@JsonPropertyOrder({
  ListContainer.JSON_PROPERTY_AUTO_REMOVE,
  ListContainer.JSON_PROPERTY_CI_D_FILE,
  ListContainer.JSON_PROPERTY_COMMAND,
  ListContainer.JSON_PROPERTY_CREATED,
  ListContainer.JSON_PROPERTY_CREATED_AT,
  ListContainer.JSON_PROPERTY_EXIT_CODE,
  ListContainer.JSON_PROPERTY_EXITED,
  ListContainer.JSON_PROPERTY_EXITED_AT,
  ListContainer.JSON_PROPERTY_EXPOSED_PORTS,
  ListContainer.JSON_PROPERTY_ID,
  ListContainer.JSON_PROPERTY_IMAGE,
  ListContainer.JSON_PROPERTY_IMAGE_I_D,
  ListContainer.JSON_PROPERTY_IS_INFRA,
  ListContainer.JSON_PROPERTY_LABELS,
  ListContainer.JSON_PROPERTY_MOUNTS,
  ListContainer.JSON_PROPERTY_NAMES,
  ListContainer.JSON_PROPERTY_NAMESPACES,
  ListContainer.JSON_PROPERTY_NETWORKS,
  ListContainer.JSON_PROPERTY_PID,
  ListContainer.JSON_PROPERTY_POD,
  ListContainer.JSON_PROPERTY_POD_NAME,
  ListContainer.JSON_PROPERTY_PORTS,
  ListContainer.JSON_PROPERTY_RESTARTS,
  ListContainer.JSON_PROPERTY_SIZE,
  ListContainer.JSON_PROPERTY_STARTED_AT,
  ListContainer.JSON_PROPERTY_STATE,
  ListContainer.JSON_PROPERTY_STATUS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ListContainer {
  public static final String JSON_PROPERTY_AUTO_REMOVE = "AutoRemove";
  private Boolean autoRemove;

  public static final String JSON_PROPERTY_CI_D_FILE = "CIDFile";
  private String ciDFile;

  public static final String JSON_PROPERTY_COMMAND = "Command";
  private List<String> command = new ArrayList<>();

  public static final String JSON_PROPERTY_CREATED = "Created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_CREATED_AT = "CreatedAt";
  private String createdAt;

  public static final String JSON_PROPERTY_EXIT_CODE = "ExitCode";
  private Integer exitCode;

  public static final String JSON_PROPERTY_EXITED = "Exited";
  private Boolean exited;

  public static final String JSON_PROPERTY_EXITED_AT = "ExitedAt";
  private Long exitedAt;

  public static final String JSON_PROPERTY_EXPOSED_PORTS = "ExposedPorts";
  private Object exposedPorts;

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_IMAGE = "Image";
  private String image;

  public static final String JSON_PROPERTY_IMAGE_I_D = "ImageID";
  private String imageID;

  public static final String JSON_PROPERTY_IS_INFRA = "IsInfra";
  private Boolean isInfra;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_MOUNTS = "Mounts";
  private List<String> mounts = new ArrayList<>();

  public static final String JSON_PROPERTY_NAMES = "Names";
  private List<String> names = new ArrayList<>();

  public static final String JSON_PROPERTY_NAMESPACES = "Namespaces";
  private ListContainerNamespaces namespaces;

  public static final String JSON_PROPERTY_NETWORKS = "Networks";
  private List<String> networks = new ArrayList<>();

  public static final String JSON_PROPERTY_PID = "Pid";
  private Long pid;

  public static final String JSON_PROPERTY_POD = "Pod";
  private String pod;

  public static final String JSON_PROPERTY_POD_NAME = "PodName";
  private String podName;

  public static final String JSON_PROPERTY_PORTS = "Ports";
  private List<@Valid PortMapping> ports = new ArrayList<>();

  public static final String JSON_PROPERTY_RESTARTS = "Restarts";
  private Integer restarts;

  public static final String JSON_PROPERTY_SIZE = "Size";
  private ContainerSize size;

  public static final String JSON_PROPERTY_STARTED_AT = "StartedAt";
  private Long startedAt;

  public static final String JSON_PROPERTY_STATE = "State";
  private String state;

  public static final String JSON_PROPERTY_STATUS = "Status";
  private String status;

  public ListContainer() { 
  }

  public ListContainer autoRemove(Boolean autoRemove) {
    this.autoRemove = autoRemove;
    return this;
  }

  /**
   * AutoRemove
   * @return autoRemove
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_AUTO_REMOVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getAutoRemove() {
    return autoRemove;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_REMOVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoRemove(Boolean autoRemove) {
    this.autoRemove = autoRemove;
  }


  public ListContainer ciDFile(String ciDFile) {
    this.ciDFile = ciDFile;
    return this;
  }

  /**
   * CIDFile specified at creation time.
   * @return ciDFile
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CI_D_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCiDFile() {
    return ciDFile;
  }


  @JsonProperty(JSON_PROPERTY_CI_D_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCiDFile(String ciDFile) {
    this.ciDFile = ciDFile;
  }


  public ListContainer command(List<String> command) {
    this.command = command;
    return this;
  }

  public ListContainer addCommandItem(String commandItem) {
    if (this.command == null) {
      this.command = new ArrayList<>();
    }
    this.command.add(commandItem);
    return this;
  }

  /**
   * Container command
   * @return command
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCommand() {
    return command;
  }


  @JsonProperty(JSON_PROPERTY_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommand(List<String> command) {
    this.command = command;
  }


  public ListContainer created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Container creation time
   * @return created
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ListContainer createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Human-readable container creation time.
   * @return createdAt
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public ListContainer exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * If container has exited, the return code from the command
   * @return exitCode
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXIT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getExitCode() {
    return exitCode;
  }


  @JsonProperty(JSON_PROPERTY_EXIT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }


  public ListContainer exited(Boolean exited) {
    this.exited = exited;
    return this;
  }

  /**
   * If container has exited/stopped
   * @return exited
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXITED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getExited() {
    return exited;
  }


  @JsonProperty(JSON_PROPERTY_EXITED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExited(Boolean exited) {
    this.exited = exited;
  }


  public ListContainer exitedAt(Long exitedAt) {
    this.exitedAt = exitedAt;
    return this;
  }

  /**
   * Time container exited
   * @return exitedAt
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXITED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getExitedAt() {
    return exitedAt;
  }


  @JsonProperty(JSON_PROPERTY_EXITED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExitedAt(Long exitedAt) {
    this.exitedAt = exitedAt;
  }


  public ListContainer exposedPorts(Object exposedPorts) {
    this.exposedPorts = exposedPorts;
    return this;
  }

  /**
   * ExposedPorts contains the ports that are exposed but not forwarded, see Ports for forwarded ports. The key is the port number and the string slice contains the protocols, i.e. \&quot;tcp\&quot;, \&quot;udp\&quot; and \&quot;sctp\&quot;.
   * @return exposedPorts
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXPOSED_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getExposedPorts() {
    return exposedPorts;
  }


  @JsonProperty(JSON_PROPERTY_EXPOSED_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExposedPorts(Object exposedPorts) {
    this.exposedPorts = exposedPorts;
  }


  public ListContainer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier for the container
   * @return id
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public ListContainer image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Container image
   * @return image
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public ListContainer imageID(String imageID) {
    this.imageID = imageID;
    return this;
  }

  /**
   * Container image ID
   * @return imageID
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageID() {
    return imageID;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageID(String imageID) {
    this.imageID = imageID;
  }


  public ListContainer isInfra(Boolean isInfra) {
    this.isInfra = isInfra;
    return this;
  }

  /**
   * If this container is a Pod infra container
   * @return isInfra
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IS_INFRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsInfra() {
    return isInfra;
  }


  @JsonProperty(JSON_PROPERTY_IS_INFRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsInfra(Boolean isInfra) {
    this.isInfra = isInfra;
  }


  public ListContainer labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ListContainer putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels for container
   * @return labels
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ListContainer mounts(List<String> mounts) {
    this.mounts = mounts;
    return this;
  }

  public ListContainer addMountsItem(String mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

  /**
   * User volume mounts
   * @return mounts
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getMounts() {
    return mounts;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMounts(List<String> mounts) {
    this.mounts = mounts;
  }


  public ListContainer names(List<String> names) {
    this.names = names;
    return this;
  }

  public ListContainer addNamesItem(String namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * The names assigned to the container
   * @return names
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getNames() {
    return names;
  }


  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNames(List<String> names) {
    this.names = names;
  }


  public ListContainer namespaces(ListContainerNamespaces namespaces) {
    this.namespaces = namespaces;
    return this;
  }

  /**
   * Get namespaces
   * @return namespaces
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NAMESPACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ListContainerNamespaces getNamespaces() {
    return namespaces;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamespaces(ListContainerNamespaces namespaces) {
    this.namespaces = namespaces;
  }


  public ListContainer networks(List<String> networks) {
    this.networks = networks;
    return this;
  }

  public ListContainer addNetworksItem(String networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * The network names assigned to the container
   * @return networks
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NETWORKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getNetworks() {
    return networks;
  }


  @JsonProperty(JSON_PROPERTY_NETWORKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworks(List<String> networks) {
    this.networks = networks;
  }


  public ListContainer pid(Long pid) {
    this.pid = pid;
    return this;
  }

  /**
   * The process id of the container
   * @return pid
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getPid() {
    return pid;
  }


  @JsonProperty(JSON_PROPERTY_PID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPid(Long pid) {
    this.pid = pid;
  }


  public ListContainer pod(String pod) {
    this.pod = pod;
    return this;
  }

  /**
   * If the container is part of Pod, the Pod ID. Requires the pod boolean to be set
   * @return pod
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_POD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPod() {
    return pod;
  }


  @JsonProperty(JSON_PROPERTY_POD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPod(String pod) {
    this.pod = pod;
  }


  public ListContainer podName(String podName) {
    this.podName = podName;
    return this;
  }

  /**
   * If the container is part of Pod, the Pod name. Requires the pod boolean to be set
   * @return podName
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_POD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPodName() {
    return podName;
  }


  @JsonProperty(JSON_PROPERTY_POD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPodName(String podName) {
    this.podName = podName;
  }


  public ListContainer ports(List<@Valid PortMapping> ports) {
    this.ports = ports;
    return this;
  }

  public ListContainer addPortsItem(PortMapping portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<>();
    }
    this.ports.add(portsItem);
    return this;
  }

  /**
   * Port mappings
   * @return ports
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid PortMapping> getPorts() {
    return ports;
  }


  @JsonProperty(JSON_PROPERTY_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPorts(List<@Valid PortMapping> ports) {
    this.ports = ports;
  }


  public ListContainer restarts(Integer restarts) {
    this.restarts = restarts;
    return this;
  }

  /**
   * Restarts is how many times the container was restarted by its restart policy. This is NOT incremented by normal container restarts (only by restart policy).
   * @return restarts
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RESTARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getRestarts() {
    return restarts;
  }


  @JsonProperty(JSON_PROPERTY_RESTARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestarts(Integer restarts) {
    this.restarts = restarts;
  }


  public ListContainer size(ContainerSize size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ContainerSize getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(ContainerSize size) {
    this.size = size;
  }


  public ListContainer startedAt(Long startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * Time when container started
   * @return startedAt
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STARTED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getStartedAt() {
    return startedAt;
  }


  @JsonProperty(JSON_PROPERTY_STARTED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartedAt(Long startedAt) {
    this.startedAt = startedAt;
  }


  public ListContainer state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State of container
   * @return state
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(String state) {
    this.state = state;
  }


  public ListContainer status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status is a human-readable approximation of a duration for json output
   * @return status
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }


  /**
   * Return true if this ListContainer object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListContainer listContainer = (ListContainer) o;
    return Objects.equals(this.autoRemove, listContainer.autoRemove) &&
        Objects.equals(this.ciDFile, listContainer.ciDFile) &&
        Objects.equals(this.command, listContainer.command) &&
        Objects.equals(this.created, listContainer.created) &&
        Objects.equals(this.createdAt, listContainer.createdAt) &&
        Objects.equals(this.exitCode, listContainer.exitCode) &&
        Objects.equals(this.exited, listContainer.exited) &&
        Objects.equals(this.exitedAt, listContainer.exitedAt) &&
        Objects.equals(this.exposedPorts, listContainer.exposedPorts) &&
        Objects.equals(this.id, listContainer.id) &&
        Objects.equals(this.image, listContainer.image) &&
        Objects.equals(this.imageID, listContainer.imageID) &&
        Objects.equals(this.isInfra, listContainer.isInfra) &&
        Objects.equals(this.labels, listContainer.labels) &&
        Objects.equals(this.mounts, listContainer.mounts) &&
        Objects.equals(this.names, listContainer.names) &&
        Objects.equals(this.namespaces, listContainer.namespaces) &&
        Objects.equals(this.networks, listContainer.networks) &&
        Objects.equals(this.pid, listContainer.pid) &&
        Objects.equals(this.pod, listContainer.pod) &&
        Objects.equals(this.podName, listContainer.podName) &&
        Objects.equals(this.ports, listContainer.ports) &&
        Objects.equals(this.restarts, listContainer.restarts) &&
        Objects.equals(this.size, listContainer.size) &&
        Objects.equals(this.startedAt, listContainer.startedAt) &&
        Objects.equals(this.state, listContainer.state) &&
        Objects.equals(this.status, listContainer.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRemove, ciDFile, command, created, createdAt, exitCode, exited, exitedAt, exposedPorts, id, image, imageID, isInfra, labels, mounts, names, namespaces, networks, pid, pod, podName, ports, restarts, size, startedAt, state, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListContainer {\n");
    sb.append("    autoRemove: ").append(toIndentedString(autoRemove)).append("\n");
    sb.append("    ciDFile: ").append(toIndentedString(ciDFile)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    exited: ").append(toIndentedString(exited)).append("\n");
    sb.append("    exitedAt: ").append(toIndentedString(exitedAt)).append("\n");
    sb.append("    exposedPorts: ").append(toIndentedString(exposedPorts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageID: ").append(toIndentedString(imageID)).append("\n");
    sb.append("    isInfra: ").append(toIndentedString(isInfra)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    namespaces: ").append(toIndentedString(namespaces)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    podName: ").append(toIndentedString(podName)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    restarts: ").append(toIndentedString(restarts)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `AutoRemove` to the URL query string
    if (getAutoRemove() != null) {
      joiner.add(String.format("%sAutoRemove%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAutoRemove()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `CIDFile` to the URL query string
    if (getCiDFile() != null) {
      joiner.add(String.format("%sCIDFile%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCiDFile()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Command` to the URL query string
    if (getCommand() != null) {
      for (int i = 0; i < getCommand().size(); i++) {
        joiner.add(String.format("%sCommand%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCommand().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `CreatedAt` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%sCreatedAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ExitCode` to the URL query string
    if (getExitCode() != null) {
      joiner.add(String.format("%sExitCode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExitCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Exited` to the URL query string
    if (getExited() != null) {
      joiner.add(String.format("%sExited%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExited()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ExitedAt` to the URL query string
    if (getExitedAt() != null) {
      joiner.add(String.format("%sExitedAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExitedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ExposedPorts` to the URL query string
    if (getExposedPorts() != null) {
      joiner.add(String.format("%sExposedPorts%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExposedPorts()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Image` to the URL query string
    if (getImage() != null) {
      joiner.add(String.format("%sImage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ImageID` to the URL query string
    if (getImageID() != null) {
      joiner.add(String.format("%sImageID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `IsInfra` to the URL query string
    if (getIsInfra() != null) {
      joiner.add(String.format("%sIsInfra%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIsInfra()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Mounts` to the URL query string
    if (getMounts() != null) {
      for (int i = 0; i < getMounts().size(); i++) {
        joiner.add(String.format("%sMounts%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getMounts().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Names` to the URL query string
    if (getNames() != null) {
      for (int i = 0; i < getNames().size(); i++) {
        joiner.add(String.format("%sNames%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getNames().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Namespaces` to the URL query string
    if (getNamespaces() != null) {
      joiner.add(getNamespaces().toUrlQueryString(prefix + "Namespaces" + suffix));
    }

    // add `Networks` to the URL query string
    if (getNetworks() != null) {
      for (int i = 0; i < getNetworks().size(); i++) {
        joiner.add(String.format("%sNetworks%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getNetworks().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Pid` to the URL query string
    if (getPid() != null) {
      joiner.add(String.format("%sPid%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Pod` to the URL query string
    if (getPod() != null) {
      joiner.add(String.format("%sPod%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `PodName` to the URL query string
    if (getPodName() != null) {
      joiner.add(String.format("%sPodName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPodName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Ports` to the URL query string
    if (getPorts() != null) {
      for (int i = 0; i < getPorts().size(); i++) {
        if (getPorts().get(i) != null) {
          joiner.add(getPorts().get(i).toUrlQueryString(String.format("%sPorts%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Restarts` to the URL query string
    if (getRestarts() != null) {
      joiner.add(String.format("%sRestarts%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRestarts()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Size` to the URL query string
    if (getSize() != null) {
      joiner.add(getSize().toUrlQueryString(prefix + "Size" + suffix));
    }

    // add `StartedAt` to the URL query string
    if (getStartedAt() != null) {
      joiner.add(String.format("%sStartedAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStartedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `State` to the URL query string
    if (getState() != null) {
      joiner.add(String.format("%sState%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getState()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sStatus%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

