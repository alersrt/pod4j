/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ListContainerNamespaces contains the identifiers of the container&#39;s Linux namespaces
 */
@JsonPropertyOrder({
  ListContainerNamespaces.JSON_PROPERTY_CGROUP,
  ListContainerNamespaces.JSON_PROPERTY_IPC,
  ListContainerNamespaces.JSON_PROPERTY_MNT,
  ListContainerNamespaces.JSON_PROPERTY_NET,
  ListContainerNamespaces.JSON_PROPERTY_PIDNS,
  ListContainerNamespaces.JSON_PROPERTY_USER,
  ListContainerNamespaces.JSON_PROPERTY_UTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ListContainerNamespaces {
  public static final String JSON_PROPERTY_CGROUP = "Cgroup";
  private String cgroup;

  public static final String JSON_PROPERTY_IPC = "Ipc";
  private String ipc;

  public static final String JSON_PROPERTY_MNT = "Mnt";
  private String mnt;

  public static final String JSON_PROPERTY_NET = "Net";
  private String net;

  public static final String JSON_PROPERTY_PIDNS = "Pidns";
  private String pidns;

  public static final String JSON_PROPERTY_USER = "User";
  private String user;

  public static final String JSON_PROPERTY_UTS = "Uts";
  private String uts;

  public ListContainerNamespaces() { 
  }

  public ListContainerNamespaces cgroup(String cgroup) {
    this.cgroup = cgroup;
    return this;
  }

  /**
   * Cgroup namespace
   * @return cgroup
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CGROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCgroup() {
    return cgroup;
  }


  @JsonProperty(JSON_PROPERTY_CGROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCgroup(String cgroup) {
    this.cgroup = cgroup;
  }


  public ListContainerNamespaces ipc(String ipc) {
    this.ipc = ipc;
    return this;
  }

  /**
   * IPC namespace
   * @return ipc
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IPC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getIpc() {
    return ipc;
  }


  @JsonProperty(JSON_PROPERTY_IPC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIpc(String ipc) {
    this.ipc = ipc;
  }


  public ListContainerNamespaces mnt(String mnt) {
    this.mnt = mnt;
    return this;
  }

  /**
   * Mount namespace
   * @return mnt
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMnt() {
    return mnt;
  }


  @JsonProperty(JSON_PROPERTY_MNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMnt(String mnt) {
    this.mnt = mnt;
  }


  public ListContainerNamespaces net(String net) {
    this.net = net;
    return this;
  }

  /**
   * Network namespace
   * @return net
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNet() {
    return net;
  }


  @JsonProperty(JSON_PROPERTY_NET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNet(String net) {
    this.net = net;
  }


  public ListContainerNamespaces pidns(String pidns) {
    this.pidns = pidns;
    return this;
  }

  /**
   * PID namespace
   * @return pidns
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PIDNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPidns() {
    return pidns;
  }


  @JsonProperty(JSON_PROPERTY_PIDNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPidns(String pidns) {
    this.pidns = pidns;
  }


  public ListContainerNamespaces user(String user) {
    this.user = user;
    return this;
  }

  /**
   * User namespace
   * @return user
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public ListContainerNamespaces uts(String uts) {
    this.uts = uts;
    return this;
  }

  /**
   * UTS namespace
   * @return uts
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_UTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUts() {
    return uts;
  }


  @JsonProperty(JSON_PROPERTY_UTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUts(String uts) {
    this.uts = uts;
  }


  /**
   * Return true if this ListContainerNamespaces object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListContainerNamespaces listContainerNamespaces = (ListContainerNamespaces) o;
    return Objects.equals(this.cgroup, listContainerNamespaces.cgroup) &&
        Objects.equals(this.ipc, listContainerNamespaces.ipc) &&
        Objects.equals(this.mnt, listContainerNamespaces.mnt) &&
        Objects.equals(this.net, listContainerNamespaces.net) &&
        Objects.equals(this.pidns, listContainerNamespaces.pidns) &&
        Objects.equals(this.user, listContainerNamespaces.user) &&
        Objects.equals(this.uts, listContainerNamespaces.uts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cgroup, ipc, mnt, net, pidns, user, uts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListContainerNamespaces {\n");
    sb.append("    cgroup: ").append(toIndentedString(cgroup)).append("\n");
    sb.append("    ipc: ").append(toIndentedString(ipc)).append("\n");
    sb.append("    mnt: ").append(toIndentedString(mnt)).append("\n");
    sb.append("    net: ").append(toIndentedString(net)).append("\n");
    sb.append("    pidns: ").append(toIndentedString(pidns)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    uts: ").append(toIndentedString(uts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Cgroup` to the URL query string
    if (getCgroup() != null) {
      joiner.add(String.format("%sCgroup%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCgroup()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Ipc` to the URL query string
    if (getIpc() != null) {
      joiner.add(String.format("%sIpc%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIpc()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Mnt` to the URL query string
    if (getMnt() != null) {
      joiner.add(String.format("%sMnt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMnt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Net` to the URL query string
    if (getNet() != null) {
      joiner.add(String.format("%sNet%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNet()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Pidns` to the URL query string
    if (getPidns() != null) {
      joiner.add(String.format("%sPidns%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPidns()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `User` to the URL query string
    if (getUser() != null) {
      joiner.add(String.format("%sUser%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUser()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Uts` to the URL query string
    if (getUts() != null) {
      joiner.add(String.format("%sUts%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUts()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

