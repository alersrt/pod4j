/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ListPodContainer;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ListPodsReport
 */
@JsonPropertyOrder({
  ListPodsReport.JSON_PROPERTY_CGROUP,
  ListPodsReport.JSON_PROPERTY_CONTAINERS,
  ListPodsReport.JSON_PROPERTY_CREATED,
  ListPodsReport.JSON_PROPERTY_ID,
  ListPodsReport.JSON_PROPERTY_INFRA_ID,
  ListPodsReport.JSON_PROPERTY_LABELS,
  ListPodsReport.JSON_PROPERTY_NAME,
  ListPodsReport.JSON_PROPERTY_NAMESPACE,
  ListPodsReport.JSON_PROPERTY_NETWORKS,
  ListPodsReport.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ListPodsReport {
  public static final String JSON_PROPERTY_CGROUP = "Cgroup";
  private String cgroup;

  public static final String JSON_PROPERTY_CONTAINERS = "Containers";
  private List<@Valid ListPodContainer> containers = new ArrayList<>();

  public static final String JSON_PROPERTY_CREATED = "Created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_ID = "Id";
  private String id;

  public static final String JSON_PROPERTY_INFRA_ID = "InfraId";
  private String infraId;

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_NAMESPACE = "Namespace";
  private String namespace;

  public static final String JSON_PROPERTY_NETWORKS = "Networks";
  private List<String> networks = new ArrayList<>();

  public static final String JSON_PROPERTY_STATUS = "Status";
  private String status;

  public ListPodsReport() { 
  }

  public ListPodsReport cgroup(String cgroup) {
    this.cgroup = cgroup;
    return this;
  }

  /**
   * Get cgroup
   * @return cgroup
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CGROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCgroup() {
    return cgroup;
  }


  @JsonProperty(JSON_PROPERTY_CGROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCgroup(String cgroup) {
    this.cgroup = cgroup;
  }


  public ListPodsReport containers(List<@Valid ListPodContainer> containers) {
    this.containers = containers;
    return this;
  }

  public ListPodsReport addContainersItem(ListPodContainer containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * Get containers
   * @return containers
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid ListPodContainer> getContainers() {
    return containers;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainers(List<@Valid ListPodContainer> containers) {
    this.containers = containers;
  }


  public ListPodsReport created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ListPodsReport id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public ListPodsReport infraId(String infraId) {
    this.infraId = infraId;
    return this;
  }

  /**
   * Get infraId
   * @return infraId
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INFRA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getInfraId() {
    return infraId;
  }


  @JsonProperty(JSON_PROPERTY_INFRA_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInfraId(String infraId) {
    this.infraId = infraId;
  }


  public ListPodsReport labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ListPodsReport putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ListPodsReport name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ListPodsReport namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNamespace() {
    return namespace;
  }


  @JsonProperty(JSON_PROPERTY_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public ListPodsReport networks(List<String> networks) {
    this.networks = networks;
    return this;
  }

  public ListPodsReport addNetworksItem(String networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * Network names connected to infra container
   * @return networks
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NETWORKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getNetworks() {
    return networks;
  }


  @JsonProperty(JSON_PROPERTY_NETWORKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworks(List<String> networks) {
    this.networks = networks;
  }


  public ListPodsReport status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }


  /**
   * Return true if this ListPodsReport object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPodsReport listPodsReport = (ListPodsReport) o;
    return Objects.equals(this.cgroup, listPodsReport.cgroup) &&
        Objects.equals(this.containers, listPodsReport.containers) &&
        Objects.equals(this.created, listPodsReport.created) &&
        Objects.equals(this.id, listPodsReport.id) &&
        Objects.equals(this.infraId, listPodsReport.infraId) &&
        Objects.equals(this.labels, listPodsReport.labels) &&
        Objects.equals(this.name, listPodsReport.name) &&
        Objects.equals(this.namespace, listPodsReport.namespace) &&
        Objects.equals(this.networks, listPodsReport.networks) &&
        Objects.equals(this.status, listPodsReport.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cgroup, containers, created, id, infraId, labels, name, namespace, networks, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPodsReport {\n");
    sb.append("    cgroup: ").append(toIndentedString(cgroup)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    infraId: ").append(toIndentedString(infraId)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Cgroup` to the URL query string
    if (getCgroup() != null) {
      joiner.add(String.format("%sCgroup%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCgroup()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Containers` to the URL query string
    if (getContainers() != null) {
      for (int i = 0; i < getContainers().size(); i++) {
        if (getContainers().get(i) != null) {
          joiner.add(getContainers().get(i).toUrlQueryString(String.format("%sContainers%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `InfraId` to the URL query string
    if (getInfraId() != null) {
      joiner.add(String.format("%sInfraId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getInfraId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Namespace` to the URL query string
    if (getNamespace() != null) {
      joiner.add(String.format("%sNamespace%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNamespace()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Networks` to the URL query string
    if (getNetworks() != null) {
      for (int i = 0; i < getNetworks().size(); i++) {
        joiner.add(String.format("%sNetworks%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getNetworks().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sStatus%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

