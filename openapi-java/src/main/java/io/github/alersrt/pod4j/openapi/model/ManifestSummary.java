/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.AttestationProperties;
import io.github.alersrt.pod4j.openapi.model.Descriptor;
import io.github.alersrt.pod4j.openapi.model.ImageProperties;
import io.github.alersrt.pod4j.openapi.model.ManifestSummarySize;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * ManifestSummary
 */
@JsonPropertyOrder({
  ManifestSummary.JSON_PROPERTY_ATTESTATION_DATA,
  ManifestSummary.JSON_PROPERTY_AVAILABLE,
  ManifestSummary.JSON_PROPERTY_DESCRIPTOR,
  ManifestSummary.JSON_PROPERTY_I_D,
  ManifestSummary.JSON_PROPERTY_IMAGE_DATA,
  ManifestSummary.JSON_PROPERTY_KIND,
  ManifestSummary.JSON_PROPERTY_SIZE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class ManifestSummary {
  public static final String JSON_PROPERTY_ATTESTATION_DATA = "AttestationData";
  private AttestationProperties attestationData;

  public static final String JSON_PROPERTY_AVAILABLE = "Available";
  private Boolean available;

  public static final String JSON_PROPERTY_DESCRIPTOR = "Descriptor";
  private Descriptor descriptor;

  public static final String JSON_PROPERTY_I_D = "ID";
  private String ID;

  public static final String JSON_PROPERTY_IMAGE_DATA = "ImageData";
  private ImageProperties imageData;

  public static final String JSON_PROPERTY_KIND = "Kind";
  private String kind;

  public static final String JSON_PROPERTY_SIZE = "Size";
  private ManifestSummarySize size;

  public ManifestSummary() { 
  }

  public ManifestSummary attestationData(AttestationProperties attestationData) {
    this.attestationData = attestationData;
    return this;
  }

  /**
   * Get attestationData
   * @return attestationData
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_ATTESTATION_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AttestationProperties getAttestationData() {
    return attestationData;
  }


  @JsonProperty(JSON_PROPERTY_ATTESTATION_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttestationData(AttestationProperties attestationData) {
    this.attestationData = attestationData;
  }


  public ManifestSummary available(Boolean available) {
    this.available = available;
    return this;
  }

  /**
   * Indicates whether all the child content (image config, layers) is fully available locally
   * @return available
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getAvailable() {
    return available;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvailable(Boolean available) {
    this.available = available;
  }


  public ManifestSummary descriptor(Descriptor descriptor) {
    this.descriptor = descriptor;
    return this;
  }

  /**
   * Get descriptor
   * @return descriptor
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid

  @JsonProperty(JSON_PROPERTY_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Descriptor getDescriptor() {
    return descriptor;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescriptor(Descriptor descriptor) {
    this.descriptor = descriptor;
  }


  public ManifestSummary ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * ID is the content-addressable ID of an image and is the same as the digest of the image manifest.
   * @return ID
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getID() {
    return ID;
  }


  @JsonProperty(JSON_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setID(String ID) {
    this.ID = ID;
  }


  public ManifestSummary imageData(ImageProperties imageData) {
    this.imageData = imageData;
    return this;
  }

  /**
   * Get imageData
   * @return imageData
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_IMAGE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ImageProperties getImageData() {
    return imageData;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageData(ImageProperties imageData) {
    this.imageData = imageData;
  }


  public ManifestSummary kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getKind() {
    return kind;
  }


  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKind(String kind) {
    this.kind = kind;
  }


  public ManifestSummary size(ManifestSummarySize size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ManifestSummarySize getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSize(ManifestSummarySize size) {
    this.size = size;
  }


  /**
   * Return true if this ManifestSummary object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManifestSummary manifestSummary = (ManifestSummary) o;
    return Objects.equals(this.attestationData, manifestSummary.attestationData) &&
        Objects.equals(this.available, manifestSummary.available) &&
        Objects.equals(this.descriptor, manifestSummary.descriptor) &&
        Objects.equals(this.ID, manifestSummary.ID) &&
        Objects.equals(this.imageData, manifestSummary.imageData) &&
        Objects.equals(this.kind, manifestSummary.kind) &&
        Objects.equals(this.size, manifestSummary.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attestationData, available, descriptor, ID, imageData, kind, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManifestSummary {\n");
    sb.append("    attestationData: ").append(toIndentedString(attestationData)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    imageData: ").append(toIndentedString(imageData)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `AttestationData` to the URL query string
    if (getAttestationData() != null) {
      joiner.add(getAttestationData().toUrlQueryString(prefix + "AttestationData" + suffix));
    }

    // add `Available` to the URL query string
    if (getAvailable() != null) {
      joiner.add(String.format("%sAvailable%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAvailable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Descriptor` to the URL query string
    if (getDescriptor() != null) {
      joiner.add(getDescriptor().toUrlQueryString(prefix + "Descriptor" + suffix));
    }

    // add `ID` to the URL query string
    if (getID() != null) {
      joiner.add(String.format("%sID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ImageData` to the URL query string
    if (getImageData() != null) {
      joiner.add(getImageData().toUrlQueryString(prefix + "ImageData" + suffix));
    }

    // add `Kind` to the URL query string
    if (getKind() != null) {
      joiner.add(String.format("%sKind%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getKind()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Size` to the URL query string
    if (getSize() != null) {
      joiner.add(getSize().toUrlQueryString(prefix + "Size" + suffix));
    }

    return joiner.toString();
  }
}

