/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.BindOptions;
import io.github.alersrt.pod4j.openapi.model.TmpfsOptions;
import io.github.alersrt.pod4j.openapi.model.VolumeOptions;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * Mount
 */
@JsonPropertyOrder({
  Mount.JSON_PROPERTY_BIND_OPTIONS,
  Mount.JSON_PROPERTY_CLUSTER_OPTIONS,
  Mount.JSON_PROPERTY_CONSISTENCY,
  Mount.JSON_PROPERTY_READ_ONLY,
  Mount.JSON_PROPERTY_SOURCE,
  Mount.JSON_PROPERTY_TARGET,
  Mount.JSON_PROPERTY_TMPFS_OPTIONS,
  Mount.JSON_PROPERTY_TYPE,
  Mount.JSON_PROPERTY_VOLUME_OPTIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class Mount {
  public static final String JSON_PROPERTY_BIND_OPTIONS = "BindOptions";
  private BindOptions bindOptions;

  public static final String JSON_PROPERTY_CLUSTER_OPTIONS = "ClusterOptions";
  private Object clusterOptions;

  public static final String JSON_PROPERTY_CONSISTENCY = "Consistency";
  private String consistency;

  public static final String JSON_PROPERTY_READ_ONLY = "ReadOnly";
  private Boolean readOnly;

  public static final String JSON_PROPERTY_SOURCE = "Source";
  private String source;

  public static final String JSON_PROPERTY_TARGET = "Target";
  private String target;

  public static final String JSON_PROPERTY_TMPFS_OPTIONS = "TmpfsOptions";
  private TmpfsOptions tmpfsOptions;

  public static final String JSON_PROPERTY_TYPE = "Type";
  private String type;

  public static final String JSON_PROPERTY_VOLUME_OPTIONS = "VolumeOptions";
  private VolumeOptions volumeOptions;

  public Mount() { 
  }

  public Mount bindOptions(BindOptions bindOptions) {
    this.bindOptions = bindOptions;
    return this;
  }

  /**
   * Get bindOptions
   * @return bindOptions
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_BIND_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BindOptions getBindOptions() {
    return bindOptions;
  }


  @JsonProperty(JSON_PROPERTY_BIND_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBindOptions(BindOptions bindOptions) {
    this.bindOptions = bindOptions;
  }


  public Mount clusterOptions(Object clusterOptions) {
    this.clusterOptions = clusterOptions;
    return this;
  }

  /**
   * Get clusterOptions
   * @return clusterOptions
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CLUSTER_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getClusterOptions() {
    return clusterOptions;
  }


  @JsonProperty(JSON_PROPERTY_CLUSTER_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClusterOptions(Object clusterOptions) {
    this.clusterOptions = clusterOptions;
  }


  public Mount consistency(String consistency) {
    this.consistency = consistency;
    return this;
  }

  /**
   * Get consistency
   * @return consistency
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONSISTENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getConsistency() {
    return consistency;
  }


  @JsonProperty(JSON_PROPERTY_CONSISTENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConsistency(String consistency) {
    this.consistency = consistency;
  }


  public Mount readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getReadOnly() {
    return readOnly;
  }


  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public Mount source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Source specifies the name of the mount. Depending on mount type, this may be a volume name or a host path, or even ignored. Source is not supported for tmpfs (must be an empty value)
   * @return source
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(String source) {
    this.source = source;
  }


  public Mount target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTarget() {
    return target;
  }


  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTarget(String target) {
    this.target = target;
  }


  public Mount tmpfsOptions(TmpfsOptions tmpfsOptions) {
    this.tmpfsOptions = tmpfsOptions;
    return this;
  }

  /**
   * Get tmpfsOptions
   * @return tmpfsOptions
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_TMPFS_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TmpfsOptions getTmpfsOptions() {
    return tmpfsOptions;
  }


  @JsonProperty(JSON_PROPERTY_TMPFS_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTmpfsOptions(TmpfsOptions tmpfsOptions) {
    this.tmpfsOptions = tmpfsOptions;
  }


  public Mount type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public Mount volumeOptions(VolumeOptions volumeOptions) {
    this.volumeOptions = volumeOptions;
    return this;
  }

  /**
   * Get volumeOptions
   * @return volumeOptions
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_VOLUME_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public VolumeOptions getVolumeOptions() {
    return volumeOptions;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumeOptions(VolumeOptions volumeOptions) {
    this.volumeOptions = volumeOptions;
  }


  /**
   * Return true if this Mount object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mount mount = (Mount) o;
    return Objects.equals(this.bindOptions, mount.bindOptions) &&
        Objects.equals(this.clusterOptions, mount.clusterOptions) &&
        Objects.equals(this.consistency, mount.consistency) &&
        Objects.equals(this.readOnly, mount.readOnly) &&
        Objects.equals(this.source, mount.source) &&
        Objects.equals(this.target, mount.target) &&
        Objects.equals(this.tmpfsOptions, mount.tmpfsOptions) &&
        Objects.equals(this.type, mount.type) &&
        Objects.equals(this.volumeOptions, mount.volumeOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bindOptions, clusterOptions, consistency, readOnly, source, target, tmpfsOptions, type, volumeOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mount {\n");
    sb.append("    bindOptions: ").append(toIndentedString(bindOptions)).append("\n");
    sb.append("    clusterOptions: ").append(toIndentedString(clusterOptions)).append("\n");
    sb.append("    consistency: ").append(toIndentedString(consistency)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    tmpfsOptions: ").append(toIndentedString(tmpfsOptions)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    volumeOptions: ").append(toIndentedString(volumeOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `BindOptions` to the URL query string
    if (getBindOptions() != null) {
      joiner.add(getBindOptions().toUrlQueryString(prefix + "BindOptions" + suffix));
    }

    // add `ClusterOptions` to the URL query string
    if (getClusterOptions() != null) {
      joiner.add(String.format("%sClusterOptions%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getClusterOptions()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Consistency` to the URL query string
    if (getConsistency() != null) {
      joiner.add(String.format("%sConsistency%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConsistency()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ReadOnly` to the URL query string
    if (getReadOnly() != null) {
      joiner.add(String.format("%sReadOnly%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReadOnly()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Source` to the URL query string
    if (getSource() != null) {
      joiner.add(String.format("%sSource%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSource()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Target` to the URL query string
    if (getTarget() != null) {
      joiner.add(String.format("%sTarget%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTarget()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `TmpfsOptions` to the URL query string
    if (getTmpfsOptions() != null) {
      joiner.add(getTmpfsOptions().toUrlQueryString(prefix + "TmpfsOptions" + suffix));
    }

    // add `Type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%sType%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `VolumeOptions` to the URL query string
    if (getVolumeOptions() != null) {
      joiner.add(getVolumeOptions().toUrlQueryString(prefix + "VolumeOptions" + suffix));
    }

    return joiner.toString();
  }
}

