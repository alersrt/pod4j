/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * This is used for reporting the mountpoints in use by a container.
 */
@JsonPropertyOrder({
  MountPoint.JSON_PROPERTY_DESTINATION,
  MountPoint.JSON_PROPERTY_DRIVER,
  MountPoint.JSON_PROPERTY_MODE,
  MountPoint.JSON_PROPERTY_NAME,
  MountPoint.JSON_PROPERTY_PROPAGATION,
  MountPoint.JSON_PROPERTY_R_W,
  MountPoint.JSON_PROPERTY_SOURCE,
  MountPoint.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class MountPoint {
  public static final String JSON_PROPERTY_DESTINATION = "Destination";
  private String destination;

  public static final String JSON_PROPERTY_DRIVER = "Driver";
  private String driver;

  public static final String JSON_PROPERTY_MODE = "Mode";
  private String mode;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_PROPAGATION = "Propagation";
  private String propagation;

  public static final String JSON_PROPERTY_R_W = "RW";
  private Boolean RW;

  public static final String JSON_PROPERTY_SOURCE = "Source";
  private String source;

  public static final String JSON_PROPERTY_TYPE = "Type";
  private String type;

  public MountPoint() { 
  }

  public MountPoint destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Destination is the path relative to the container root (&#x60;/&#x60;) where the Source is mounted inside the container.
   * @return destination
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDestination() {
    return destination;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestination(String destination) {
    this.destination = destination;
  }


  public MountPoint driver(String driver) {
    this.driver = driver;
    return this;
  }

  /**
   * Driver is the volume driver used to create the volume (if it is a volume).
   * @return driver
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDriver() {
    return driver;
  }


  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDriver(String driver) {
    this.driver = driver;
  }


  public MountPoint mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Mode is a comma separated list of options supplied by the user when creating the bind/volume mount.  The default is platform-specific (&#x60;\&quot;z\&quot;&#x60; on Linux, empty on Windows).
   * @return mode
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMode() {
    return mode;
  }


  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMode(String mode) {
    this.mode = mode;
  }


  public MountPoint name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name is the name reference to the underlying data defined by &#x60;Source&#x60; e.g., the volume name.
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public MountPoint propagation(String propagation) {
    this.propagation = propagation;
    return this;
  }

  /**
   * Get propagation
   * @return propagation
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_PROPAGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPropagation() {
    return propagation;
  }


  @JsonProperty(JSON_PROPERTY_PROPAGATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropagation(String propagation) {
    this.propagation = propagation;
  }


  public MountPoint RW(Boolean RW) {
    this.RW = RW;
    return this;
  }

  /**
   * RW indicates whether the mount is mounted writable (read-write).
   * @return RW
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_R_W)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getRW() {
    return RW;
  }


  @JsonProperty(JSON_PROPERTY_R_W)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRW(Boolean RW) {
    this.RW = RW;
  }


  public MountPoint source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Source is the source location of the mount.  For volumes, this contains the storage location of the volume (within &#x60;/var/lib/docker/volumes/&#x60;). For bind-mounts, and &#x60;npipe&#x60;, this contains the source (host) part of the bind-mount. For &#x60;tmpfs&#x60; mount points, this field is empty.
   * @return source
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(String source) {
    this.source = source;
  }


  public MountPoint type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  /**
   * Return true if this MountPoint object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MountPoint mountPoint = (MountPoint) o;
    return Objects.equals(this.destination, mountPoint.destination) &&
        Objects.equals(this.driver, mountPoint.driver) &&
        Objects.equals(this.mode, mountPoint.mode) &&
        Objects.equals(this.name, mountPoint.name) &&
        Objects.equals(this.propagation, mountPoint.propagation) &&
        Objects.equals(this.RW, mountPoint.RW) &&
        Objects.equals(this.source, mountPoint.source) &&
        Objects.equals(this.type, mountPoint.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, driver, mode, name, propagation, RW, source, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MountPoint {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    propagation: ").append(toIndentedString(propagation)).append("\n");
    sb.append("    RW: ").append(toIndentedString(RW)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Destination` to the URL query string
    if (getDestination() != null) {
      joiner.add(String.format("%sDestination%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDestination()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Driver` to the URL query string
    if (getDriver() != null) {
      joiner.add(String.format("%sDriver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDriver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Mode` to the URL query string
    if (getMode() != null) {
      joiner.add(String.format("%sMode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Propagation` to the URL query string
    if (getPropagation() != null) {
      joiner.add(String.format("%sPropagation%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPropagation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `RW` to the URL query string
    if (getRW() != null) {
      joiner.add(String.format("%sRW%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRW()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Source` to the URL query string
    if (getSource() != null) {
      joiner.add(String.format("%sSource%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSource()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%sType%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

