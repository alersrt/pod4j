/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * NamedVolume holds information about a named volume that will be mounted into the container.
 */
@JsonPropertyOrder({
  NamedVolume.JSON_PROPERTY_DEST,
  NamedVolume.JSON_PROPERTY_IS_ANONYMOUS,
  NamedVolume.JSON_PROPERTY_NAME,
  NamedVolume.JSON_PROPERTY_OPTIONS,
  NamedVolume.JSON_PROPERTY_SUB_PATH
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class NamedVolume {
  public static final String JSON_PROPERTY_DEST = "Dest";
  private String dest;

  public static final String JSON_PROPERTY_IS_ANONYMOUS = "IsAnonymous";
  private Boolean isAnonymous;

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_OPTIONS = "Options";
  private List<String> options = new ArrayList<>();

  public static final String JSON_PROPERTY_SUB_PATH = "SubPath";
  private String subPath;

  public NamedVolume() { 
  }

  public NamedVolume dest(String dest) {
    this.dest = dest;
    return this;
  }

  /**
   * Destination to mount the named volume within the container. Must be an absolute path. Path will be created if it does not exist.
   * @return dest
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDest() {
    return dest;
  }


  @JsonProperty(JSON_PROPERTY_DEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDest(String dest) {
    this.dest = dest;
  }


  public NamedVolume isAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
    return this;
  }

  /**
   * IsAnonymous sets the named volume as anonymous even if it has a name This is used for emptyDir volumes from a kube yaml
   * @return isAnonymous
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IS_ANONYMOUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsAnonymous() {
    return isAnonymous;
  }


  @JsonProperty(JSON_PROPERTY_IS_ANONYMOUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
  }


  public NamedVolume name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name is the name of the named volume to be mounted. May be empty. If empty, a new named volume with a pseudorandomly generated name will be mounted at the given destination.
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public NamedVolume options(List<String> options) {
    this.options = options;
    return this;
  }

  public NamedVolume addOptionsItem(String optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Options are options that the named volume will be mounted with.
   * @return options
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(List<String> options) {
    this.options = options;
  }


  public NamedVolume subPath(String subPath) {
    this.subPath = subPath;
    return this;
  }

  /**
   * SubPath stores the sub directory of the named volume to be mounted in the container
   * @return subPath
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SUB_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSubPath() {
    return subPath;
  }


  @JsonProperty(JSON_PROPERTY_SUB_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubPath(String subPath) {
    this.subPath = subPath;
  }


  /**
   * Return true if this NamedVolume object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamedVolume namedVolume = (NamedVolume) o;
    return Objects.equals(this.dest, namedVolume.dest) &&
        Objects.equals(this.isAnonymous, namedVolume.isAnonymous) &&
        Objects.equals(this.name, namedVolume.name) &&
        Objects.equals(this.options, namedVolume.options) &&
        Objects.equals(this.subPath, namedVolume.subPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dest, isAnonymous, name, options, subPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamedVolume {\n");
    sb.append("    dest: ").append(toIndentedString(dest)).append("\n");
    sb.append("    isAnonymous: ").append(toIndentedString(isAnonymous)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    subPath: ").append(toIndentedString(subPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Dest` to the URL query string
    if (getDest() != null) {
      joiner.add(String.format("%sDest%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDest()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `IsAnonymous` to the URL query string
    if (getIsAnonymous() != null) {
      joiner.add(String.format("%sIsAnonymous%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIsAnonymous()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Options` to the URL query string
    if (getOptions() != null) {
      for (int i = 0; i < getOptions().size(); i++) {
        joiner.add(String.format("%sOptions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getOptions().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `SubPath` to the URL query string
    if (getSubPath() != null) {
      joiner.add(String.format("%sSubPath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSubPath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

