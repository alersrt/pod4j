/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.Namespace;
import io.github.alersrt.pod4j.openapi.model.PerNetworkOptions;
import io.github.alersrt.pod4j.openapi.model.PortMapping;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * NetOptions reflect the shared network options between pods and containers
 */
@JsonPropertyOrder({
  NetOptions.JSON_PROPERTY_DNS_OPTION,
  NetOptions.JSON_PROPERTY_DNS_SEARCH,
  NetOptions.JSON_PROPERTY_DNS_SERVER,
  NetOptions.JSON_PROPERTY_HOSTADD,
  NetOptions.JSON_PROPERTY_NETNS,
  NetOptions.JSON_PROPERTY_NETWORK_ALIAS,
  NetOptions.JSON_PROPERTY_NETWORK_OPTIONS,
  NetOptions.JSON_PROPERTY_NETWORKS,
  NetOptions.JSON_PROPERTY_NO_MANAGE_HOSTS,
  NetOptions.JSON_PROPERTY_NO_MANAGE_RESOLV_CONF,
  NetOptions.JSON_PROPERTY_PORTMAPPINGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class NetOptions {
  public static final String JSON_PROPERTY_DNS_OPTION = "dns_option";
  private List<String> dnsOption = new ArrayList<>();

  public static final String JSON_PROPERTY_DNS_SEARCH = "dns_search";
  private List<String> dnsSearch = new ArrayList<>();

  public static final String JSON_PROPERTY_DNS_SERVER = "dns_server";
  private List<String> dnsServer = new ArrayList<>();

  public static final String JSON_PROPERTY_HOSTADD = "hostadd";
  private List<String> hostadd = new ArrayList<>();

  public static final String JSON_PROPERTY_NETNS = "netns";
  private Namespace netns;

  public static final String JSON_PROPERTY_NETWORK_ALIAS = "network_alias";
  private List<String> networkAlias = new ArrayList<>();

  public static final String JSON_PROPERTY_NETWORK_OPTIONS = "network_options";
  private Map<String, List<String>> networkOptions = new HashMap<>();

  public static final String JSON_PROPERTY_NETWORKS = "networks";
  private Map<String, PerNetworkOptions> networks = new HashMap<>();

  public static final String JSON_PROPERTY_NO_MANAGE_HOSTS = "no_manage_hosts";
  private Boolean noManageHosts;

  public static final String JSON_PROPERTY_NO_MANAGE_RESOLV_CONF = "no_manage_resolv_conf";
  private Boolean noManageResolvConf;

  public static final String JSON_PROPERTY_PORTMAPPINGS = "portmappings";
  private List<@Valid PortMapping> portmappings = new ArrayList<>();

  public NetOptions() { 
  }

  public NetOptions dnsOption(List<String> dnsOption) {
    this.dnsOption = dnsOption;
    return this;
  }

  public NetOptions addDnsOptionItem(String dnsOptionItem) {
    if (this.dnsOption == null) {
      this.dnsOption = new ArrayList<>();
    }
    this.dnsOption.add(dnsOptionItem);
    return this;
  }

  /**
   * Get dnsOption
   * @return dnsOption
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DNS_OPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getDnsOption() {
    return dnsOption;
  }


  @JsonProperty(JSON_PROPERTY_DNS_OPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDnsOption(List<String> dnsOption) {
    this.dnsOption = dnsOption;
  }


  public NetOptions dnsSearch(List<String> dnsSearch) {
    this.dnsSearch = dnsSearch;
    return this;
  }

  public NetOptions addDnsSearchItem(String dnsSearchItem) {
    if (this.dnsSearch == null) {
      this.dnsSearch = new ArrayList<>();
    }
    this.dnsSearch.add(dnsSearchItem);
    return this;
  }

  /**
   * Get dnsSearch
   * @return dnsSearch
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DNS_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getDnsSearch() {
    return dnsSearch;
  }


  @JsonProperty(JSON_PROPERTY_DNS_SEARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDnsSearch(List<String> dnsSearch) {
    this.dnsSearch = dnsSearch;
  }


  public NetOptions dnsServer(List<String> dnsServer) {
    this.dnsServer = dnsServer;
    return this;
  }

  public NetOptions addDnsServerItem(String dnsServerItem) {
    if (this.dnsServer == null) {
      this.dnsServer = new ArrayList<>();
    }
    this.dnsServer.add(dnsServerItem);
    return this;
  }

  /**
   * Get dnsServer
   * @return dnsServer
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DNS_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getDnsServer() {
    return dnsServer;
  }


  @JsonProperty(JSON_PROPERTY_DNS_SERVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDnsServer(List<String> dnsServer) {
    this.dnsServer = dnsServer;
  }


  public NetOptions hostadd(List<String> hostadd) {
    this.hostadd = hostadd;
    return this;
  }

  public NetOptions addHostaddItem(String hostaddItem) {
    if (this.hostadd == null) {
      this.hostadd = new ArrayList<>();
    }
    this.hostadd.add(hostaddItem);
    return this;
  }

  /**
   * Get hostadd
   * @return hostadd
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_HOSTADD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getHostadd() {
    return hostadd;
  }


  @JsonProperty(JSON_PROPERTY_HOSTADD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostadd(List<String> hostadd) {
    this.hostadd = hostadd;
  }


  public NetOptions netns(Namespace netns) {
    this.netns = netns;
    return this;
  }

  /**
   * Get netns
   * @return netns
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NETNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Namespace getNetns() {
    return netns;
  }


  @JsonProperty(JSON_PROPERTY_NETNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetns(Namespace netns) {
    this.netns = netns;
  }


  public NetOptions networkAlias(List<String> networkAlias) {
    this.networkAlias = networkAlias;
    return this;
  }

  public NetOptions addNetworkAliasItem(String networkAliasItem) {
    if (this.networkAlias == null) {
      this.networkAlias = new ArrayList<>();
    }
    this.networkAlias.add(networkAliasItem);
    return this;
  }

  /**
   * Get networkAlias
   * @return networkAlias
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NETWORK_ALIAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getNetworkAlias() {
    return networkAlias;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_ALIAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkAlias(List<String> networkAlias) {
    this.networkAlias = networkAlias;
  }


  public NetOptions networkOptions(Map<String, List<String>> networkOptions) {
    this.networkOptions = networkOptions;
    return this;
  }

  public NetOptions putNetworkOptionsItem(String key, List<String> networkOptionsItem) {
    if (this.networkOptions == null) {
      this.networkOptions = new HashMap<>();
    }
    this.networkOptions.put(key, networkOptionsItem);
    return this;
  }

  /**
   * NetworkOptions are additional options for each network
   * @return networkOptions
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NETWORK_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, List<String>> getNetworkOptions() {
    return networkOptions;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkOptions(Map<String, List<String>> networkOptions) {
    this.networkOptions = networkOptions;
  }


  public NetOptions networks(Map<String, PerNetworkOptions> networks) {
    this.networks = networks;
    return this;
  }

  public NetOptions putNetworksItem(String key, PerNetworkOptions networksItem) {
    if (this.networks == null) {
      this.networks = new HashMap<>();
    }
    this.networks.put(key, networksItem);
    return this;
  }

  /**
   * Get networks
   * @return networks
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_NETWORKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, PerNetworkOptions> getNetworks() {
    return networks;
  }


  @JsonProperty(JSON_PROPERTY_NETWORKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworks(Map<String, PerNetworkOptions> networks) {
    this.networks = networks;
  }


  public NetOptions noManageHosts(Boolean noManageHosts) {
    this.noManageHosts = noManageHosts;
    return this;
  }

  /**
   * Get noManageHosts
   * @return noManageHosts
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NO_MANAGE_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getNoManageHosts() {
    return noManageHosts;
  }


  @JsonProperty(JSON_PROPERTY_NO_MANAGE_HOSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNoManageHosts(Boolean noManageHosts) {
    this.noManageHosts = noManageHosts;
  }


  public NetOptions noManageResolvConf(Boolean noManageResolvConf) {
    this.noManageResolvConf = noManageResolvConf;
    return this;
  }

  /**
   * Get noManageResolvConf
   * @return noManageResolvConf
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NO_MANAGE_RESOLV_CONF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getNoManageResolvConf() {
    return noManageResolvConf;
  }


  @JsonProperty(JSON_PROPERTY_NO_MANAGE_RESOLV_CONF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNoManageResolvConf(Boolean noManageResolvConf) {
    this.noManageResolvConf = noManageResolvConf;
  }


  public NetOptions portmappings(List<@Valid PortMapping> portmappings) {
    this.portmappings = portmappings;
    return this;
  }

  public NetOptions addPortmappingsItem(PortMapping portmappingsItem) {
    if (this.portmappings == null) {
      this.portmappings = new ArrayList<>();
    }
    this.portmappings.add(portmappingsItem);
    return this;
  }

  /**
   * Get portmappings
   * @return portmappings
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_PORTMAPPINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid PortMapping> getPortmappings() {
    return portmappings;
  }


  @JsonProperty(JSON_PROPERTY_PORTMAPPINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortmappings(List<@Valid PortMapping> portmappings) {
    this.portmappings = portmappings;
  }


  /**
   * Return true if this NetOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetOptions netOptions = (NetOptions) o;
    return Objects.equals(this.dnsOption, netOptions.dnsOption) &&
        Objects.equals(this.dnsSearch, netOptions.dnsSearch) &&
        Objects.equals(this.dnsServer, netOptions.dnsServer) &&
        Objects.equals(this.hostadd, netOptions.hostadd) &&
        Objects.equals(this.netns, netOptions.netns) &&
        Objects.equals(this.networkAlias, netOptions.networkAlias) &&
        Objects.equals(this.networkOptions, netOptions.networkOptions) &&
        Objects.equals(this.networks, netOptions.networks) &&
        Objects.equals(this.noManageHosts, netOptions.noManageHosts) &&
        Objects.equals(this.noManageResolvConf, netOptions.noManageResolvConf) &&
        Objects.equals(this.portmappings, netOptions.portmappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsOption, dnsSearch, dnsServer, hostadd, netns, networkAlias, networkOptions, networks, noManageHosts, noManageResolvConf, portmappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetOptions {\n");
    sb.append("    dnsOption: ").append(toIndentedString(dnsOption)).append("\n");
    sb.append("    dnsSearch: ").append(toIndentedString(dnsSearch)).append("\n");
    sb.append("    dnsServer: ").append(toIndentedString(dnsServer)).append("\n");
    sb.append("    hostadd: ").append(toIndentedString(hostadd)).append("\n");
    sb.append("    netns: ").append(toIndentedString(netns)).append("\n");
    sb.append("    networkAlias: ").append(toIndentedString(networkAlias)).append("\n");
    sb.append("    networkOptions: ").append(toIndentedString(networkOptions)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    noManageHosts: ").append(toIndentedString(noManageHosts)).append("\n");
    sb.append("    noManageResolvConf: ").append(toIndentedString(noManageResolvConf)).append("\n");
    sb.append("    portmappings: ").append(toIndentedString(portmappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `dns_option` to the URL query string
    if (getDnsOption() != null) {
      for (int i = 0; i < getDnsOption().size(); i++) {
        joiner.add(String.format("%sdns_option%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getDnsOption().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `dns_search` to the URL query string
    if (getDnsSearch() != null) {
      for (int i = 0; i < getDnsSearch().size(); i++) {
        joiner.add(String.format("%sdns_search%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getDnsSearch().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `dns_server` to the URL query string
    if (getDnsServer() != null) {
      for (int i = 0; i < getDnsServer().size(); i++) {
        joiner.add(String.format("%sdns_server%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getDnsServer().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `hostadd` to the URL query string
    if (getHostadd() != null) {
      for (int i = 0; i < getHostadd().size(); i++) {
        joiner.add(String.format("%shostadd%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getHostadd().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `netns` to the URL query string
    if (getNetns() != null) {
      joiner.add(getNetns().toUrlQueryString(prefix + "netns" + suffix));
    }

    // add `network_alias` to the URL query string
    if (getNetworkAlias() != null) {
      for (int i = 0; i < getNetworkAlias().size(); i++) {
        joiner.add(String.format("%snetwork_alias%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getNetworkAlias().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `network_options` to the URL query string
    if (getNetworkOptions() != null) {
      for (String _key : getNetworkOptions().keySet()) {
        joiner.add(String.format("%snetwork_options%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getNetworkOptions().get(_key), URLEncoder.encode(ApiClient.valueToString(getNetworkOptions().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `networks` to the URL query string
    if (getNetworks() != null) {
      for (String _key : getNetworks().keySet()) {
        if (getNetworks().get(_key) != null) {
          joiner.add(getNetworks().get(_key).toUrlQueryString(String.format("%snetworks%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `no_manage_hosts` to the URL query string
    if (getNoManageHosts() != null) {
      joiner.add(String.format("%sno_manage_hosts%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNoManageHosts()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `no_manage_resolv_conf` to the URL query string
    if (getNoManageResolvConf() != null) {
      joiner.add(String.format("%sno_manage_resolv_conf%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNoManageResolvConf()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `portmappings` to the URL query string
    if (getPortmappings() != null) {
      for (int i = 0; i < getPortmappings().size(); i++) {
        if (getPortmappings().get(i) != null) {
          joiner.add(getPortmappings().get(i).toUrlQueryString(String.format("%sportmappings%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

