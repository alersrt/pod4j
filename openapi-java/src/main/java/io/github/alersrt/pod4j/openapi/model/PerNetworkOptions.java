/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * PerNetworkOptions
 */
@JsonPropertyOrder({
  PerNetworkOptions.JSON_PROPERTY_ALIASES,
  PerNetworkOptions.JSON_PROPERTY_INTERFACE_NAME,
  PerNetworkOptions.JSON_PROPERTY_STATIC_IPS,
  PerNetworkOptions.JSON_PROPERTY_STATIC_MAC
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class PerNetworkOptions {
  public static final String JSON_PROPERTY_ALIASES = "aliases";
  private List<String> aliases = new ArrayList<>();

  public static final String JSON_PROPERTY_INTERFACE_NAME = "interface_name";
  private String interfaceName;

  public static final String JSON_PROPERTY_STATIC_IPS = "static_ips";
  private List<String> staticIps = new ArrayList<>();

  public static final String JSON_PROPERTY_STATIC_MAC = "static_mac";
  private String staticMac;

  public PerNetworkOptions() { 
  }

  public PerNetworkOptions aliases(List<String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public PerNetworkOptions addAliasesItem(String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

  /**
   * Aliases contains a list of names which the dns server should resolve to this container. Should only be set when DNSEnabled is true on the Network. If aliases are set but there is no dns support for this network the network interface implementation should ignore this and NOT error. Optional.
   * @return aliases
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ALIASES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getAliases() {
    return aliases;
  }


  @JsonProperty(JSON_PROPERTY_ALIASES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAliases(List<String> aliases) {
    this.aliases = aliases;
  }


  public PerNetworkOptions interfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
    return this;
  }

  /**
   * InterfaceName for this container. Required in the backend. Optional in the frontend. Will be filled with ethX (where X is a integer) when empty.
   * @return interfaceName
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INTERFACE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getInterfaceName() {
    return interfaceName;
  }


  @JsonProperty(JSON_PROPERTY_INTERFACE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
  }


  public PerNetworkOptions staticIps(List<String> staticIps) {
    this.staticIps = staticIps;
    return this;
  }

  public PerNetworkOptions addStaticIpsItem(String staticIpsItem) {
    if (this.staticIps == null) {
      this.staticIps = new ArrayList<>();
    }
    this.staticIps.add(staticIpsItem);
    return this;
  }

  /**
   * StaticIPs for this container. Optional.
   * @return staticIps
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATIC_IPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getStaticIps() {
    return staticIps;
  }


  @JsonProperty(JSON_PROPERTY_STATIC_IPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStaticIps(List<String> staticIps) {
    this.staticIps = staticIps;
  }


  public PerNetworkOptions staticMac(String staticMac) {
    this.staticMac = staticMac;
    return this;
  }

  /**
   * StaticMac for this container. Optional.
   * @return staticMac
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATIC_MAC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStaticMac() {
    return staticMac;
  }


  @JsonProperty(JSON_PROPERTY_STATIC_MAC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStaticMac(String staticMac) {
    this.staticMac = staticMac;
  }


  /**
   * Return true if this PerNetworkOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerNetworkOptions perNetworkOptions = (PerNetworkOptions) o;
    return Objects.equals(this.aliases, perNetworkOptions.aliases) &&
        Objects.equals(this.interfaceName, perNetworkOptions.interfaceName) &&
        Objects.equals(this.staticIps, perNetworkOptions.staticIps) &&
        Objects.equals(this.staticMac, perNetworkOptions.staticMac);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, interfaceName, staticIps, staticMac);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerNetworkOptions {\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    interfaceName: ").append(toIndentedString(interfaceName)).append("\n");
    sb.append("    staticIps: ").append(toIndentedString(staticIps)).append("\n");
    sb.append("    staticMac: ").append(toIndentedString(staticMac)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `aliases` to the URL query string
    if (getAliases() != null) {
      for (int i = 0; i < getAliases().size(); i++) {
        joiner.add(String.format("%saliases%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getAliases().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `interface_name` to the URL query string
    if (getInterfaceName() != null) {
      joiner.add(String.format("%sinterface_name%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getInterfaceName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `static_ips` to the URL query string
    if (getStaticIps() != null) {
      for (int i = 0; i < getStaticIps().size(); i++) {
        joiner.add(String.format("%sstatic_ips%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getStaticIps().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `static_mac` to the URL query string
    if (getStaticMac() != null) {
      joiner.add(String.format("%sstatic_mac%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStaticMac()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

