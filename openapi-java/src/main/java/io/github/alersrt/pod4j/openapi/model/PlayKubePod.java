/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * PlayKubePod
 */
@JsonPropertyOrder({
  PlayKubePod.JSON_PROPERTY_CONTAINER_ERRORS,
  PlayKubePod.JSON_PROPERTY_CONTAINERS,
  PlayKubePod.JSON_PROPERTY_I_D,
  PlayKubePod.JSON_PROPERTY_INIT_CONTAINERS,
  PlayKubePod.JSON_PROPERTY_LOGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class PlayKubePod {
  public static final String JSON_PROPERTY_CONTAINER_ERRORS = "ContainerErrors";
  private List<String> containerErrors = new ArrayList<>();

  public static final String JSON_PROPERTY_CONTAINERS = "Containers";
  private List<String> containers = new ArrayList<>();

  public static final String JSON_PROPERTY_I_D = "ID";
  private String ID;

  public static final String JSON_PROPERTY_INIT_CONTAINERS = "InitContainers";
  private List<String> initContainers = new ArrayList<>();

  public static final String JSON_PROPERTY_LOGS = "Logs";
  private List<String> logs = new ArrayList<>();

  public PlayKubePod() { 
  }

  public PlayKubePod containerErrors(List<String> containerErrors) {
    this.containerErrors = containerErrors;
    return this;
  }

  public PlayKubePod addContainerErrorsItem(String containerErrorsItem) {
    if (this.containerErrors == null) {
      this.containerErrors = new ArrayList<>();
    }
    this.containerErrors.add(containerErrorsItem);
    return this;
  }

  /**
   * ContainerErrors - any errors that occurred while starting containers in the pod.
   * @return containerErrors
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONTAINER_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getContainerErrors() {
    return containerErrors;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainerErrors(List<String> containerErrors) {
    this.containerErrors = containerErrors;
  }


  public PlayKubePod containers(List<String> containers) {
    this.containers = containers;
    return this;
  }

  public PlayKubePod addContainersItem(String containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * Containers - the IDs of the containers running in the created pod.
   * @return containers
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getContainers() {
    return containers;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainers(List<String> containers) {
    this.containers = containers;
  }


  public PlayKubePod ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * ID - ID of the pod created as a result of play kube.
   * @return ID
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getID() {
    return ID;
  }


  @JsonProperty(JSON_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setID(String ID) {
    this.ID = ID;
  }


  public PlayKubePod initContainers(List<String> initContainers) {
    this.initContainers = initContainers;
    return this;
  }

  public PlayKubePod addInitContainersItem(String initContainersItem) {
    if (this.initContainers == null) {
      this.initContainers = new ArrayList<>();
    }
    this.initContainers.add(initContainersItem);
    return this;
  }

  /**
   * InitContainers - the IDs of the init containers to be run in the created pod.
   * @return initContainers
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INIT_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getInitContainers() {
    return initContainers;
  }


  @JsonProperty(JSON_PROPERTY_INIT_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitContainers(List<String> initContainers) {
    this.initContainers = initContainers;
  }


  public PlayKubePod logs(List<String> logs) {
    this.logs = logs;
    return this;
  }

  public PlayKubePod addLogsItem(String logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

  /**
   * Logs - non-fatal errors and log messages while processing.
   * @return logs
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getLogs() {
    return logs;
  }


  @JsonProperty(JSON_PROPERTY_LOGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogs(List<String> logs) {
    this.logs = logs;
  }


  /**
   * Return true if this PlayKubePod object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayKubePod playKubePod = (PlayKubePod) o;
    return Objects.equals(this.containerErrors, playKubePod.containerErrors) &&
        Objects.equals(this.containers, playKubePod.containers) &&
        Objects.equals(this.ID, playKubePod.ID) &&
        Objects.equals(this.initContainers, playKubePod.initContainers) &&
        Objects.equals(this.logs, playKubePod.logs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerErrors, containers, ID, initContainers, logs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayKubePod {\n");
    sb.append("    containerErrors: ").append(toIndentedString(containerErrors)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    initContainers: ").append(toIndentedString(initContainers)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ContainerErrors` to the URL query string
    if (getContainerErrors() != null) {
      for (int i = 0; i < getContainerErrors().size(); i++) {
        joiner.add(String.format("%sContainerErrors%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getContainerErrors().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Containers` to the URL query string
    if (getContainers() != null) {
      for (int i = 0; i < getContainers().size(); i++) {
        joiner.add(String.format("%sContainers%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getContainers().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `ID` to the URL query string
    if (getID() != null) {
      joiner.add(String.format("%sID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `InitContainers` to the URL query string
    if (getInitContainers() != null) {
      for (int i = 0; i < getInitContainers().size(); i++) {
        joiner.add(String.format("%sInitContainers%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getInitContainers().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Logs` to the URL query string
    if (getLogs() != null) {
      for (int i = 0; i < getLogs().size(); i++) {
        joiner.add(String.format("%sLogs%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getLogs().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

