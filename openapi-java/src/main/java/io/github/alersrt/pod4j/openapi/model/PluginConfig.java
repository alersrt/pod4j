/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.PluginConfigArgs;
import io.github.alersrt.pod4j.openapi.model.PluginConfigInterface;
import io.github.alersrt.pod4j.openapi.model.PluginConfigLinux;
import io.github.alersrt.pod4j.openapi.model.PluginConfigNetwork;
import io.github.alersrt.pod4j.openapi.model.PluginConfigRootfs;
import io.github.alersrt.pod4j.openapi.model.PluginConfigUser;
import io.github.alersrt.pod4j.openapi.model.PluginEnv;
import io.github.alersrt.pod4j.openapi.model.PluginMount;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * PluginConfig
 */
@JsonPropertyOrder({
  PluginConfig.JSON_PROPERTY_ARGS,
  PluginConfig.JSON_PROPERTY_DESCRIPTION,
  PluginConfig.JSON_PROPERTY_DOCKER_VERSION,
  PluginConfig.JSON_PROPERTY_DOCUMENTATION,
  PluginConfig.JSON_PROPERTY_ENTRYPOINT,
  PluginConfig.JSON_PROPERTY_ENV,
  PluginConfig.JSON_PROPERTY_INTERFACE,
  PluginConfig.JSON_PROPERTY_IPC_HOST,
  PluginConfig.JSON_PROPERTY_LINUX,
  PluginConfig.JSON_PROPERTY_MOUNTS,
  PluginConfig.JSON_PROPERTY_NETWORK,
  PluginConfig.JSON_PROPERTY_PID_HOST,
  PluginConfig.JSON_PROPERTY_PROPAGATED_MOUNT,
  PluginConfig.JSON_PROPERTY_USER,
  PluginConfig.JSON_PROPERTY_WORK_DIR,
  PluginConfig.JSON_PROPERTY_ROOTFS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class PluginConfig {
  public static final String JSON_PROPERTY_ARGS = "Args";
  private PluginConfigArgs args;

  public static final String JSON_PROPERTY_DESCRIPTION = "Description";
  private String description;

  public static final String JSON_PROPERTY_DOCKER_VERSION = "DockerVersion";
  private String dockerVersion;

  public static final String JSON_PROPERTY_DOCUMENTATION = "Documentation";
  private String documentation;

  public static final String JSON_PROPERTY_ENTRYPOINT = "Entrypoint";
  private List<String> entrypoint = new ArrayList<>();

  public static final String JSON_PROPERTY_ENV = "Env";
  private List<@Valid PluginEnv> env = new ArrayList<>();

  public static final String JSON_PROPERTY_INTERFACE = "Interface";
  private PluginConfigInterface _interface;

  public static final String JSON_PROPERTY_IPC_HOST = "IpcHost";
  private Boolean ipcHost;

  public static final String JSON_PROPERTY_LINUX = "Linux";
  private PluginConfigLinux linux;

  public static final String JSON_PROPERTY_MOUNTS = "Mounts";
  private List<@Valid PluginMount> mounts = new ArrayList<>();

  public static final String JSON_PROPERTY_NETWORK = "Network";
  private PluginConfigNetwork network;

  public static final String JSON_PROPERTY_PID_HOST = "PidHost";
  private Boolean pidHost;

  public static final String JSON_PROPERTY_PROPAGATED_MOUNT = "PropagatedMount";
  private String propagatedMount;

  public static final String JSON_PROPERTY_USER = "User";
  private PluginConfigUser user;

  public static final String JSON_PROPERTY_WORK_DIR = "WorkDir";
  private String workDir;

  public static final String JSON_PROPERTY_ROOTFS = "rootfs";
  private PluginConfigRootfs rootfs;

  public PluginConfig() { 
  }

  public PluginConfig args(PluginConfigArgs args) {
    this.args = args;
    return this;
  }

  /**
   * Get args
   * @return args
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid

  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public PluginConfigArgs getArgs() {
    return args;
  }


  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setArgs(PluginConfigArgs args) {
    this.args = args;
  }


  public PluginConfig description(String description) {
    this.description = description;
    return this;
  }

  /**
   * description
   * @return description
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public PluginConfig dockerVersion(String dockerVersion) {
    this.dockerVersion = dockerVersion;
    return this;
  }

  /**
   * Docker Version used to create the plugin
   * @return dockerVersion
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DOCKER_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDockerVersion() {
    return dockerVersion;
  }


  @JsonProperty(JSON_PROPERTY_DOCKER_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDockerVersion(String dockerVersion) {
    this.dockerVersion = dockerVersion;
  }


  public PluginConfig documentation(String documentation) {
    this.documentation = documentation;
    return this;
  }

  /**
   * documentation
   * @return documentation
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_DOCUMENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getDocumentation() {
    return documentation;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDocumentation(String documentation) {
    this.documentation = documentation;
  }


  public PluginConfig entrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
    return this;
  }

  public PluginConfig addEntrypointItem(String entrypointItem) {
    if (this.entrypoint == null) {
      this.entrypoint = new ArrayList<>();
    }
    this.entrypoint.add(entrypointItem);
    return this;
  }

  /**
   * entrypoint
   * @return entrypoint
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_ENTRYPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<String> getEntrypoint() {
    return entrypoint;
  }


  @JsonProperty(JSON_PROPERTY_ENTRYPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntrypoint(List<String> entrypoint) {
    this.entrypoint = entrypoint;
  }


  public PluginConfig env(List<@Valid PluginEnv> env) {
    this.env = env;
    return this;
  }

  public PluginConfig addEnvItem(PluginEnv envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * env
   * @return env
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid

  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<@Valid PluginEnv> getEnv() {
    return env;
  }


  @JsonProperty(JSON_PROPERTY_ENV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnv(List<@Valid PluginEnv> env) {
    this.env = env;
  }


  public PluginConfig _interface(PluginConfigInterface _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * Get _interface
   * @return _interface
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid

  @JsonProperty(JSON_PROPERTY_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public PluginConfigInterface getInterface() {
    return _interface;
  }


  @JsonProperty(JSON_PROPERTY_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterface(PluginConfigInterface _interface) {
    this._interface = _interface;
  }


  public PluginConfig ipcHost(Boolean ipcHost) {
    this.ipcHost = ipcHost;
    return this;
  }

  /**
   * ipc host
   * @return ipcHost
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_IPC_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getIpcHost() {
    return ipcHost;
  }


  @JsonProperty(JSON_PROPERTY_IPC_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIpcHost(Boolean ipcHost) {
    this.ipcHost = ipcHost;
  }


  public PluginConfig linux(PluginConfigLinux linux) {
    this.linux = linux;
    return this;
  }

  /**
   * Get linux
   * @return linux
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid

  @JsonProperty(JSON_PROPERTY_LINUX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public PluginConfigLinux getLinux() {
    return linux;
  }


  @JsonProperty(JSON_PROPERTY_LINUX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLinux(PluginConfigLinux linux) {
    this.linux = linux;
  }


  public PluginConfig mounts(List<@Valid PluginMount> mounts) {
    this.mounts = mounts;
    return this;
  }

  public PluginConfig addMountsItem(PluginMount mountsItem) {
    if (this.mounts == null) {
      this.mounts = new ArrayList<>();
    }
    this.mounts.add(mountsItem);
    return this;
  }

  /**
   * mounts
   * @return mounts
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid

  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<@Valid PluginMount> getMounts() {
    return mounts;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMounts(List<@Valid PluginMount> mounts) {
    this.mounts = mounts;
  }


  public PluginConfig network(PluginConfigNetwork network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid

  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public PluginConfigNetwork getNetwork() {
    return network;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNetwork(PluginConfigNetwork network) {
    this.network = network;
  }


  public PluginConfig pidHost(Boolean pidHost) {
    this.pidHost = pidHost;
    return this;
  }

  /**
   * pid host
   * @return pidHost
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_PID_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getPidHost() {
    return pidHost;
  }


  @JsonProperty(JSON_PROPERTY_PID_HOST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPidHost(Boolean pidHost) {
    this.pidHost = pidHost;
  }


  public PluginConfig propagatedMount(String propagatedMount) {
    this.propagatedMount = propagatedMount;
    return this;
  }

  /**
   * propagated mount
   * @return propagatedMount
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_PROPAGATED_MOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPropagatedMount() {
    return propagatedMount;
  }


  @JsonProperty(JSON_PROPERTY_PROPAGATED_MOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPropagatedMount(String propagatedMount) {
    this.propagatedMount = propagatedMount;
  }


  public PluginConfig user(PluginConfigUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PluginConfigUser getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(PluginConfigUser user) {
    this.user = user;
  }


  public PluginConfig workDir(String workDir) {
    this.workDir = workDir;
    return this;
  }

  /**
   * work dir
   * @return workDir
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_WORK_DIR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getWorkDir() {
    return workDir;
  }


  @JsonProperty(JSON_PROPERTY_WORK_DIR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWorkDir(String workDir) {
    this.workDir = workDir;
  }


  public PluginConfig rootfs(PluginConfigRootfs rootfs) {
    this.rootfs = rootfs;
    return this;
  }

  /**
   * Get rootfs
   * @return rootfs
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_ROOTFS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public PluginConfigRootfs getRootfs() {
    return rootfs;
  }


  @JsonProperty(JSON_PROPERTY_ROOTFS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootfs(PluginConfigRootfs rootfs) {
    this.rootfs = rootfs;
  }


  /**
   * Return true if this PluginConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginConfig pluginConfig = (PluginConfig) o;
    return Objects.equals(this.args, pluginConfig.args) &&
        Objects.equals(this.description, pluginConfig.description) &&
        Objects.equals(this.dockerVersion, pluginConfig.dockerVersion) &&
        Objects.equals(this.documentation, pluginConfig.documentation) &&
        Objects.equals(this.entrypoint, pluginConfig.entrypoint) &&
        Objects.equals(this.env, pluginConfig.env) &&
        Objects.equals(this._interface, pluginConfig._interface) &&
        Objects.equals(this.ipcHost, pluginConfig.ipcHost) &&
        Objects.equals(this.linux, pluginConfig.linux) &&
        Objects.equals(this.mounts, pluginConfig.mounts) &&
        Objects.equals(this.network, pluginConfig.network) &&
        Objects.equals(this.pidHost, pluginConfig.pidHost) &&
        Objects.equals(this.propagatedMount, pluginConfig.propagatedMount) &&
        Objects.equals(this.user, pluginConfig.user) &&
        Objects.equals(this.workDir, pluginConfig.workDir) &&
        Objects.equals(this.rootfs, pluginConfig.rootfs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, description, dockerVersion, documentation, entrypoint, env, _interface, ipcHost, linux, mounts, network, pidHost, propagatedMount, user, workDir, rootfs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginConfig {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dockerVersion: ").append(toIndentedString(dockerVersion)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    entrypoint: ").append(toIndentedString(entrypoint)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    ipcHost: ").append(toIndentedString(ipcHost)).append("\n");
    sb.append("    linux: ").append(toIndentedString(linux)).append("\n");
    sb.append("    mounts: ").append(toIndentedString(mounts)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    pidHost: ").append(toIndentedString(pidHost)).append("\n");
    sb.append("    propagatedMount: ").append(toIndentedString(propagatedMount)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    workDir: ").append(toIndentedString(workDir)).append("\n");
    sb.append("    rootfs: ").append(toIndentedString(rootfs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Args` to the URL query string
    if (getArgs() != null) {
      joiner.add(getArgs().toUrlQueryString(prefix + "Args" + suffix));
    }

    // add `Description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sDescription%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `DockerVersion` to the URL query string
    if (getDockerVersion() != null) {
      joiner.add(String.format("%sDockerVersion%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDockerVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Documentation` to the URL query string
    if (getDocumentation() != null) {
      joiner.add(String.format("%sDocumentation%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDocumentation()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Entrypoint` to the URL query string
    if (getEntrypoint() != null) {
      for (int i = 0; i < getEntrypoint().size(); i++) {
        joiner.add(String.format("%sEntrypoint%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getEntrypoint().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Env` to the URL query string
    if (getEnv() != null) {
      for (int i = 0; i < getEnv().size(); i++) {
        if (getEnv().get(i) != null) {
          joiner.add(getEnv().get(i).toUrlQueryString(String.format("%sEnv%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Interface` to the URL query string
    if (getInterface() != null) {
      joiner.add(getInterface().toUrlQueryString(prefix + "Interface" + suffix));
    }

    // add `IpcHost` to the URL query string
    if (getIpcHost() != null) {
      joiner.add(String.format("%sIpcHost%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIpcHost()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Linux` to the URL query string
    if (getLinux() != null) {
      joiner.add(getLinux().toUrlQueryString(prefix + "Linux" + suffix));
    }

    // add `Mounts` to the URL query string
    if (getMounts() != null) {
      for (int i = 0; i < getMounts().size(); i++) {
        if (getMounts().get(i) != null) {
          joiner.add(getMounts().get(i).toUrlQueryString(String.format("%sMounts%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Network` to the URL query string
    if (getNetwork() != null) {
      joiner.add(getNetwork().toUrlQueryString(prefix + "Network" + suffix));
    }

    // add `PidHost` to the URL query string
    if (getPidHost() != null) {
      joiner.add(String.format("%sPidHost%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPidHost()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `PropagatedMount` to the URL query string
    if (getPropagatedMount() != null) {
      joiner.add(String.format("%sPropagatedMount%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPropagatedMount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `User` to the URL query string
    if (getUser() != null) {
      joiner.add(getUser().toUrlQueryString(prefix + "User" + suffix));
    }

    // add `WorkDir` to the URL query string
    if (getWorkDir() != null) {
      joiner.add(String.format("%sWorkDir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWorkDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `rootfs` to the URL query string
    if (getRootfs() != null) {
      joiner.add(getRootfs().toUrlQueryString(prefix + "rootfs" + suffix));
    }

    return joiner.toString();
  }
}

