/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * StartupHealthCheck
 */
@JsonPropertyOrder({
  StartupHealthCheck.JSON_PROPERTY_INTERVAL,
  StartupHealthCheck.JSON_PROPERTY_RETRIES,
  StartupHealthCheck.JSON_PROPERTY_START_INTERVAL,
  StartupHealthCheck.JSON_PROPERTY_START_PERIOD,
  StartupHealthCheck.JSON_PROPERTY_SUCCESSES,
  StartupHealthCheck.JSON_PROPERTY_TEST,
  StartupHealthCheck.JSON_PROPERTY_TIMEOUT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class StartupHealthCheck {
  public static final String JSON_PROPERTY_INTERVAL = "Interval";
  private Long interval;

  public static final String JSON_PROPERTY_RETRIES = "Retries";
  private Long retries;

  public static final String JSON_PROPERTY_START_INTERVAL = "StartInterval";
  private Long startInterval;

  public static final String JSON_PROPERTY_START_PERIOD = "StartPeriod";
  private Long startPeriod;

  public static final String JSON_PROPERTY_SUCCESSES = "Successes";
  private Long successes;

  public static final String JSON_PROPERTY_TEST = "Test";
  private List<String> test = new ArrayList<>();

  public static final String JSON_PROPERTY_TIMEOUT = "Timeout";
  private Long timeout;

  public StartupHealthCheck() { 
  }

  public StartupHealthCheck interval(Long interval) {
    this.interval = interval;
    return this;
  }

  /**
   * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
   * @return interval
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getInterval() {
    return interval;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterval(Long interval) {
    this.interval = interval;
  }


  public StartupHealthCheck retries(Long retries) {
    this.retries = retries;
    return this;
  }

  /**
   * Retries is the number of consecutive failures needed to consider a container as unhealthy. Zero means inherit.
   * @return retries
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RETRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getRetries() {
    return retries;
  }


  @JsonProperty(JSON_PROPERTY_RETRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetries(Long retries) {
    this.retries = retries;
  }


  public StartupHealthCheck startInterval(Long startInterval) {
    this.startInterval = startInterval;
    return this;
  }

  /**
   * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
   * @return startInterval
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_START_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getStartInterval() {
    return startInterval;
  }


  @JsonProperty(JSON_PROPERTY_START_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartInterval(Long startInterval) {
    this.startInterval = startInterval;
  }


  public StartupHealthCheck startPeriod(Long startPeriod) {
    this.startPeriod = startPeriod;
    return this;
  }

  /**
   * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
   * @return startPeriod
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_START_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getStartPeriod() {
    return startPeriod;
  }


  @JsonProperty(JSON_PROPERTY_START_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartPeriod(Long startPeriod) {
    this.startPeriod = startPeriod;
  }


  public StartupHealthCheck successes(Long successes) {
    this.successes = successes;
    return this;
  }

  /**
   * Successes are the number of successes required to mark the startup HC as passed. If set to 0, a single success will mark the HC as passed.
   * @return successes
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SUCCESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSuccesses() {
    return successes;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccesses(Long successes) {
    this.successes = successes;
  }


  public StartupHealthCheck test(List<String> test) {
    this.test = test;
    return this;
  }

  public StartupHealthCheck addTestItem(String testItem) {
    if (this.test == null) {
      this.test = new ArrayList<>();
    }
    this.test.add(testItem);
    return this;
  }

  /**
   * Test is the test to perform to check that the container is healthy. An empty slice means to inherit the default. The options are: {} : inherit healthcheck {\&quot;NONE\&quot;} : disable healthcheck {\&quot;CMD\&quot;, args...} : exec arguments directly {\&quot;CMD-SHELL\&quot;, command} : run command with system&#39;s default shell
   * @return test
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getTest() {
    return test;
  }


  @JsonProperty(JSON_PROPERTY_TEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTest(List<String> test) {
    this.test = test;
  }


  public StartupHealthCheck timeout(Long timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.
   * @return timeout
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getTimeout() {
    return timeout;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeout(Long timeout) {
    this.timeout = timeout;
  }


  /**
   * Return true if this StartupHealthCheck object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartupHealthCheck startupHealthCheck = (StartupHealthCheck) o;
    return Objects.equals(this.interval, startupHealthCheck.interval) &&
        Objects.equals(this.retries, startupHealthCheck.retries) &&
        Objects.equals(this.startInterval, startupHealthCheck.startInterval) &&
        Objects.equals(this.startPeriod, startupHealthCheck.startPeriod) &&
        Objects.equals(this.successes, startupHealthCheck.successes) &&
        Objects.equals(this.test, startupHealthCheck.test) &&
        Objects.equals(this.timeout, startupHealthCheck.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interval, retries, startInterval, startPeriod, successes, test, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartupHealthCheck {\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    startInterval: ").append(toIndentedString(startInterval)).append("\n");
    sb.append("    startPeriod: ").append(toIndentedString(startPeriod)).append("\n");
    sb.append("    successes: ").append(toIndentedString(successes)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Interval` to the URL query string
    if (getInterval() != null) {
      joiner.add(String.format("%sInterval%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getInterval()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Retries` to the URL query string
    if (getRetries() != null) {
      joiner.add(String.format("%sRetries%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRetries()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `StartInterval` to the URL query string
    if (getStartInterval() != null) {
      joiner.add(String.format("%sStartInterval%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStartInterval()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `StartPeriod` to the URL query string
    if (getStartPeriod() != null) {
      joiner.add(String.format("%sStartPeriod%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStartPeriod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Successes` to the URL query string
    if (getSuccesses() != null) {
      joiner.add(String.format("%sSuccesses%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSuccesses()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Test` to the URL query string
    if (getTest() != null) {
      for (int i = 0; i < getTest().size(); i++) {
        joiner.add(String.format("%sTest%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getTest().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Timeout` to the URL query string
    if (getTimeout() != null) {
      joiner.add(String.format("%sTimeout%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTimeout()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

