/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ContainerStore;
import io.github.alersrt.pod4j.openapi.model.ImageStore;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * StoreInfo describes the container storage and its attributes
 */
@JsonPropertyOrder({
  StoreInfo.JSON_PROPERTY_CONFIG_FILE,
  StoreInfo.JSON_PROPERTY_CONTAINER_STORE,
  StoreInfo.JSON_PROPERTY_GRAPH_DRIVER_NAME,
  StoreInfo.JSON_PROPERTY_GRAPH_OPTIONS,
  StoreInfo.JSON_PROPERTY_GRAPH_ROOT,
  StoreInfo.JSON_PROPERTY_GRAPH_ROOT_ALLOCATED,
  StoreInfo.JSON_PROPERTY_GRAPH_ROOT_USED,
  StoreInfo.JSON_PROPERTY_GRAPH_STATUS,
  StoreInfo.JSON_PROPERTY_IMAGE_COPY_TMP_DIR,
  StoreInfo.JSON_PROPERTY_IMAGE_STORE,
  StoreInfo.JSON_PROPERTY_RUN_ROOT,
  StoreInfo.JSON_PROPERTY_TRANSIENT_STORE,
  StoreInfo.JSON_PROPERTY_VOLUME_PATH
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class StoreInfo {
  public static final String JSON_PROPERTY_CONFIG_FILE = "configFile";
  private String configFile;

  public static final String JSON_PROPERTY_CONTAINER_STORE = "containerStore";
  private ContainerStore containerStore;

  public static final String JSON_PROPERTY_GRAPH_DRIVER_NAME = "graphDriverName";
  private String graphDriverName;

  public static final String JSON_PROPERTY_GRAPH_OPTIONS = "graphOptions";
  private Map<String, Object> graphOptions = new HashMap<>();

  public static final String JSON_PROPERTY_GRAPH_ROOT = "graphRoot";
  private String graphRoot;

  public static final String JSON_PROPERTY_GRAPH_ROOT_ALLOCATED = "graphRootAllocated";
  private Integer graphRootAllocated;

  public static final String JSON_PROPERTY_GRAPH_ROOT_USED = "graphRootUsed";
  private Integer graphRootUsed;

  public static final String JSON_PROPERTY_GRAPH_STATUS = "graphStatus";
  private Map<String, String> graphStatus = new HashMap<>();

  public static final String JSON_PROPERTY_IMAGE_COPY_TMP_DIR = "imageCopyTmpDir";
  private String imageCopyTmpDir;

  public static final String JSON_PROPERTY_IMAGE_STORE = "imageStore";
  private ImageStore imageStore;

  public static final String JSON_PROPERTY_RUN_ROOT = "runRoot";
  private String runRoot;

  public static final String JSON_PROPERTY_TRANSIENT_STORE = "transientStore";
  private Boolean transientStore;

  public static final String JSON_PROPERTY_VOLUME_PATH = "volumePath";
  private String volumePath;

  public StoreInfo() { 
  }

  public StoreInfo configFile(String configFile) {
    this.configFile = configFile;
    return this;
  }

  /**
   * Get configFile
   * @return configFile
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONFIG_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getConfigFile() {
    return configFile;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigFile(String configFile) {
    this.configFile = configFile;
  }


  public StoreInfo containerStore(ContainerStore containerStore) {
    this.containerStore = containerStore;
    return this;
  }

  /**
   * Get containerStore
   * @return containerStore
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONTAINER_STORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ContainerStore getContainerStore() {
    return containerStore;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER_STORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainerStore(ContainerStore containerStore) {
    this.containerStore = containerStore;
  }


  public StoreInfo graphDriverName(String graphDriverName) {
    this.graphDriverName = graphDriverName;
    return this;
  }

  /**
   * Get graphDriverName
   * @return graphDriverName
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_GRAPH_DRIVER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getGraphDriverName() {
    return graphDriverName;
  }


  @JsonProperty(JSON_PROPERTY_GRAPH_DRIVER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphDriverName(String graphDriverName) {
    this.graphDriverName = graphDriverName;
  }


  public StoreInfo graphOptions(Map<String, Object> graphOptions) {
    this.graphOptions = graphOptions;
    return this;
  }

  public StoreInfo putGraphOptionsItem(String key, Object graphOptionsItem) {
    if (this.graphOptions == null) {
      this.graphOptions = new HashMap<>();
    }
    this.graphOptions.put(key, graphOptionsItem);
    return this;
  }

  /**
   * Get graphOptions
   * @return graphOptions
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_GRAPH_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, Object> getGraphOptions() {
    return graphOptions;
  }


  @JsonProperty(JSON_PROPERTY_GRAPH_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphOptions(Map<String, Object> graphOptions) {
    this.graphOptions = graphOptions;
  }


  public StoreInfo graphRoot(String graphRoot) {
    this.graphRoot = graphRoot;
    return this;
  }

  /**
   * Get graphRoot
   * @return graphRoot
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_GRAPH_ROOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getGraphRoot() {
    return graphRoot;
  }


  @JsonProperty(JSON_PROPERTY_GRAPH_ROOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphRoot(String graphRoot) {
    this.graphRoot = graphRoot;
  }


  public StoreInfo graphRootAllocated(Integer graphRootAllocated) {
    this.graphRootAllocated = graphRootAllocated;
    return this;
  }

  /**
   * GraphRootAllocated is how much space the graphroot has in bytes
   * @return graphRootAllocated
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_GRAPH_ROOT_ALLOCATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getGraphRootAllocated() {
    return graphRootAllocated;
  }


  @JsonProperty(JSON_PROPERTY_GRAPH_ROOT_ALLOCATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphRootAllocated(Integer graphRootAllocated) {
    this.graphRootAllocated = graphRootAllocated;
  }


  public StoreInfo graphRootUsed(Integer graphRootUsed) {
    this.graphRootUsed = graphRootUsed;
    return this;
  }

  /**
   * GraphRootUsed is how much of graphroot is used in bytes
   * @return graphRootUsed
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_GRAPH_ROOT_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getGraphRootUsed() {
    return graphRootUsed;
  }


  @JsonProperty(JSON_PROPERTY_GRAPH_ROOT_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphRootUsed(Integer graphRootUsed) {
    this.graphRootUsed = graphRootUsed;
  }


  public StoreInfo graphStatus(Map<String, String> graphStatus) {
    this.graphStatus = graphStatus;
    return this;
  }

  public StoreInfo putGraphStatusItem(String key, String graphStatusItem) {
    if (this.graphStatus == null) {
      this.graphStatus = new HashMap<>();
    }
    this.graphStatus.put(key, graphStatusItem);
    return this;
  }

  /**
   * Get graphStatus
   * @return graphStatus
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_GRAPH_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getGraphStatus() {
    return graphStatus;
  }


  @JsonProperty(JSON_PROPERTY_GRAPH_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGraphStatus(Map<String, String> graphStatus) {
    this.graphStatus = graphStatus;
  }


  public StoreInfo imageCopyTmpDir(String imageCopyTmpDir) {
    this.imageCopyTmpDir = imageCopyTmpDir;
    return this;
  }

  /**
   * Get imageCopyTmpDir
   * @return imageCopyTmpDir
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_COPY_TMP_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageCopyTmpDir() {
    return imageCopyTmpDir;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_COPY_TMP_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageCopyTmpDir(String imageCopyTmpDir) {
    this.imageCopyTmpDir = imageCopyTmpDir;
  }


  public StoreInfo imageStore(ImageStore imageStore) {
    this.imageStore = imageStore;
    return this;
  }

  /**
   * Get imageStore
   * @return imageStore
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_IMAGE_STORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ImageStore getImageStore() {
    return imageStore;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_STORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageStore(ImageStore imageStore) {
    this.imageStore = imageStore;
  }


  public StoreInfo runRoot(String runRoot) {
    this.runRoot = runRoot;
    return this;
  }

  /**
   * Get runRoot
   * @return runRoot
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RUN_ROOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRunRoot() {
    return runRoot;
  }


  @JsonProperty(JSON_PROPERTY_RUN_ROOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRunRoot(String runRoot) {
    this.runRoot = runRoot;
  }


  public StoreInfo transientStore(Boolean transientStore) {
    this.transientStore = transientStore;
    return this;
  }

  /**
   * Get transientStore
   * @return transientStore
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TRANSIENT_STORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTransientStore() {
    return transientStore;
  }


  @JsonProperty(JSON_PROPERTY_TRANSIENT_STORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransientStore(Boolean transientStore) {
    this.transientStore = transientStore;
  }


  public StoreInfo volumePath(String volumePath) {
    this.volumePath = volumePath;
    return this;
  }

  /**
   * Get volumePath
   * @return volumePath
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VOLUME_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVolumePath() {
    return volumePath;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumePath(String volumePath) {
    this.volumePath = volumePath;
  }


  /**
   * Return true if this StoreInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreInfo storeInfo = (StoreInfo) o;
    return Objects.equals(this.configFile, storeInfo.configFile) &&
        Objects.equals(this.containerStore, storeInfo.containerStore) &&
        Objects.equals(this.graphDriverName, storeInfo.graphDriverName) &&
        Objects.equals(this.graphOptions, storeInfo.graphOptions) &&
        Objects.equals(this.graphRoot, storeInfo.graphRoot) &&
        Objects.equals(this.graphRootAllocated, storeInfo.graphRootAllocated) &&
        Objects.equals(this.graphRootUsed, storeInfo.graphRootUsed) &&
        Objects.equals(this.graphStatus, storeInfo.graphStatus) &&
        Objects.equals(this.imageCopyTmpDir, storeInfo.imageCopyTmpDir) &&
        Objects.equals(this.imageStore, storeInfo.imageStore) &&
        Objects.equals(this.runRoot, storeInfo.runRoot) &&
        Objects.equals(this.transientStore, storeInfo.transientStore) &&
        Objects.equals(this.volumePath, storeInfo.volumePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configFile, containerStore, graphDriverName, graphOptions, graphRoot, graphRootAllocated, graphRootUsed, graphStatus, imageCopyTmpDir, imageStore, runRoot, transientStore, volumePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreInfo {\n");
    sb.append("    configFile: ").append(toIndentedString(configFile)).append("\n");
    sb.append("    containerStore: ").append(toIndentedString(containerStore)).append("\n");
    sb.append("    graphDriverName: ").append(toIndentedString(graphDriverName)).append("\n");
    sb.append("    graphOptions: ").append(toIndentedString(graphOptions)).append("\n");
    sb.append("    graphRoot: ").append(toIndentedString(graphRoot)).append("\n");
    sb.append("    graphRootAllocated: ").append(toIndentedString(graphRootAllocated)).append("\n");
    sb.append("    graphRootUsed: ").append(toIndentedString(graphRootUsed)).append("\n");
    sb.append("    graphStatus: ").append(toIndentedString(graphStatus)).append("\n");
    sb.append("    imageCopyTmpDir: ").append(toIndentedString(imageCopyTmpDir)).append("\n");
    sb.append("    imageStore: ").append(toIndentedString(imageStore)).append("\n");
    sb.append("    runRoot: ").append(toIndentedString(runRoot)).append("\n");
    sb.append("    transientStore: ").append(toIndentedString(transientStore)).append("\n");
    sb.append("    volumePath: ").append(toIndentedString(volumePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `configFile` to the URL query string
    if (getConfigFile() != null) {
      joiner.add(String.format("%sconfigFile%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getConfigFile()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `containerStore` to the URL query string
    if (getContainerStore() != null) {
      joiner.add(getContainerStore().toUrlQueryString(prefix + "containerStore" + suffix));
    }

    // add `graphDriverName` to the URL query string
    if (getGraphDriverName() != null) {
      joiner.add(String.format("%sgraphDriverName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getGraphDriverName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `graphOptions` to the URL query string
    if (getGraphOptions() != null) {
      for (String _key : getGraphOptions().keySet()) {
        joiner.add(String.format("%sgraphOptions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getGraphOptions().get(_key), URLEncoder.encode(ApiClient.valueToString(getGraphOptions().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `graphRoot` to the URL query string
    if (getGraphRoot() != null) {
      joiner.add(String.format("%sgraphRoot%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getGraphRoot()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `graphRootAllocated` to the URL query string
    if (getGraphRootAllocated() != null) {
      joiner.add(String.format("%sgraphRootAllocated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getGraphRootAllocated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `graphRootUsed` to the URL query string
    if (getGraphRootUsed() != null) {
      joiner.add(String.format("%sgraphRootUsed%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getGraphRootUsed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `graphStatus` to the URL query string
    if (getGraphStatus() != null) {
      for (String _key : getGraphStatus().keySet()) {
        joiner.add(String.format("%sgraphStatus%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getGraphStatus().get(_key), URLEncoder.encode(ApiClient.valueToString(getGraphStatus().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `imageCopyTmpDir` to the URL query string
    if (getImageCopyTmpDir() != null) {
      joiner.add(String.format("%simageCopyTmpDir%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageCopyTmpDir()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `imageStore` to the URL query string
    if (getImageStore() != null) {
      joiner.add(getImageStore().toUrlQueryString(prefix + "imageStore" + suffix));
    }

    // add `runRoot` to the URL query string
    if (getRunRoot() != null) {
      joiner.add(String.format("%srunRoot%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRunRoot()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `transientStore` to the URL query string
    if (getTransientStore() != null) {
      joiner.add(String.format("%stransientStore%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTransientStore()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `volumePath` to the URL query string
    if (getVolumePath() != null) {
      joiner.add(String.format("%svolumePath%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getVolumePath()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

