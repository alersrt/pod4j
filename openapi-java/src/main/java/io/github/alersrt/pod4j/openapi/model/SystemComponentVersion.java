/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ComponentVersion;
import io.github.alersrt.pod4j.openapi.model.SystemComponentVersionPlatform;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * SystemComponentVersion is the type used by pkg/domain/entities
 */
@JsonPropertyOrder({
  SystemComponentVersion.JSON_PROPERTY_API_VERSION,
  SystemComponentVersion.JSON_PROPERTY_ARCH,
  SystemComponentVersion.JSON_PROPERTY_BUILD_TIME,
  SystemComponentVersion.JSON_PROPERTY_COMPONENTS,
  SystemComponentVersion.JSON_PROPERTY_EXPERIMENTAL,
  SystemComponentVersion.JSON_PROPERTY_GIT_COMMIT,
  SystemComponentVersion.JSON_PROPERTY_GO_VERSION,
  SystemComponentVersion.JSON_PROPERTY_KERNEL_VERSION,
  SystemComponentVersion.JSON_PROPERTY_MIN_A_P_I_VERSION,
  SystemComponentVersion.JSON_PROPERTY_OS,
  SystemComponentVersion.JSON_PROPERTY_PLATFORM,
  SystemComponentVersion.JSON_PROPERTY_VERSION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class SystemComponentVersion {
  public static final String JSON_PROPERTY_API_VERSION = "ApiVersion";
  private String apiVersion;

  public static final String JSON_PROPERTY_ARCH = "Arch";
  private String arch;

  public static final String JSON_PROPERTY_BUILD_TIME = "BuildTime";
  private String buildTime;

  public static final String JSON_PROPERTY_COMPONENTS = "Components";
  private List<@Valid ComponentVersion> components = new ArrayList<>();

  public static final String JSON_PROPERTY_EXPERIMENTAL = "Experimental";
  private Boolean experimental;

  public static final String JSON_PROPERTY_GIT_COMMIT = "GitCommit";
  private String gitCommit;

  public static final String JSON_PROPERTY_GO_VERSION = "GoVersion";
  private String goVersion;

  public static final String JSON_PROPERTY_KERNEL_VERSION = "KernelVersion";
  private String kernelVersion;

  public static final String JSON_PROPERTY_MIN_A_P_I_VERSION = "MinAPIVersion";
  private String minAPIVersion;

  public static final String JSON_PROPERTY_OS = "Os";
  private String os;

  public static final String JSON_PROPERTY_PLATFORM = "Platform";
  private SystemComponentVersionPlatform platform;

  public static final String JSON_PROPERTY_VERSION = "Version";
  private String version;

  public SystemComponentVersion() { 
  }

  public SystemComponentVersion apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Get apiVersion
   * @return apiVersion
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_API_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getApiVersion() {
    return apiVersion;
  }


  @JsonProperty(JSON_PROPERTY_API_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public SystemComponentVersion arch(String arch) {
    this.arch = arch;
    return this;
  }

  /**
   * Get arch
   * @return arch
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getArch() {
    return arch;
  }


  @JsonProperty(JSON_PROPERTY_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArch(String arch) {
    this.arch = arch;
  }


  public SystemComponentVersion buildTime(String buildTime) {
    this.buildTime = buildTime;
    return this;
  }

  /**
   * Get buildTime
   * @return buildTime
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_BUILD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getBuildTime() {
    return buildTime;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildTime(String buildTime) {
    this.buildTime = buildTime;
  }


  public SystemComponentVersion components(List<@Valid ComponentVersion> components) {
    this.components = components;
    return this;
  }

  public SystemComponentVersion addComponentsItem(ComponentVersion componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * Get components
   * @return components
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_COMPONENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid ComponentVersion> getComponents() {
    return components;
  }


  @JsonProperty(JSON_PROPERTY_COMPONENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComponents(List<@Valid ComponentVersion> components) {
    this.components = components;
  }


  public SystemComponentVersion experimental(Boolean experimental) {
    this.experimental = experimental;
    return this;
  }

  /**
   * Get experimental
   * @return experimental
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXPERIMENTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getExperimental() {
    return experimental;
  }


  @JsonProperty(JSON_PROPERTY_EXPERIMENTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExperimental(Boolean experimental) {
    this.experimental = experimental;
  }


  public SystemComponentVersion gitCommit(String gitCommit) {
    this.gitCommit = gitCommit;
    return this;
  }

  /**
   * Get gitCommit
   * @return gitCommit
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_GIT_COMMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getGitCommit() {
    return gitCommit;
  }


  @JsonProperty(JSON_PROPERTY_GIT_COMMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGitCommit(String gitCommit) {
    this.gitCommit = gitCommit;
  }


  public SystemComponentVersion goVersion(String goVersion) {
    this.goVersion = goVersion;
    return this;
  }

  /**
   * Get goVersion
   * @return goVersion
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_GO_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getGoVersion() {
    return goVersion;
  }


  @JsonProperty(JSON_PROPERTY_GO_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGoVersion(String goVersion) {
    this.goVersion = goVersion;
  }


  public SystemComponentVersion kernelVersion(String kernelVersion) {
    this.kernelVersion = kernelVersion;
    return this;
  }

  /**
   * Get kernelVersion
   * @return kernelVersion
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_KERNEL_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getKernelVersion() {
    return kernelVersion;
  }


  @JsonProperty(JSON_PROPERTY_KERNEL_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKernelVersion(String kernelVersion) {
    this.kernelVersion = kernelVersion;
  }


  public SystemComponentVersion minAPIVersion(String minAPIVersion) {
    this.minAPIVersion = minAPIVersion;
    return this;
  }

  /**
   * Get minAPIVersion
   * @return minAPIVersion
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_MIN_A_P_I_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMinAPIVersion() {
    return minAPIVersion;
  }


  @JsonProperty(JSON_PROPERTY_MIN_A_P_I_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinAPIVersion(String minAPIVersion) {
    this.minAPIVersion = minAPIVersion;
  }


  public SystemComponentVersion os(String os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOs() {
    return os;
  }


  @JsonProperty(JSON_PROPERTY_OS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOs(String os) {
    this.os = os;
  }


  public SystemComponentVersion platform(SystemComponentVersionPlatform platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_PLATFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public SystemComponentVersionPlatform getPlatform() {
    return platform;
  }


  @JsonProperty(JSON_PROPERTY_PLATFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlatform(SystemComponentVersionPlatform platform) {
    this.platform = platform;
  }


  public SystemComponentVersion version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  /**
   * Return true if this SystemComponentVersion object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemComponentVersion systemComponentVersion = (SystemComponentVersion) o;
    return Objects.equals(this.apiVersion, systemComponentVersion.apiVersion) &&
        Objects.equals(this.arch, systemComponentVersion.arch) &&
        Objects.equals(this.buildTime, systemComponentVersion.buildTime) &&
        Objects.equals(this.components, systemComponentVersion.components) &&
        Objects.equals(this.experimental, systemComponentVersion.experimental) &&
        Objects.equals(this.gitCommit, systemComponentVersion.gitCommit) &&
        Objects.equals(this.goVersion, systemComponentVersion.goVersion) &&
        Objects.equals(this.kernelVersion, systemComponentVersion.kernelVersion) &&
        Objects.equals(this.minAPIVersion, systemComponentVersion.minAPIVersion) &&
        Objects.equals(this.os, systemComponentVersion.os) &&
        Objects.equals(this.platform, systemComponentVersion.platform) &&
        Objects.equals(this.version, systemComponentVersion.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, arch, buildTime, components, experimental, gitCommit, goVersion, kernelVersion, minAPIVersion, os, platform, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemComponentVersion {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    arch: ").append(toIndentedString(arch)).append("\n");
    sb.append("    buildTime: ").append(toIndentedString(buildTime)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    experimental: ").append(toIndentedString(experimental)).append("\n");
    sb.append("    gitCommit: ").append(toIndentedString(gitCommit)).append("\n");
    sb.append("    goVersion: ").append(toIndentedString(goVersion)).append("\n");
    sb.append("    kernelVersion: ").append(toIndentedString(kernelVersion)).append("\n");
    sb.append("    minAPIVersion: ").append(toIndentedString(minAPIVersion)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ApiVersion` to the URL query string
    if (getApiVersion() != null) {
      joiner.add(String.format("%sApiVersion%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getApiVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Arch` to the URL query string
    if (getArch() != null) {
      joiner.add(String.format("%sArch%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getArch()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `BuildTime` to the URL query string
    if (getBuildTime() != null) {
      joiner.add(String.format("%sBuildTime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBuildTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Components` to the URL query string
    if (getComponents() != null) {
      for (int i = 0; i < getComponents().size(); i++) {
        if (getComponents().get(i) != null) {
          joiner.add(getComponents().get(i).toUrlQueryString(String.format("%sComponents%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Experimental` to the URL query string
    if (getExperimental() != null) {
      joiner.add(String.format("%sExperimental%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExperimental()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `GitCommit` to the URL query string
    if (getGitCommit() != null) {
      joiner.add(String.format("%sGitCommit%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getGitCommit()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `GoVersion` to the URL query string
    if (getGoVersion() != null) {
      joiner.add(String.format("%sGoVersion%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getGoVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `KernelVersion` to the URL query string
    if (getKernelVersion() != null) {
      joiner.add(String.format("%sKernelVersion%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getKernelVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `MinAPIVersion` to the URL query string
    if (getMinAPIVersion() != null) {
      joiner.add(String.format("%sMinAPIVersion%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMinAPIVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Os` to the URL query string
    if (getOs() != null) {
      joiner.add(String.format("%sOs%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getOs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Platform` to the URL query string
    if (getPlatform() != null) {
      joiner.add(getPlatform().toUrlQueryString(prefix + "Platform" + suffix));
    }

    // add `Version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sVersion%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

