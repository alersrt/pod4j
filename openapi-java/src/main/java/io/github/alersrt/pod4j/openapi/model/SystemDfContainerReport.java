/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * SystemDfContainerReport describes a container for use with df
 */
@JsonPropertyOrder({
  SystemDfContainerReport.JSON_PROPERTY_COMMAND,
  SystemDfContainerReport.JSON_PROPERTY_CONTAINER_I_D,
  SystemDfContainerReport.JSON_PROPERTY_CREATED,
  SystemDfContainerReport.JSON_PROPERTY_IMAGE,
  SystemDfContainerReport.JSON_PROPERTY_LOCAL_VOLUMES,
  SystemDfContainerReport.JSON_PROPERTY_NAMES,
  SystemDfContainerReport.JSON_PROPERTY_RW_SIZE,
  SystemDfContainerReport.JSON_PROPERTY_SIZE,
  SystemDfContainerReport.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class SystemDfContainerReport {
  public static final String JSON_PROPERTY_COMMAND = "Command";
  private List<String> command = new ArrayList<>();

  public static final String JSON_PROPERTY_CONTAINER_I_D = "ContainerID";
  private String containerID;

  public static final String JSON_PROPERTY_CREATED = "Created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_IMAGE = "Image";
  private String image;

  public static final String JSON_PROPERTY_LOCAL_VOLUMES = "LocalVolumes";
  private Long localVolumes;

  public static final String JSON_PROPERTY_NAMES = "Names";
  private String names;

  public static final String JSON_PROPERTY_RW_SIZE = "RWSize";
  private Long rwSize;

  public static final String JSON_PROPERTY_SIZE = "Size";
  private Long size;

  public static final String JSON_PROPERTY_STATUS = "Status";
  private String status;

  public SystemDfContainerReport() { 
  }

  public SystemDfContainerReport command(List<String> command) {
    this.command = command;
    return this;
  }

  public SystemDfContainerReport addCommandItem(String commandItem) {
    if (this.command == null) {
      this.command = new ArrayList<>();
    }
    this.command.add(commandItem);
    return this;
  }

  /**
   * Get command
   * @return command
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCommand() {
    return command;
  }


  @JsonProperty(JSON_PROPERTY_COMMAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommand(List<String> command) {
    this.command = command;
  }


  public SystemDfContainerReport containerID(String containerID) {
    this.containerID = containerID;
    return this;
  }

  /**
   * Get containerID
   * @return containerID
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONTAINER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContainerID() {
    return containerID;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainerID(String containerID) {
    this.containerID = containerID;
  }


  public SystemDfContainerReport created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public SystemDfContainerReport image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public SystemDfContainerReport localVolumes(Long localVolumes) {
    this.localVolumes = localVolumes;
    return this;
  }

  /**
   * Get localVolumes
   * @return localVolumes
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LOCAL_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getLocalVolumes() {
    return localVolumes;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocalVolumes(Long localVolumes) {
    this.localVolumes = localVolumes;
  }


  public SystemDfContainerReport names(String names) {
    this.names = names;
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNames() {
    return names;
  }


  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNames(String names) {
    this.names = names;
  }


  public SystemDfContainerReport rwSize(Long rwSize) {
    this.rwSize = rwSize;
    return this;
  }

  /**
   * Get rwSize
   * @return rwSize
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_RW_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getRwSize() {
    return rwSize;
  }


  @JsonProperty(JSON_PROPERTY_RW_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRwSize(Long rwSize) {
    this.rwSize = rwSize;
  }


  public SystemDfContainerReport size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public SystemDfContainerReport status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }


  /**
   * Return true if this SystemDfContainerReport object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemDfContainerReport systemDfContainerReport = (SystemDfContainerReport) o;
    return Objects.equals(this.command, systemDfContainerReport.command) &&
        Objects.equals(this.containerID, systemDfContainerReport.containerID) &&
        Objects.equals(this.created, systemDfContainerReport.created) &&
        Objects.equals(this.image, systemDfContainerReport.image) &&
        Objects.equals(this.localVolumes, systemDfContainerReport.localVolumes) &&
        Objects.equals(this.names, systemDfContainerReport.names) &&
        Objects.equals(this.rwSize, systemDfContainerReport.rwSize) &&
        Objects.equals(this.size, systemDfContainerReport.size) &&
        Objects.equals(this.status, systemDfContainerReport.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, containerID, created, image, localVolumes, names, rwSize, size, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemDfContainerReport {\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    containerID: ").append(toIndentedString(containerID)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    localVolumes: ").append(toIndentedString(localVolumes)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    rwSize: ").append(toIndentedString(rwSize)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Command` to the URL query string
    if (getCommand() != null) {
      for (int i = 0; i < getCommand().size(); i++) {
        joiner.add(String.format("%sCommand%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getCommand().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `ContainerID` to the URL query string
    if (getContainerID() != null) {
      joiner.add(String.format("%sContainerID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getContainerID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Image` to the URL query string
    if (getImage() != null) {
      joiner.add(String.format("%sImage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `LocalVolumes` to the URL query string
    if (getLocalVolumes() != null) {
      joiner.add(String.format("%sLocalVolumes%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLocalVolumes()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Names` to the URL query string
    if (getNames() != null) {
      joiner.add(String.format("%sNames%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNames()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `RWSize` to the URL query string
    if (getRwSize() != null) {
      joiner.add(String.format("%sRWSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRwSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Size` to the URL query string
    if (getSize() != null) {
      joiner.add(String.format("%sSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sStatus%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

