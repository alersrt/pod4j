/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * SystemDfImageReport describes an image for use with df
 */
@JsonPropertyOrder({
  SystemDfImageReport.JSON_PROPERTY_CONTAINERS,
  SystemDfImageReport.JSON_PROPERTY_CREATED,
  SystemDfImageReport.JSON_PROPERTY_IMAGE_I_D,
  SystemDfImageReport.JSON_PROPERTY_REPOSITORY,
  SystemDfImageReport.JSON_PROPERTY_SHARED_SIZE,
  SystemDfImageReport.JSON_PROPERTY_SIZE,
  SystemDfImageReport.JSON_PROPERTY_TAG,
  SystemDfImageReport.JSON_PROPERTY_UNIQUE_SIZE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class SystemDfImageReport {
  public static final String JSON_PROPERTY_CONTAINERS = "Containers";
  private Long containers;

  public static final String JSON_PROPERTY_CREATED = "Created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_IMAGE_I_D = "ImageID";
  private String imageID;

  public static final String JSON_PROPERTY_REPOSITORY = "Repository";
  private String repository;

  public static final String JSON_PROPERTY_SHARED_SIZE = "SharedSize";
  private Long sharedSize;

  public static final String JSON_PROPERTY_SIZE = "Size";
  private Long size;

  public static final String JSON_PROPERTY_TAG = "Tag";
  private String tag;

  public static final String JSON_PROPERTY_UNIQUE_SIZE = "UniqueSize";
  private Long uniqueSize;

  public SystemDfImageReport() { 
  }

  public SystemDfImageReport containers(Long containers) {
    this.containers = containers;
    return this;
  }

  /**
   * Get containers
   * @return containers
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getContainers() {
    return containers;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainers(Long containers) {
    this.containers = containers;
  }


  public SystemDfImageReport created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public SystemDfImageReport imageID(String imageID) {
    this.imageID = imageID;
    return this;
  }

  /**
   * Get imageID
   * @return imageID
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getImageID() {
    return imageID;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageID(String imageID) {
    this.imageID = imageID;
  }


  public SystemDfImageReport repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRepository() {
    return repository;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepository(String repository) {
    this.repository = repository;
  }


  public SystemDfImageReport sharedSize(Long sharedSize) {
    this.sharedSize = sharedSize;
    return this;
  }

  /**
   * Get sharedSize
   * @return sharedSize
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SHARED_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSharedSize() {
    return sharedSize;
  }


  @JsonProperty(JSON_PROPERTY_SHARED_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSharedSize(Long sharedSize) {
    this.sharedSize = sharedSize;
  }


  public SystemDfImageReport size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public SystemDfImageReport tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTag() {
    return tag;
  }


  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTag(String tag) {
    this.tag = tag;
  }


  public SystemDfImageReport uniqueSize(Long uniqueSize) {
    this.uniqueSize = uniqueSize;
    return this;
  }

  /**
   * Get uniqueSize
   * @return uniqueSize
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_UNIQUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getUniqueSize() {
    return uniqueSize;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUE_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueSize(Long uniqueSize) {
    this.uniqueSize = uniqueSize;
  }


  /**
   * Return true if this SystemDfImageReport object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemDfImageReport systemDfImageReport = (SystemDfImageReport) o;
    return Objects.equals(this.containers, systemDfImageReport.containers) &&
        Objects.equals(this.created, systemDfImageReport.created) &&
        Objects.equals(this.imageID, systemDfImageReport.imageID) &&
        Objects.equals(this.repository, systemDfImageReport.repository) &&
        Objects.equals(this.sharedSize, systemDfImageReport.sharedSize) &&
        Objects.equals(this.size, systemDfImageReport.size) &&
        Objects.equals(this.tag, systemDfImageReport.tag) &&
        Objects.equals(this.uniqueSize, systemDfImageReport.uniqueSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containers, created, imageID, repository, sharedSize, size, tag, uniqueSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemDfImageReport {\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    imageID: ").append(toIndentedString(imageID)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    sharedSize: ").append(toIndentedString(sharedSize)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    uniqueSize: ").append(toIndentedString(uniqueSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Containers` to the URL query string
    if (getContainers() != null) {
      joiner.add(String.format("%sContainers%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getContainers()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Created` to the URL query string
    if (getCreated() != null) {
      joiner.add(String.format("%sCreated%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreated()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `ImageID` to the URL query string
    if (getImageID() != null) {
      joiner.add(String.format("%sImageID%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImageID()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Repository` to the URL query string
    if (getRepository() != null) {
      joiner.add(String.format("%sRepository%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRepository()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `SharedSize` to the URL query string
    if (getSharedSize() != null) {
      joiner.add(String.format("%sSharedSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSharedSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Size` to the URL query string
    if (getSize() != null) {
      joiner.add(String.format("%sSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Tag` to the URL query string
    if (getTag() != null) {
      joiner.add(String.format("%sTag%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTag()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `UniqueSize` to the URL query string
    if (getUniqueSize() != null) {
      joiner.add(String.format("%sUniqueSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUniqueSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

