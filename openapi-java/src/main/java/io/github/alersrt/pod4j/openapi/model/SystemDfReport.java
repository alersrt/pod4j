/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.SystemDfContainerReport;
import io.github.alersrt.pod4j.openapi.model.SystemDfImageReport;
import io.github.alersrt.pod4j.openapi.model.SystemDfVolumeReport;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * SystemDfReport describes the response for df information
 */
@JsonPropertyOrder({
  SystemDfReport.JSON_PROPERTY_CONTAINERS,
  SystemDfReport.JSON_PROPERTY_IMAGES,
  SystemDfReport.JSON_PROPERTY_IMAGES_SIZE,
  SystemDfReport.JSON_PROPERTY_VOLUMES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T19:32:38.690938181+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class SystemDfReport {
  public static final String JSON_PROPERTY_CONTAINERS = "Containers";
  private List<@Valid SystemDfContainerReport> containers = new ArrayList<>();

  public static final String JSON_PROPERTY_IMAGES = "Images";
  private List<@Valid SystemDfImageReport> images = new ArrayList<>();

  public static final String JSON_PROPERTY_IMAGES_SIZE = "ImagesSize";
  private Long imagesSize;

  public static final String JSON_PROPERTY_VOLUMES = "Volumes";
  private List<@Valid SystemDfVolumeReport> volumes = new ArrayList<>();

  public SystemDfReport() { 
  }

  public SystemDfReport containers(List<@Valid SystemDfContainerReport> containers) {
    this.containers = containers;
    return this;
  }

  public SystemDfReport addContainersItem(SystemDfContainerReport containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * Get containers
   * @return containers
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid SystemDfContainerReport> getContainers() {
    return containers;
  }


  @JsonProperty(JSON_PROPERTY_CONTAINERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContainers(List<@Valid SystemDfContainerReport> containers) {
    this.containers = containers;
  }


  public SystemDfReport images(List<@Valid SystemDfImageReport> images) {
    this.images = images;
    return this;
  }

  public SystemDfReport addImagesItem(SystemDfImageReport imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid SystemDfImageReport> getImages() {
    return images;
  }


  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImages(List<@Valid SystemDfImageReport> images) {
    this.images = images;
  }


  public SystemDfReport imagesSize(Long imagesSize) {
    this.imagesSize = imagesSize;
    return this;
  }

  /**
   * Get imagesSize
   * @return imagesSize
   */
  @javax.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IMAGES_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getImagesSize() {
    return imagesSize;
  }


  @JsonProperty(JSON_PROPERTY_IMAGES_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImagesSize(Long imagesSize) {
    this.imagesSize = imagesSize;
  }


  public SystemDfReport volumes(List<@Valid SystemDfVolumeReport> volumes) {
    this.volumes = volumes;
    return this;
  }

  public SystemDfReport addVolumesItem(SystemDfVolumeReport volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * Get volumes
   * @return volumes
   */
  @javax.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid SystemDfVolumeReport> getVolumes() {
    return volumes;
  }


  @JsonProperty(JSON_PROPERTY_VOLUMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolumes(List<@Valid SystemDfVolumeReport> volumes) {
    this.volumes = volumes;
  }


  /**
   * Return true if this SystemDfReport object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemDfReport systemDfReport = (SystemDfReport) o;
    return Objects.equals(this.containers, systemDfReport.containers) &&
        Objects.equals(this.images, systemDfReport.images) &&
        Objects.equals(this.imagesSize, systemDfReport.imagesSize) &&
        Objects.equals(this.volumes, systemDfReport.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containers, images, imagesSize, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemDfReport {\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    imagesSize: ").append(toIndentedString(imagesSize)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Containers` to the URL query string
    if (getContainers() != null) {
      for (int i = 0; i < getContainers().size(); i++) {
        if (getContainers().get(i) != null) {
          joiner.add(getContainers().get(i).toUrlQueryString(String.format("%sContainers%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `Images` to the URL query string
    if (getImages() != null) {
      for (int i = 0; i < getImages().size(); i++) {
        if (getImages().get(i) != null) {
          joiner.add(getImages().get(i).toUrlQueryString(String.format("%sImages%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `ImagesSize` to the URL query string
    if (getImagesSize() != null) {
      joiner.add(String.format("%sImagesSize%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getImagesSize()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Volumes` to the URL query string
    if (getVolumes() != null) {
      for (int i = 0; i < getVolumes().size(); i++) {
        if (getVolumes().get(i) != null) {
          joiner.add(getVolumes().get(i).toUrlQueryString(String.format("%sVolumes%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

