/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


import io.github.alersrt.pod4j.openapi.ApiClient;
/**
 * VolumeCreateOptions
 */
@JsonPropertyOrder({
  VolumeCreateOptions.JSON_PROPERTY_DRIVER,
  VolumeCreateOptions.JSON_PROPERTY_IGNORE_IF_EXISTS,
  VolumeCreateOptions.JSON_PROPERTY_LABEL,
  VolumeCreateOptions.JSON_PROPERTY_LABELS,
  VolumeCreateOptions.JSON_PROPERTY_NAME,
  VolumeCreateOptions.JSON_PROPERTY_OPTIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T20:49:08.759389952+07:00[Asia/Barnaul]", comments = "Generator version: 7.7.0")
public class VolumeCreateOptions {
  public static final String JSON_PROPERTY_DRIVER = "Driver";
  private String driver;

  public static final String JSON_PROPERTY_IGNORE_IF_EXISTS = "IgnoreIfExists";
  private Boolean ignoreIfExists;

  public static final String JSON_PROPERTY_LABEL = "Label";
  private Map<String, String> label = new HashMap<>();

  public static final String JSON_PROPERTY_LABELS = "Labels";
  private Map<String, String> labels = new HashMap<>();

  public static final String JSON_PROPERTY_NAME = "Name";
  private String name;

  public static final String JSON_PROPERTY_OPTIONS = "Options";
  private Map<String, String> options = new HashMap<>();

  public VolumeCreateOptions() { 
  }

  public VolumeCreateOptions driver(String driver) {
    this.driver = driver;
    return this;
  }

  /**
   * Volume driver to use
   * @return driver
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDriver() {
    return driver;
  }


  @JsonProperty(JSON_PROPERTY_DRIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDriver(String driver) {
    this.driver = driver;
  }


  public VolumeCreateOptions ignoreIfExists(Boolean ignoreIfExists) {
    this.ignoreIfExists = ignoreIfExists;
    return this;
  }

  /**
   * Ignore existing volumes
   * @return ignoreIfExists
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_IGNORE_IF_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIgnoreIfExists() {
    return ignoreIfExists;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_IF_EXISTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreIfExists(Boolean ignoreIfExists) {
    this.ignoreIfExists = ignoreIfExists;
  }


  public VolumeCreateOptions label(Map<String, String> label) {
    this.label = label;
    return this;
  }

  public VolumeCreateOptions putLabelItem(String key, String labelItem) {
    if (this.label == null) {
      this.label = new HashMap<>();
    }
    this.label.put(key, labelItem);
    return this;
  }

  /**
   * User-defined key/value metadata. Provided for compatibility
   * @return label
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabel(Map<String, String> label) {
    this.label = label;
  }


  public VolumeCreateOptions labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public VolumeCreateOptions putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User-defined key/value metadata. Preferred field, will override Label
   * @return labels
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getLabels() {
    return labels;
  }


  @JsonProperty(JSON_PROPERTY_LABELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public VolumeCreateOptions name(String name) {
    this.name = name;
    return this;
  }

  /**
   * New volume&#39;s name. Can be left blank
   * @return name
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public VolumeCreateOptions options(Map<String, String> options) {
    this.options = options;
    return this;
  }

  public VolumeCreateOptions putOptionsItem(String key, String optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

  /**
   * Mapping of driver options and values.
   * @return options
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(Map<String, String> options) {
    this.options = options;
  }


  /**
   * Return true if this VolumeCreateOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeCreateOptions volumeCreateOptions = (VolumeCreateOptions) o;
    return Objects.equals(this.driver, volumeCreateOptions.driver) &&
        Objects.equals(this.ignoreIfExists, volumeCreateOptions.ignoreIfExists) &&
        Objects.equals(this.label, volumeCreateOptions.label) &&
        Objects.equals(this.labels, volumeCreateOptions.labels) &&
        Objects.equals(this.name, volumeCreateOptions.name) &&
        Objects.equals(this.options, volumeCreateOptions.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(driver, ignoreIfExists, label, labels, name, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeCreateOptions {\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("    ignoreIfExists: ").append(toIndentedString(ignoreIfExists)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `Driver` to the URL query string
    if (getDriver() != null) {
      joiner.add(String.format("%sDriver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDriver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `IgnoreIfExists` to the URL query string
    if (getIgnoreIfExists() != null) {
      joiner.add(String.format("%sIgnoreIfExists%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getIgnoreIfExists()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Label` to the URL query string
    if (getLabel() != null) {
      for (String _key : getLabel().keySet()) {
        joiner.add(String.format("%sLabel%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabel().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabel().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Labels` to the URL query string
    if (getLabels() != null) {
      for (String _key : getLabels().keySet()) {
        joiner.add(String.format("%sLabels%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getLabels().get(_key), URLEncoder.encode(ApiClient.valueToString(getLabels().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `Name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sName%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `Options` to the URL query string
    if (getOptions() != null) {
      for (String _key : getOptions().keySet()) {
        joiner.add(String.format("%sOptions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getOptions().get(_key), URLEncoder.encode(ApiClient.valueToString(getOptions().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

