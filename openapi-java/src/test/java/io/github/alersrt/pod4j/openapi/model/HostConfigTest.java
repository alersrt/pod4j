/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.DeviceMapping;
import io.github.alersrt.pod4j.openapi.model.DeviceRequest;
import io.github.alersrt.pod4j.openapi.model.LogConfig;
import io.github.alersrt.pod4j.openapi.model.Mount;
import io.github.alersrt.pod4j.openapi.model.PortBinding;
import io.github.alersrt.pod4j.openapi.model.RestartPolicy;
import io.github.alersrt.pod4j.openapi.model.ThrottleDevice;
import io.github.alersrt.pod4j.openapi.model.Ulimit;
import io.github.alersrt.pod4j.openapi.model.WeightDevice;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for HostConfig
 */
class HostConfigTest {
    private final HostConfig model = new HostConfig();

    /**
     * Model tests for HostConfig
     */
    @Test
    void testHostConfig() {
        // TODO: test HostConfig
    }

    /**
     * Test the property 'annotations'
     */
    @Test
    void annotationsTest() {
        // TODO: test annotations
    }

    /**
     * Test the property 'autoRemove'
     */
    @Test
    void autoRemoveTest() {
        // TODO: test autoRemove
    }

    /**
     * Test the property 'binds'
     */
    @Test
    void bindsTest() {
        // TODO: test binds
    }

    /**
     * Test the property 'blkioDeviceReadBps'
     */
    @Test
    void blkioDeviceReadBpsTest() {
        // TODO: test blkioDeviceReadBps
    }

    /**
     * Test the property 'blkioDeviceReadIOps'
     */
    @Test
    void blkioDeviceReadIOpsTest() {
        // TODO: test blkioDeviceReadIOps
    }

    /**
     * Test the property 'blkioDeviceWriteBps'
     */
    @Test
    void blkioDeviceWriteBpsTest() {
        // TODO: test blkioDeviceWriteBps
    }

    /**
     * Test the property 'blkioDeviceWriteIOps'
     */
    @Test
    void blkioDeviceWriteIOpsTest() {
        // TODO: test blkioDeviceWriteIOps
    }

    /**
     * Test the property 'blkioWeight'
     */
    @Test
    void blkioWeightTest() {
        // TODO: test blkioWeight
    }

    /**
     * Test the property 'blkioWeightDevice'
     */
    @Test
    void blkioWeightDeviceTest() {
        // TODO: test blkioWeightDevice
    }

    /**
     * Test the property 'capAdd'
     */
    @Test
    void capAddTest() {
        // TODO: test capAdd
    }

    /**
     * Test the property 'capDrop'
     */
    @Test
    void capDropTest() {
        // TODO: test capDrop
    }

    /**
     * Test the property 'cgroup'
     */
    @Test
    void cgroupTest() {
        // TODO: test cgroup
    }

    /**
     * Test the property 'cgroupParent'
     */
    @Test
    void cgroupParentTest() {
        // TODO: test cgroupParent
    }

    /**
     * Test the property 'cgroupnsMode'
     */
    @Test
    void cgroupnsModeTest() {
        // TODO: test cgroupnsMode
    }

    /**
     * Test the property 'consoleSize'
     */
    @Test
    void consoleSizeTest() {
        // TODO: test consoleSize
    }

    /**
     * Test the property 'containerIDFile'
     */
    @Test
    void containerIDFileTest() {
        // TODO: test containerIDFile
    }

    /**
     * Test the property 'cpuCount'
     */
    @Test
    void cpuCountTest() {
        // TODO: test cpuCount
    }

    /**
     * Test the property 'cpuPercent'
     */
    @Test
    void cpuPercentTest() {
        // TODO: test cpuPercent
    }

    /**
     * Test the property 'cpuPeriod'
     */
    @Test
    void cpuPeriodTest() {
        // TODO: test cpuPeriod
    }

    /**
     * Test the property 'cpuQuota'
     */
    @Test
    void cpuQuotaTest() {
        // TODO: test cpuQuota
    }

    /**
     * Test the property 'cpuRealtimePeriod'
     */
    @Test
    void cpuRealtimePeriodTest() {
        // TODO: test cpuRealtimePeriod
    }

    /**
     * Test the property 'cpuRealtimeRuntime'
     */
    @Test
    void cpuRealtimeRuntimeTest() {
        // TODO: test cpuRealtimeRuntime
    }

    /**
     * Test the property 'cpuShares'
     */
    @Test
    void cpuSharesTest() {
        // TODO: test cpuShares
    }

    /**
     * Test the property 'cpusetCpus'
     */
    @Test
    void cpusetCpusTest() {
        // TODO: test cpusetCpus
    }

    /**
     * Test the property 'cpusetMems'
     */
    @Test
    void cpusetMemsTest() {
        // TODO: test cpusetMems
    }

    /**
     * Test the property 'deviceCgroupRules'
     */
    @Test
    void deviceCgroupRulesTest() {
        // TODO: test deviceCgroupRules
    }

    /**
     * Test the property 'deviceRequests'
     */
    @Test
    void deviceRequestsTest() {
        // TODO: test deviceRequests
    }

    /**
     * Test the property 'devices'
     */
    @Test
    void devicesTest() {
        // TODO: test devices
    }

    /**
     * Test the property 'dns'
     */
    @Test
    void dnsTest() {
        // TODO: test dns
    }

    /**
     * Test the property 'dnsOptions'
     */
    @Test
    void dnsOptionsTest() {
        // TODO: test dnsOptions
    }

    /**
     * Test the property 'dnsSearch'
     */
    @Test
    void dnsSearchTest() {
        // TODO: test dnsSearch
    }

    /**
     * Test the property 'extraHosts'
     */
    @Test
    void extraHostsTest() {
        // TODO: test extraHosts
    }

    /**
     * Test the property 'groupAdd'
     */
    @Test
    void groupAddTest() {
        // TODO: test groupAdd
    }

    /**
     * Test the property 'ioMaximumBandwidth'
     */
    @Test
    void ioMaximumBandwidthTest() {
        // TODO: test ioMaximumBandwidth
    }

    /**
     * Test the property 'ioMaximumIOps'
     */
    @Test
    void ioMaximumIOpsTest() {
        // TODO: test ioMaximumIOps
    }

    /**
     * Test the property 'init'
     */
    @Test
    void initTest() {
        // TODO: test init
    }

    /**
     * Test the property 'ipcMode'
     */
    @Test
    void ipcModeTest() {
        // TODO: test ipcMode
    }

    /**
     * Test the property 'isolation'
     */
    @Test
    void isolationTest() {
        // TODO: test isolation
    }

    /**
     * Test the property 'kernelMemory'
     */
    @Test
    void kernelMemoryTest() {
        // TODO: test kernelMemory
    }

    /**
     * Test the property 'kernelMemoryTCP'
     */
    @Test
    void kernelMemoryTCPTest() {
        // TODO: test kernelMemoryTCP
    }

    /**
     * Test the property 'links'
     */
    @Test
    void linksTest() {
        // TODO: test links
    }

    /**
     * Test the property 'logConfig'
     */
    @Test
    void logConfigTest() {
        // TODO: test logConfig
    }

    /**
     * Test the property 'maskedPaths'
     */
    @Test
    void maskedPathsTest() {
        // TODO: test maskedPaths
    }

    /**
     * Test the property 'memory'
     */
    @Test
    void memoryTest() {
        // TODO: test memory
    }

    /**
     * Test the property 'memoryReservation'
     */
    @Test
    void memoryReservationTest() {
        // TODO: test memoryReservation
    }

    /**
     * Test the property 'memorySwap'
     */
    @Test
    void memorySwapTest() {
        // TODO: test memorySwap
    }

    /**
     * Test the property 'memorySwappiness'
     */
    @Test
    void memorySwappinessTest() {
        // TODO: test memorySwappiness
    }

    /**
     * Test the property 'mounts'
     */
    @Test
    void mountsTest() {
        // TODO: test mounts
    }

    /**
     * Test the property 'nanoCpus'
     */
    @Test
    void nanoCpusTest() {
        // TODO: test nanoCpus
    }

    /**
     * Test the property 'networkMode'
     */
    @Test
    void networkModeTest() {
        // TODO: test networkMode
    }

    /**
     * Test the property 'oomKillDisable'
     */
    @Test
    void oomKillDisableTest() {
        // TODO: test oomKillDisable
    }

    /**
     * Test the property 'oomScoreAdj'
     */
    @Test
    void oomScoreAdjTest() {
        // TODO: test oomScoreAdj
    }

    /**
     * Test the property 'pidMode'
     */
    @Test
    void pidModeTest() {
        // TODO: test pidMode
    }

    /**
     * Test the property 'pidsLimit'
     */
    @Test
    void pidsLimitTest() {
        // TODO: test pidsLimit
    }

    /**
     * Test the property 'portBindings'
     */
    @Test
    void portBindingsTest() {
        // TODO: test portBindings
    }

    /**
     * Test the property 'privileged'
     */
    @Test
    void privilegedTest() {
        // TODO: test privileged
    }

    /**
     * Test the property 'publishAllPorts'
     */
    @Test
    void publishAllPortsTest() {
        // TODO: test publishAllPorts
    }

    /**
     * Test the property 'readonlyPaths'
     */
    @Test
    void readonlyPathsTest() {
        // TODO: test readonlyPaths
    }

    /**
     * Test the property 'readonlyRootfs'
     */
    @Test
    void readonlyRootfsTest() {
        // TODO: test readonlyRootfs
    }

    /**
     * Test the property 'restartPolicy'
     */
    @Test
    void restartPolicyTest() {
        // TODO: test restartPolicy
    }

    /**
     * Test the property 'runtime'
     */
    @Test
    void runtimeTest() {
        // TODO: test runtime
    }

    /**
     * Test the property 'securityOpt'
     */
    @Test
    void securityOptTest() {
        // TODO: test securityOpt
    }

    /**
     * Test the property 'shmSize'
     */
    @Test
    void shmSizeTest() {
        // TODO: test shmSize
    }

    /**
     * Test the property 'storageOpt'
     */
    @Test
    void storageOptTest() {
        // TODO: test storageOpt
    }

    /**
     * Test the property 'sysctls'
     */
    @Test
    void sysctlsTest() {
        // TODO: test sysctls
    }

    /**
     * Test the property 'tmpfs'
     */
    @Test
    void tmpfsTest() {
        // TODO: test tmpfs
    }

    /**
     * Test the property 'utSMode'
     */
    @Test
    void utSModeTest() {
        // TODO: test utSMode
    }

    /**
     * Test the property 'ulimits'
     */
    @Test
    void ulimitsTest() {
        // TODO: test ulimits
    }

    /**
     * Test the property 'usernsMode'
     */
    @Test
    void usernsModeTest() {
        // TODO: test usernsMode
    }

    /**
     * Test the property 'volumeDriver'
     */
    @Test
    void volumeDriverTest() {
        // TODO: test volumeDriver
    }

    /**
     * Test the property 'volumesFrom'
     */
    @Test
    void volumesFromTest() {
        // TODO: test volumesFrom
    }

}
