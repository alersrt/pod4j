/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.CPUUsage;
import io.github.alersrt.pod4j.openapi.model.ConmonInfo;
import io.github.alersrt.pod4j.openapi.model.DistributionInfo;
import io.github.alersrt.pod4j.openapi.model.IDMappings;
import io.github.alersrt.pod4j.openapi.model.NetworkInfo;
import io.github.alersrt.pod4j.openapi.model.OCIRuntimeInfo;
import io.github.alersrt.pod4j.openapi.model.PastaInfo;
import io.github.alersrt.pod4j.openapi.model.RemoteSocket;
import io.github.alersrt.pod4j.openapi.model.SecurityInfo;
import io.github.alersrt.pod4j.openapi.model.SlirpInfo;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for HostInfo
 */
class HostInfoTest {
    private final HostInfo model = new HostInfo();

    /**
     * Model tests for HostInfo
     */
    @Test
    void testHostInfo() {
        // TODO: test HostInfo
    }

    /**
     * Test the property 'arch'
     */
    @Test
    void archTest() {
        // TODO: test arch
    }

    /**
     * Test the property 'buildahVersion'
     */
    @Test
    void buildahVersionTest() {
        // TODO: test buildahVersion
    }

    /**
     * Test the property 'cgroupControllers'
     */
    @Test
    void cgroupControllersTest() {
        // TODO: test cgroupControllers
    }

    /**
     * Test the property 'cgroupManager'
     */
    @Test
    void cgroupManagerTest() {
        // TODO: test cgroupManager
    }

    /**
     * Test the property 'cgroupVersion'
     */
    @Test
    void cgroupVersionTest() {
        // TODO: test cgroupVersion
    }

    /**
     * Test the property 'conmon'
     */
    @Test
    void conmonTest() {
        // TODO: test conmon
    }

    /**
     * Test the property 'cpuUtilization'
     */
    @Test
    void cpuUtilizationTest() {
        // TODO: test cpuUtilization
    }

    /**
     * Test the property 'cpus'
     */
    @Test
    void cpusTest() {
        // TODO: test cpus
    }

    /**
     * Test the property 'databaseBackend'
     */
    @Test
    void databaseBackendTest() {
        // TODO: test databaseBackend
    }

    /**
     * Test the property 'distribution'
     */
    @Test
    void distributionTest() {
        // TODO: test distribution
    }

    /**
     * Test the property 'eventLogger'
     */
    @Test
    void eventLoggerTest() {
        // TODO: test eventLogger
    }

    /**
     * Test the property 'freeLocks'
     */
    @Test
    void freeLocksTest() {
        // TODO: test freeLocks
    }

    /**
     * Test the property 'hostname'
     */
    @Test
    void hostnameTest() {
        // TODO: test hostname
    }

    /**
     * Test the property 'idMappings'
     */
    @Test
    void idMappingsTest() {
        // TODO: test idMappings
    }

    /**
     * Test the property 'kernel'
     */
    @Test
    void kernelTest() {
        // TODO: test kernel
    }

    /**
     * Test the property 'linkmode'
     */
    @Test
    void linkmodeTest() {
        // TODO: test linkmode
    }

    /**
     * Test the property 'logDriver'
     */
    @Test
    void logDriverTest() {
        // TODO: test logDriver
    }

    /**
     * Test the property 'memFree'
     */
    @Test
    void memFreeTest() {
        // TODO: test memFree
    }

    /**
     * Test the property 'memTotal'
     */
    @Test
    void memTotalTest() {
        // TODO: test memTotal
    }

    /**
     * Test the property 'networkBackend'
     */
    @Test
    void networkBackendTest() {
        // TODO: test networkBackend
    }

    /**
     * Test the property 'networkBackendInfo'
     */
    @Test
    void networkBackendInfoTest() {
        // TODO: test networkBackendInfo
    }

    /**
     * Test the property 'ociRuntime'
     */
    @Test
    void ociRuntimeTest() {
        // TODO: test ociRuntime
    }

    /**
     * Test the property 'os'
     */
    @Test
    void osTest() {
        // TODO: test os
    }

    /**
     * Test the property 'pasta'
     */
    @Test
    void pastaTest() {
        // TODO: test pasta
    }

    /**
     * Test the property 'remoteSocket'
     */
    @Test
    void remoteSocketTest() {
        // TODO: test remoteSocket
    }

    /**
     * Test the property 'rootlessNetworkCmd'
     */
    @Test
    void rootlessNetworkCmdTest() {
        // TODO: test rootlessNetworkCmd
    }

    /**
     * Test the property 'runtimeInfo'
     */
    @Test
    void runtimeInfoTest() {
        // TODO: test runtimeInfo
    }

    /**
     * Test the property 'security'
     */
    @Test
    void securityTest() {
        // TODO: test security
    }

    /**
     * Test the property 'serviceIsRemote'
     */
    @Test
    void serviceIsRemoteTest() {
        // TODO: test serviceIsRemote
    }

    /**
     * Test the property 'slirp4netns'
     */
    @Test
    void slirp4netnsTest() {
        // TODO: test slirp4netns
    }

    /**
     * Test the property 'swapFree'
     */
    @Test
    void swapFreeTest() {
        // TODO: test swapFree
    }

    /**
     * Test the property 'swapTotal'
     */
    @Test
    void swapTotalTest() {
        // TODO: test swapTotal
    }

    /**
     * Test the property 'uptime'
     */
    @Test
    void uptimeTest() {
        // TODO: test uptime
    }

    /**
     * Test the property 'variant'
     */
    @Test
    void variantTest() {
        // TODO: test variant
    }

}
