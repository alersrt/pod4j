/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.DriverData;
import io.github.alersrt.pod4j.openapi.model.History;
import io.github.alersrt.pod4j.openapi.model.ImageConfig;
import io.github.alersrt.pod4j.openapi.model.RootFS;
import io.github.alersrt.pod4j.openapi.model.Schema2HealthConfig;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ImageData
 */
class ImageDataTest {
    private final ImageData model = new ImageData();

    /**
     * Model tests for ImageData
     */
    @Test
    void testImageData() {
        // TODO: test ImageData
    }

    /**
     * Test the property 'annotations'
     */
    @Test
    void annotationsTest() {
        // TODO: test annotations
    }

    /**
     * Test the property 'architecture'
     */
    @Test
    void architectureTest() {
        // TODO: test architecture
    }

    /**
     * Test the property 'author'
     */
    @Test
    void authorTest() {
        // TODO: test author
    }

    /**
     * Test the property 'comment'
     */
    @Test
    void commentTest() {
        // TODO: test comment
    }

    /**
     * Test the property 'config'
     */
    @Test
    void configTest() {
        // TODO: test config
    }

    /**
     * Test the property 'created'
     */
    @Test
    void createdTest() {
        // TODO: test created
    }

    /**
     * Test the property 'digest'
     */
    @Test
    void digestTest() {
        // TODO: test digest
    }

    /**
     * Test the property 'graphDriver'
     */
    @Test
    void graphDriverTest() {
        // TODO: test graphDriver
    }

    /**
     * Test the property 'healthcheck'
     */
    @Test
    void healthcheckTest() {
        // TODO: test healthcheck
    }

    /**
     * Test the property 'history'
     */
    @Test
    void historyTest() {
        // TODO: test history
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'labels'
     */
    @Test
    void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'manifestType'
     */
    @Test
    void manifestTypeTest() {
        // TODO: test manifestType
    }

    /**
     * Test the property 'namesHistory'
     */
    @Test
    void namesHistoryTest() {
        // TODO: test namesHistory
    }

    /**
     * Test the property 'os'
     */
    @Test
    void osTest() {
        // TODO: test os
    }

    /**
     * Test the property 'parent'
     */
    @Test
    void parentTest() {
        // TODO: test parent
    }

    /**
     * Test the property 'repoDigests'
     */
    @Test
    void repoDigestsTest() {
        // TODO: test repoDigests
    }

    /**
     * Test the property 'repoTags'
     */
    @Test
    void repoTagsTest() {
        // TODO: test repoTags
    }

    /**
     * Test the property 'rootFS'
     */
    @Test
    void rootFSTest() {
        // TODO: test rootFS
    }

    /**
     * Test the property 'size'
     */
    @Test
    void sizeTest() {
        // TODO: test size
    }

    /**
     * Test the property 'user'
     */
    @Test
    void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'version'
     */
    @Test
    void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'virtualSize'
     */
    @Test
    void virtualSizeTest() {
        // TODO: test virtualSize
    }

}
