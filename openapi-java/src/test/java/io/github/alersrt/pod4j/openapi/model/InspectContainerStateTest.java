/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.HealthCheckResults;
import java.time.OffsetDateTime;
import java.util.Arrays;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for InspectContainerState
 */
class InspectContainerStateTest {
    private final InspectContainerState model = new InspectContainerState();

    /**
     * Model tests for InspectContainerState
     */
    @Test
    void testInspectContainerState() {
        // TODO: test InspectContainerState
    }

    /**
     * Test the property 'cgroupPath'
     */
    @Test
    void cgroupPathTest() {
        // TODO: test cgroupPath
    }

    /**
     * Test the property 'checkpointLog'
     */
    @Test
    void checkpointLogTest() {
        // TODO: test checkpointLog
    }

    /**
     * Test the property 'checkpointPath'
     */
    @Test
    void checkpointPathTest() {
        // TODO: test checkpointPath
    }

    /**
     * Test the property 'checkpointed'
     */
    @Test
    void checkpointedTest() {
        // TODO: test checkpointed
    }

    /**
     * Test the property 'checkpointedAt'
     */
    @Test
    void checkpointedAtTest() {
        // TODO: test checkpointedAt
    }

    /**
     * Test the property 'conmonPid'
     */
    @Test
    void conmonPidTest() {
        // TODO: test conmonPid
    }

    /**
     * Test the property 'dead'
     */
    @Test
    void deadTest() {
        // TODO: test dead
    }

    /**
     * Test the property 'error'
     */
    @Test
    void errorTest() {
        // TODO: test error
    }

    /**
     * Test the property 'exitCode'
     */
    @Test
    void exitCodeTest() {
        // TODO: test exitCode
    }

    /**
     * Test the property 'finishedAt'
     */
    @Test
    void finishedAtTest() {
        // TODO: test finishedAt
    }

    /**
     * Test the property 'health'
     */
    @Test
    void healthTest() {
        // TODO: test health
    }

    /**
     * Test the property 'ooMKilled'
     */
    @Test
    void ooMKilledTest() {
        // TODO: test ooMKilled
    }

    /**
     * Test the property 'ociVersion'
     */
    @Test
    void ociVersionTest() {
        // TODO: test ociVersion
    }

    /**
     * Test the property 'paused'
     */
    @Test
    void pausedTest() {
        // TODO: test paused
    }

    /**
     * Test the property 'pid'
     */
    @Test
    void pidTest() {
        // TODO: test pid
    }

    /**
     * Test the property 'restarting'
     */
    @Test
    void restartingTest() {
        // TODO: test restarting
    }

    /**
     * Test the property 'restoreLog'
     */
    @Test
    void restoreLogTest() {
        // TODO: test restoreLog
    }

    /**
     * Test the property 'restored'
     */
    @Test
    void restoredTest() {
        // TODO: test restored
    }

    /**
     * Test the property 'restoredAt'
     */
    @Test
    void restoredAtTest() {
        // TODO: test restoredAt
    }

    /**
     * Test the property 'running'
     */
    @Test
    void runningTest() {
        // TODO: test running
    }

    /**
     * Test the property 'startedAt'
     */
    @Test
    void startedAtTest() {
        // TODO: test startedAt
    }

    /**
     * Test the property 'status'
     */
    @Test
    void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'stoppedByUser'
     */
    @Test
    void stoppedByUserTest() {
        // TODO: test stoppedByUser
    }

}
