/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ConfigReference;
import io.github.alersrt.pod4j.openapi.model.EndpointResource;
import io.github.alersrt.pod4j.openapi.model.IPAM;
import io.github.alersrt.pod4j.openapi.model.PeerInfo;
import io.github.alersrt.pod4j.openapi.model.ServiceInfo;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Inspect
 */
class InspectTest {
    private final Inspect model = new Inspect();

    /**
     * Model tests for Inspect
     */
    @Test
    void testInspect() {
        // TODO: test Inspect
    }

    /**
     * Test the property 'attachable'
     */
    @Test
    void attachableTest() {
        // TODO: test attachable
    }

    /**
     * Test the property 'configFrom'
     */
    @Test
    void configFromTest() {
        // TODO: test configFrom
    }

    /**
     * Test the property 'configOnly'
     */
    @Test
    void configOnlyTest() {
        // TODO: test configOnly
    }

    /**
     * Test the property 'containers'
     */
    @Test
    void containersTest() {
        // TODO: test containers
    }

    /**
     * Test the property 'created'
     */
    @Test
    void createdTest() {
        // TODO: test created
    }

    /**
     * Test the property 'driver'
     */
    @Test
    void driverTest() {
        // TODO: test driver
    }

    /**
     * Test the property 'enableIPv6'
     */
    @Test
    void enableIPv6Test() {
        // TODO: test enableIPv6
    }

    /**
     * Test the property 'ipam'
     */
    @Test
    void ipamTest() {
        // TODO: test ipam
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'ingress'
     */
    @Test
    void ingressTest() {
        // TODO: test ingress
    }

    /**
     * Test the property 'internal'
     */
    @Test
    void internalTest() {
        // TODO: test internal
    }

    /**
     * Test the property 'labels'
     */
    @Test
    void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'name'
     */
    @Test
    void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'options'
     */
    @Test
    void optionsTest() {
        // TODO: test options
    }

    /**
     * Test the property 'peers'
     */
    @Test
    void peersTest() {
        // TODO: test peers
    }

    /**
     * Test the property 'scope'
     */
    @Test
    void scopeTest() {
        // TODO: test scope
    }

    /**
     * Test the property 'services'
     */
    @Test
    void servicesTest() {
        // TODO: test services
    }

}
