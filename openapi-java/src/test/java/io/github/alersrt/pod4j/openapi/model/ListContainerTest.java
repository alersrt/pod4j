/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.ContainerSize;
import io.github.alersrt.pod4j.openapi.model.ListContainerNamespaces;
import io.github.alersrt.pod4j.openapi.model.PortMapping;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ListContainer
 */
class ListContainerTest {
    private final ListContainer model = new ListContainer();

    /**
     * Model tests for ListContainer
     */
    @Test
    void testListContainer() {
        // TODO: test ListContainer
    }

    /**
     * Test the property 'autoRemove'
     */
    @Test
    void autoRemoveTest() {
        // TODO: test autoRemove
    }

    /**
     * Test the property 'ciDFile'
     */
    @Test
    void ciDFileTest() {
        // TODO: test ciDFile
    }

    /**
     * Test the property 'command'
     */
    @Test
    void commandTest() {
        // TODO: test command
    }

    /**
     * Test the property 'created'
     */
    @Test
    void createdTest() {
        // TODO: test created
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'exitCode'
     */
    @Test
    void exitCodeTest() {
        // TODO: test exitCode
    }

    /**
     * Test the property 'exited'
     */
    @Test
    void exitedTest() {
        // TODO: test exited
    }

    /**
     * Test the property 'exitedAt'
     */
    @Test
    void exitedAtTest() {
        // TODO: test exitedAt
    }

    /**
     * Test the property 'exposedPorts'
     */
    @Test
    void exposedPortsTest() {
        // TODO: test exposedPorts
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'image'
     */
    @Test
    void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'imageID'
     */
    @Test
    void imageIDTest() {
        // TODO: test imageID
    }

    /**
     * Test the property 'isInfra'
     */
    @Test
    void isInfraTest() {
        // TODO: test isInfra
    }

    /**
     * Test the property 'labels'
     */
    @Test
    void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'mounts'
     */
    @Test
    void mountsTest() {
        // TODO: test mounts
    }

    /**
     * Test the property 'names'
     */
    @Test
    void namesTest() {
        // TODO: test names
    }

    /**
     * Test the property 'namespaces'
     */
    @Test
    void namespacesTest() {
        // TODO: test namespaces
    }

    /**
     * Test the property 'networks'
     */
    @Test
    void networksTest() {
        // TODO: test networks
    }

    /**
     * Test the property 'pid'
     */
    @Test
    void pidTest() {
        // TODO: test pid
    }

    /**
     * Test the property 'pod'
     */
    @Test
    void podTest() {
        // TODO: test pod
    }

    /**
     * Test the property 'podName'
     */
    @Test
    void podNameTest() {
        // TODO: test podName
    }

    /**
     * Test the property 'ports'
     */
    @Test
    void portsTest() {
        // TODO: test ports
    }

    /**
     * Test the property 'restarts'
     */
    @Test
    void restartsTest() {
        // TODO: test restarts
    }

    /**
     * Test the property 'size'
     */
    @Test
    void sizeTest() {
        // TODO: test size
    }

    /**
     * Test the property 'startedAt'
     */
    @Test
    void startedAtTest() {
        // TODO: test startedAt
    }

    /**
     * Test the property 'state'
     */
    @Test
    void stateTest() {
        // TODO: test state
    }

    /**
     * Test the property 'status'
     */
    @Test
    void statusTest() {
        // TODO: test status
    }

}
