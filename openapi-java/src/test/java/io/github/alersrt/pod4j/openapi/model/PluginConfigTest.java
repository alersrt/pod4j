/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.PluginConfigArgs;
import io.github.alersrt.pod4j.openapi.model.PluginConfigInterface;
import io.github.alersrt.pod4j.openapi.model.PluginConfigLinux;
import io.github.alersrt.pod4j.openapi.model.PluginConfigNetwork;
import io.github.alersrt.pod4j.openapi.model.PluginConfigRootfs;
import io.github.alersrt.pod4j.openapi.model.PluginConfigUser;
import io.github.alersrt.pod4j.openapi.model.PluginEnv;
import io.github.alersrt.pod4j.openapi.model.PluginMount;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PluginConfig
 */
class PluginConfigTest {
    private final PluginConfig model = new PluginConfig();

    /**
     * Model tests for PluginConfig
     */
    @Test
    void testPluginConfig() {
        // TODO: test PluginConfig
    }

    /**
     * Test the property 'args'
     */
    @Test
    void argsTest() {
        // TODO: test args
    }

    /**
     * Test the property 'description'
     */
    @Test
    void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'dockerVersion'
     */
    @Test
    void dockerVersionTest() {
        // TODO: test dockerVersion
    }

    /**
     * Test the property 'documentation'
     */
    @Test
    void documentationTest() {
        // TODO: test documentation
    }

    /**
     * Test the property 'entrypoint'
     */
    @Test
    void entrypointTest() {
        // TODO: test entrypoint
    }

    /**
     * Test the property 'env'
     */
    @Test
    void envTest() {
        // TODO: test env
    }

    /**
     * Test the property '_interface'
     */
    @Test
    void _interfaceTest() {
        // TODO: test _interface
    }

    /**
     * Test the property 'ipcHost'
     */
    @Test
    void ipcHostTest() {
        // TODO: test ipcHost
    }

    /**
     * Test the property 'linux'
     */
    @Test
    void linuxTest() {
        // TODO: test linux
    }

    /**
     * Test the property 'mounts'
     */
    @Test
    void mountsTest() {
        // TODO: test mounts
    }

    /**
     * Test the property 'network'
     */
    @Test
    void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'pidHost'
     */
    @Test
    void pidHostTest() {
        // TODO: test pidHost
    }

    /**
     * Test the property 'propagatedMount'
     */
    @Test
    void propagatedMountTest() {
        // TODO: test propagatedMount
    }

    /**
     * Test the property 'user'
     */
    @Test
    void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'workDir'
     */
    @Test
    void workDirTest() {
        // TODO: test workDir
    }

    /**
     * Test the property 'rootfs'
     */
    @Test
    void rootfsTest() {
        // TODO: test rootfs
    }

}
