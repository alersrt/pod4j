/*
 * supports a RESTful API for the Libpod library
 * This documentation describes the Podman v2.x+ RESTful API. It consists of a Docker-compatible API and a Libpod API providing support for Podmanâ€™s unique features such as pods.  To start the service and keep it running for 5,000 seconds (-t 0 runs forever):  podman system service -t 5000 &  You can then use cURL on the socket using requests documented below.  NOTE: if you install the package podman-docker, it will create a symbolic link for /run/docker.sock to /run/podman/podman.sock  NOTE: Some fields in the API response JSON are encoded as omitempty, which means that if said field has a zero value, they will not be encoded in the API response. This is a feature to help reduce the size of the JSON responses returned via the API.  NOTE: Due to the limitations of [go-swagger](https://github.com/go-swagger/go-swagger), some field values that have a complex type show up as null in the docs as well as in the API responses. This is because the zero value for the field type is null. The field description in the docs will state what type the field is expected to be for such cases.  See podman-system-service(1) for more information.  Quick Examples:  'podman info'  curl --unix-socket /run/podman/podman.sock http://d/v5.0.0/libpod/info  'podman pull quay.io/containers/podman'  curl -XPOST --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/images/create?fromImage=quay.io%2Fcontainers%2Fpodman'  'podman list images'  curl --unix-socket /run/podman/podman.sock -v 'http://d/v5.0.0/libpod/images/json' | jq
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: podman@lists.podman.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.alersrt.pod4j.openapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.alersrt.pod4j.openapi.model.IDMappingOptions;
import io.github.alersrt.pod4j.openapi.model.ImageVolume;
import io.github.alersrt.pod4j.openapi.model.LinuxDevice;
import io.github.alersrt.pod4j.openapi.model.LinuxDeviceCgroup;
import io.github.alersrt.pod4j.openapi.model.LinuxIntelRdt;
import io.github.alersrt.pod4j.openapi.model.LinuxPersonality;
import io.github.alersrt.pod4j.openapi.model.LinuxResources;
import io.github.alersrt.pod4j.openapi.model.LinuxThrottleDevice;
import io.github.alersrt.pod4j.openapi.model.LinuxWeightDevice;
import io.github.alersrt.pod4j.openapi.model.LogConfigLibpod;
import io.github.alersrt.pod4j.openapi.model.Mount;
import io.github.alersrt.pod4j.openapi.model.NamedVolume;
import io.github.alersrt.pod4j.openapi.model.Namespace;
import io.github.alersrt.pod4j.openapi.model.OverlayVolume;
import io.github.alersrt.pod4j.openapi.model.POSIXRlimit;
import io.github.alersrt.pod4j.openapi.model.PerNetworkOptions;
import io.github.alersrt.pod4j.openapi.model.PortMapping;
import io.github.alersrt.pod4j.openapi.model.Schema2HealthConfig;
import io.github.alersrt.pod4j.openapi.model.Secret;
import io.github.alersrt.pod4j.openapi.model.StartupHealthCheck;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for SpecGenerator
 */
class SpecGeneratorTest {
    private final SpecGenerator model = new SpecGenerator();

    /**
     * Model tests for SpecGenerator
     */
    @Test
    void testSpecGenerator() {
        // TODO: test SpecGenerator
    }

    /**
     * Test the property 'networks'
     */
    @Test
    void networksTest() {
        // TODO: test networks
    }

    /**
     * Test the property 'annotations'
     */
    @Test
    void annotationsTest() {
        // TODO: test annotations
    }

    /**
     * Test the property 'apparmorProfile'
     */
    @Test
    void apparmorProfileTest() {
        // TODO: test apparmorProfile
    }

    /**
     * Test the property 'baseHostsFile'
     */
    @Test
    void baseHostsFileTest() {
        // TODO: test baseHostsFile
    }

    /**
     * Test the property 'capAdd'
     */
    @Test
    void capAddTest() {
        // TODO: test capAdd
    }

    /**
     * Test the property 'capDrop'
     */
    @Test
    void capDropTest() {
        // TODO: test capDrop
    }

    /**
     * Test the property 'cgroupParent'
     */
    @Test
    void cgroupParentTest() {
        // TODO: test cgroupParent
    }

    /**
     * Test the property 'cgroupns'
     */
    @Test
    void cgroupnsTest() {
        // TODO: test cgroupns
    }

    /**
     * Test the property 'cgroupsMode'
     */
    @Test
    void cgroupsModeTest() {
        // TODO: test cgroupsMode
    }

    /**
     * Test the property 'chrootDirectories'
     */
    @Test
    void chrootDirectoriesTest() {
        // TODO: test chrootDirectories
    }

    /**
     * Test the property 'cniNetworks'
     */
    @Test
    void cniNetworksTest() {
        // TODO: test cniNetworks
    }

    /**
     * Test the property 'command'
     */
    @Test
    void commandTest() {
        // TODO: test command
    }

    /**
     * Test the property 'conmonPidFile'
     */
    @Test
    void conmonPidFileTest() {
        // TODO: test conmonPidFile
    }

    /**
     * Test the property 'containerCreateCommand'
     */
    @Test
    void containerCreateCommandTest() {
        // TODO: test containerCreateCommand
    }

    /**
     * Test the property 'createWorkingDir'
     */
    @Test
    void createWorkingDirTest() {
        // TODO: test createWorkingDir
    }

    /**
     * Test the property 'dependencyContainers'
     */
    @Test
    void dependencyContainersTest() {
        // TODO: test dependencyContainers
    }

    /**
     * Test the property 'deviceCgroupRule'
     */
    @Test
    void deviceCgroupRuleTest() {
        // TODO: test deviceCgroupRule
    }

    /**
     * Test the property 'devices'
     */
    @Test
    void devicesTest() {
        // TODO: test devices
    }

    /**
     * Test the property 'devicesFrom'
     */
    @Test
    void devicesFromTest() {
        // TODO: test devicesFrom
    }

    /**
     * Test the property 'dnsOption'
     */
    @Test
    void dnsOptionTest() {
        // TODO: test dnsOption
    }

    /**
     * Test the property 'dnsSearch'
     */
    @Test
    void dnsSearchTest() {
        // TODO: test dnsSearch
    }

    /**
     * Test the property 'dnsServer'
     */
    @Test
    void dnsServerTest() {
        // TODO: test dnsServer
    }

    /**
     * Test the property 'entrypoint'
     */
    @Test
    void entrypointTest() {
        // TODO: test entrypoint
    }

    /**
     * Test the property 'env'
     */
    @Test
    void envTest() {
        // TODO: test env
    }

    /**
     * Test the property 'envHost'
     */
    @Test
    void envHostTest() {
        // TODO: test envHost
    }

    /**
     * Test the property 'envmerge'
     */
    @Test
    void envmergeTest() {
        // TODO: test envmerge
    }

    /**
     * Test the property 'expose'
     */
    @Test
    void exposeTest() {
        // TODO: test expose
    }

    /**
     * Test the property 'groupEntry'
     */
    @Test
    void groupEntryTest() {
        // TODO: test groupEntry
    }

    /**
     * Test the property 'groups'
     */
    @Test
    void groupsTest() {
        // TODO: test groups
    }

    /**
     * Test the property 'healthCheckOnFailureAction'
     */
    @Test
    void healthCheckOnFailureActionTest() {
        // TODO: test healthCheckOnFailureAction
    }

    /**
     * Test the property 'healthLogDestination'
     */
    @Test
    void healthLogDestinationTest() {
        // TODO: test healthLogDestination
    }

    /**
     * Test the property 'healthMaxLogCount'
     */
    @Test
    void healthMaxLogCountTest() {
        // TODO: test healthMaxLogCount
    }

    /**
     * Test the property 'healthMaxLogSize'
     */
    @Test
    void healthMaxLogSizeTest() {
        // TODO: test healthMaxLogSize
    }

    /**
     * Test the property 'healthconfig'
     */
    @Test
    void healthconfigTest() {
        // TODO: test healthconfig
    }

    /**
     * Test the property 'hostDeviceList'
     */
    @Test
    void hostDeviceListTest() {
        // TODO: test hostDeviceList
    }

    /**
     * Test the property 'hostadd'
     */
    @Test
    void hostaddTest() {
        // TODO: test hostadd
    }

    /**
     * Test the property 'hostname'
     */
    @Test
    void hostnameTest() {
        // TODO: test hostname
    }

    /**
     * Test the property 'hostusers'
     */
    @Test
    void hostusersTest() {
        // TODO: test hostusers
    }

    /**
     * Test the property 'httpproxy'
     */
    @Test
    void httpproxyTest() {
        // TODO: test httpproxy
    }

    /**
     * Test the property 'idmappings'
     */
    @Test
    void idmappingsTest() {
        // TODO: test idmappings
    }

    /**
     * Test the property 'image'
     */
    @Test
    void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'imageArch'
     */
    @Test
    void imageArchTest() {
        // TODO: test imageArch
    }

    /**
     * Test the property 'imageOs'
     */
    @Test
    void imageOsTest() {
        // TODO: test imageOs
    }

    /**
     * Test the property 'imageVariant'
     */
    @Test
    void imageVariantTest() {
        // TODO: test imageVariant
    }

    /**
     * Test the property 'imageVolumeMode'
     */
    @Test
    void imageVolumeModeTest() {
        // TODO: test imageVolumeMode
    }

    /**
     * Test the property 'imageVolumes'
     */
    @Test
    void imageVolumesTest() {
        // TODO: test imageVolumes
    }

    /**
     * Test the property 'init'
     */
    @Test
    void initTest() {
        // TODO: test init
    }

    /**
     * Test the property 'initContainerType'
     */
    @Test
    void initContainerTypeTest() {
        // TODO: test initContainerType
    }

    /**
     * Test the property 'initPath'
     */
    @Test
    void initPathTest() {
        // TODO: test initPath
    }

    /**
     * Test the property 'intelRdt'
     */
    @Test
    void intelRdtTest() {
        // TODO: test intelRdt
    }

    /**
     * Test the property 'ipcns'
     */
    @Test
    void ipcnsTest() {
        // TODO: test ipcns
    }

    /**
     * Test the property 'labelNested'
     */
    @Test
    void labelNestedTest() {
        // TODO: test labelNested
    }

    /**
     * Test the property 'labels'
     */
    @Test
    void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'logConfiguration'
     */
    @Test
    void logConfigurationTest() {
        // TODO: test logConfiguration
    }

    /**
     * Test the property 'managePassword'
     */
    @Test
    void managePasswordTest() {
        // TODO: test managePassword
    }

    /**
     * Test the property 'mask'
     */
    @Test
    void maskTest() {
        // TODO: test mask
    }

    /**
     * Test the property 'mounts'
     */
    @Test
    void mountsTest() {
        // TODO: test mounts
    }

    /**
     * Test the property 'name'
     */
    @Test
    void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'netns'
     */
    @Test
    void netnsTest() {
        // TODO: test netns
    }

    /**
     * Test the property 'networkOptions'
     */
    @Test
    void networkOptionsTest() {
        // TODO: test networkOptions
    }

    /**
     * Test the property 'noNewPrivileges'
     */
    @Test
    void noNewPrivilegesTest() {
        // TODO: test noNewPrivileges
    }

    /**
     * Test the property 'ociRuntime'
     */
    @Test
    void ociRuntimeTest() {
        // TODO: test ociRuntime
    }

    /**
     * Test the property 'oomScoreAdj'
     */
    @Test
    void oomScoreAdjTest() {
        // TODO: test oomScoreAdj
    }

    /**
     * Test the property 'overlayVolumes'
     */
    @Test
    void overlayVolumesTest() {
        // TODO: test overlayVolumes
    }

    /**
     * Test the property 'passwdEntry'
     */
    @Test
    void passwdEntryTest() {
        // TODO: test passwdEntry
    }

    /**
     * Test the property 'personality'
     */
    @Test
    void personalityTest() {
        // TODO: test personality
    }

    /**
     * Test the property 'pidns'
     */
    @Test
    void pidnsTest() {
        // TODO: test pidns
    }

    /**
     * Test the property 'pod'
     */
    @Test
    void podTest() {
        // TODO: test pod
    }

    /**
     * Test the property 'portmappings'
     */
    @Test
    void portmappingsTest() {
        // TODO: test portmappings
    }

    /**
     * Test the property 'privileged'
     */
    @Test
    void privilegedTest() {
        // TODO: test privileged
    }

    /**
     * Test the property 'procfsOpts'
     */
    @Test
    void procfsOptsTest() {
        // TODO: test procfsOpts
    }

    /**
     * Test the property 'publishImagePorts'
     */
    @Test
    void publishImagePortsTest() {
        // TODO: test publishImagePorts
    }

    /**
     * Test the property 'rLimits'
     */
    @Test
    void rLimitsTest() {
        // TODO: test rLimits
    }

    /**
     * Test the property 'rawImageName'
     */
    @Test
    void rawImageNameTest() {
        // TODO: test rawImageName
    }

    /**
     * Test the property 'readOnlyFilesystem'
     */
    @Test
    void readOnlyFilesystemTest() {
        // TODO: test readOnlyFilesystem
    }

    /**
     * Test the property 'readWriteTmpfs'
     */
    @Test
    void readWriteTmpfsTest() {
        // TODO: test readWriteTmpfs
    }

    /**
     * Test the property 'remove'
     */
    @Test
    void removeTest() {
        // TODO: test remove
    }

    /**
     * Test the property 'removeImage'
     */
    @Test
    void removeImageTest() {
        // TODO: test removeImage
    }

    /**
     * Test the property 'resourceLimits'
     */
    @Test
    void resourceLimitsTest() {
        // TODO: test resourceLimits
    }

    /**
     * Test the property 'restartPolicy'
     */
    @Test
    void restartPolicyTest() {
        // TODO: test restartPolicy
    }

    /**
     * Test the property 'restartTries'
     */
    @Test
    void restartTriesTest() {
        // TODO: test restartTries
    }

    /**
     * Test the property 'rootfs'
     */
    @Test
    void rootfsTest() {
        // TODO: test rootfs
    }

    /**
     * Test the property 'rootfsMapping'
     */
    @Test
    void rootfsMappingTest() {
        // TODO: test rootfsMapping
    }

    /**
     * Test the property 'rootfsOverlay'
     */
    @Test
    void rootfsOverlayTest() {
        // TODO: test rootfsOverlay
    }

    /**
     * Test the property 'rootfsPropagation'
     */
    @Test
    void rootfsPropagationTest() {
        // TODO: test rootfsPropagation
    }

    /**
     * Test the property 'sdnotifyMode'
     */
    @Test
    void sdnotifyModeTest() {
        // TODO: test sdnotifyMode
    }

    /**
     * Test the property 'seccompPolicy'
     */
    @Test
    void seccompPolicyTest() {
        // TODO: test seccompPolicy
    }

    /**
     * Test the property 'seccompProfilePath'
     */
    @Test
    void seccompProfilePathTest() {
        // TODO: test seccompProfilePath
    }

    /**
     * Test the property 'secretEnv'
     */
    @Test
    void secretEnvTest() {
        // TODO: test secretEnv
    }

    /**
     * Test the property 'secrets'
     */
    @Test
    void secretsTest() {
        // TODO: test secrets
    }

    /**
     * Test the property 'selinuxOpts'
     */
    @Test
    void selinuxOptsTest() {
        // TODO: test selinuxOpts
    }

    /**
     * Test the property 'shmSize'
     */
    @Test
    void shmSizeTest() {
        // TODO: test shmSize
    }

    /**
     * Test the property 'shmSizeSystemd'
     */
    @Test
    void shmSizeSystemdTest() {
        // TODO: test shmSizeSystemd
    }

    /**
     * Test the property 'startupHealthConfig'
     */
    @Test
    void startupHealthConfigTest() {
        // TODO: test startupHealthConfig
    }

    /**
     * Test the property 'stdin'
     */
    @Test
    void stdinTest() {
        // TODO: test stdin
    }

    /**
     * Test the property 'stopSignal'
     */
    @Test
    void stopSignalTest() {
        // TODO: test stopSignal
    }

    /**
     * Test the property 'stopTimeout'
     */
    @Test
    void stopTimeoutTest() {
        // TODO: test stopTimeout
    }

    /**
     * Test the property 'storageOpts'
     */
    @Test
    void storageOptsTest() {
        // TODO: test storageOpts
    }

    /**
     * Test the property 'sysctl'
     */
    @Test
    void sysctlTest() {
        // TODO: test sysctl
    }

    /**
     * Test the property 'systemd'
     */
    @Test
    void systemdTest() {
        // TODO: test systemd
    }

    /**
     * Test the property 'terminal'
     */
    @Test
    void terminalTest() {
        // TODO: test terminal
    }

    /**
     * Test the property 'throttleReadBpsDevice'
     */
    @Test
    void throttleReadBpsDeviceTest() {
        // TODO: test throttleReadBpsDevice
    }

    /**
     * Test the property 'throttleReadIOPSDevice'
     */
    @Test
    void throttleReadIOPSDeviceTest() {
        // TODO: test throttleReadIOPSDevice
    }

    /**
     * Test the property 'throttleWriteBpsDevice'
     */
    @Test
    void throttleWriteBpsDeviceTest() {
        // TODO: test throttleWriteBpsDevice
    }

    /**
     * Test the property 'throttleWriteIOPSDevice'
     */
    @Test
    void throttleWriteIOPSDeviceTest() {
        // TODO: test throttleWriteIOPSDevice
    }

    /**
     * Test the property 'timeout'
     */
    @Test
    void timeoutTest() {
        // TODO: test timeout
    }

    /**
     * Test the property 'timezone'
     */
    @Test
    void timezoneTest() {
        // TODO: test timezone
    }

    /**
     * Test the property 'umask'
     */
    @Test
    void umaskTest() {
        // TODO: test umask
    }

    /**
     * Test the property 'unified'
     */
    @Test
    void unifiedTest() {
        // TODO: test unified
    }

    /**
     * Test the property 'unmask'
     */
    @Test
    void unmaskTest() {
        // TODO: test unmask
    }

    /**
     * Test the property 'unsetenv'
     */
    @Test
    void unsetenvTest() {
        // TODO: test unsetenv
    }

    /**
     * Test the property 'unsetenvall'
     */
    @Test
    void unsetenvallTest() {
        // TODO: test unsetenvall
    }

    /**
     * Test the property 'useImageHosts'
     */
    @Test
    void useImageHostsTest() {
        // TODO: test useImageHosts
    }

    /**
     * Test the property 'useImageResolveConf'
     */
    @Test
    void useImageResolveConfTest() {
        // TODO: test useImageResolveConf
    }

    /**
     * Test the property 'user'
     */
    @Test
    void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'userns'
     */
    @Test
    void usernsTest() {
        // TODO: test userns
    }

    /**
     * Test the property 'utsns'
     */
    @Test
    void utsnsTest() {
        // TODO: test utsns
    }

    /**
     * Test the property '_volatile'
     */
    @Test
    void _volatileTest() {
        // TODO: test _volatile
    }

    /**
     * Test the property 'volumes'
     */
    @Test
    void volumesTest() {
        // TODO: test volumes
    }

    /**
     * Test the property 'volumesFrom'
     */
    @Test
    void volumesFromTest() {
        // TODO: test volumesFrom
    }

    /**
     * Test the property 'weightDevice'
     */
    @Test
    void weightDeviceTest() {
        // TODO: test weightDevice
    }

    /**
     * Test the property 'workDir'
     */
    @Test
    void workDirTest() {
        // TODO: test workDir
    }

}
